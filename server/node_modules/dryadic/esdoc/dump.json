[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/CommandMiddleware.js",
    "memberof": null,
    "longname": "src/CommandMiddleware.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as _ from 'underscore';\n\n\n/**\n * Executes command trees using registered middleware.\n *\n * Middleware are functions that take two arguments: commandObject, context\n *\n * Where commandObject may have multiple keys, and middleware may handle none or more of those keys.\n * eg. the `run` middleware handles only the command key `run`\n */\nexport default class CommandMiddleware {\n\n  constructor(middlewares=[]) {\n    this.middlewares = middlewares;\n  }\n\n  use(middlewares) {\n    this.middlewares = this.middlewares.concat(middlewares);\n  }\n\n  /**\n   * Each middleware is called with each command in a flattened depth-first stack.\n   *\n   * Any command that returns a Promise will be resolved,\n   * and the entire action (add, remove, update) is considered complete\n   * when all command results have resolved.\n   *\n   *\n   *\n   * @param {Object} commandRoot - The root command node of the tree as collected by DryadTree collectCommands. It contains pointers to the children.\n   * @param {String} actionName - Each node has its context updated after success or failure as `{state: {actionName: true|false[, error: error]}}` On failure the error will also be stored here for debugging.\n   * @param {Function} updateContext - supplied by the DryadPlayer, a function to update the context for a node.\n   *\n   * @returns {Promise} - resolves when all executed commands have resolved\n   */\n  call(commandRoot, actionName, updateContext) {\n    const stack = this._flatten(commandRoot);\n    const promises = stack.map((cc) => {\n      const calls = this.middlewares.map((middleware) => middleware(cc.commands, cc.context));\n      return Promise.all(calls)\n        .then(() => {\n          updateContext(cc.context, {state: {[actionName]: true}});\n        }, (error) => {\n          // log error\n          updateContext(cc.context, {state: {[actionName]: false, error}});\n          return Promise.reject(error);\n        });\n    });\n    return Promise.all(promises);\n  }\n\n  /**\n   * Given a command object return a flat list of the commands and the childrens' command objects\n   */\n  _flatten(node) {\n    return [\n      {commands: node.commands, context: node.context}\n    ].concat(_.flatten(node.children.map((n) => this._flatten(n)), true));\n  }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandMiddleware",
    "memberof": "src/CommandMiddleware.js",
    "longname": "src/CommandMiddleware.js~CommandMiddleware",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/CommandMiddleware.js",
    "importStyle": "CommandMiddleware",
    "description": "Executes command trees using registered middleware.\n\nMiddleware are functions that take two arguments: commandObject, context\n\nWhere commandObject may have multiple keys, and middleware may handle none or more of those keys.\neg. the `run` middleware handles only the command key `run`",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "middlewares",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "middlewares",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#middlewares",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "use",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#use",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "middlewares",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "middlewares",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#middlewares",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "call",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#call",
    "access": null,
    "description": "Each middleware is called with each command in a flattened depth-first stack.\n\nAny command that returns a Promise will be resolved,\nand the entire action (add, remove, update) is considered complete\nwhen all command results have resolved.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - resolves when all executed commands have resolved"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "commandRoot",
        "description": "The root command node of the tree as collected by DryadTree collectCommands. It contains pointers to the children."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": "Each node has its context updated after success or failure as `{state: {actionName: true|false[, error: error]}}` On failure the error will also be stored here for debugging."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "updateContext",
        "description": "supplied by the DryadPlayer, a function to update the context for a node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves when all executed commands have resolved"
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_flatten",
    "memberof": "src/CommandMiddleware.js~CommandMiddleware",
    "longname": "src/CommandMiddleware.js~CommandMiddleware#_flatten",
    "access": null,
    "description": "Given a command object return a flat list of the commands and the childrens' command objects",
    "lineNumber": 56,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Dryad.js",
    "memberof": null,
    "longname": "src/Dryad.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as _  from 'underscore';\n\n/**\n * >> A dryad (/ˈdraɪ.æd/; Greek: Δρυάδες, sing.: Δρυάς) is a tree nymph, or female tree spirit, in Greek mythology\n *\n * A Dryad is a component for managing the creation and control of something.\n *\n * For instance that 'something' could be a SuperCollider Synth, or a MIDI connection, SVG or Canvas in a webrowser,\n * a datasource, a web resource to fetch or an external process.\n *\n * It is anything that you want to specify parameters for and then create according to those parameters.\n *\n * Dryads have properties and children but do not hold any internal state.\n * Their methods are passed a context object and they perform their functionality\n * based on their properties (what they are supposed to be / to do) and the context\n * which holds the state, temporary variables they need for operation (like supercollider node ids) and gives them access to variables defined by parent nodes in the play graph.\n *\n * They provide functionality by return command objects which are processed by\n * command middleware which is supplied by various Dryadic packages.\n */\n\n\nexport default class Dryad {\n\n  /**\n   * Subclasses should not implement constructor.\n   * All Dryad classes take properties and children.\n   */\n  constructor(properties={}, children=[]) {\n    this.properties = _.assign({}, this.defaultProperties(), properties || {});\n    this.children = children || [];\n    this.tag = null;\n  }\n\n  /**\n   * Defaults properties if none are supplied\n   */\n  defaultProperties() {\n    return {};\n  }\n\n  /**\n   * Returns a command object or a function that is called with node context and will return a command object.\n   *\n   * Values of the command objects are functions may return Promises,\n   * and may reject those promises which will halt the .add() operation\n\n   * The function is called with the node's context\n   *\n   * Middleware supplied by layers will match command keys and will be passed the value.\n   * Value is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.\n   */\n  prepareForAdd(/*player*/) {\n    return {};\n  }\n\n  /**\n   * Add the Dryad, make it play, make it start etc.\n   *\n   * Returns a command object or a function that is called with node context and will return a command object.\n   *\n   * Middleware supplied by layers will match command keys and will be passed the value.\n   * Value is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.\n   *\n   * Command middleware for add may return Promises which resolve on success; ie. when the thing is successfully booted, running etc.\n   */\n  add(/*player*/) {\n    return {};\n  }\n\n  /**\n   * Remove the Dryad, make it stop etc.\n   *\n   * Returns a command object or a function that is called with node context and will return a command object.\n   *\n   * Middleware supplied by layers will match command keys and will be passed the value.\n   * Value is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.\n   *\n   * Command middleware for run may return Promises which resolve on success; ie. when the thing is successfully stopped, remove etc.\n   */\n  remove(/*player*/) {\n    return {};\n  }\n\n  /**\n   * Dryad classes may return a subgraph of Dryads to replace itself\n   * in the play graph.\n   * This lets Dryads compose more complex behavior, add other Dryads that\n   * assist. Any Dryads supplied in properties should be included in the subgraph.\n   *\n   * The subgraph may also contain the Dryad itself in which case its .add .remove\n   * will be called. If subgraph is implemented but it does not include itself then\n   * .add / .remove will not be called.\n   */\n  subgraph() {}\n\n  /**\n   * When Dryad requires a parent Dryad to be somewhere above it then it\n   * may be specified by its class name here and the parent will be injected\n   * into the playgraph. This is similar to subgraph() but make it easy to\n   * do and is less error prone.\n   *\n   * Example: SCSynthDef compiles SynthDefs from source code and requires a supercollider SCLang interpreter as a parent to do that compilation. If there is not already an SCLang in the play graph then include one.\n   *\n   * @returns {String|undefined} - class name of required parent Dryad\n   */\n  requireParent() {}\n\n  /**\n   * Initial context\n   *\n   * This dryad's context is also the parent object for all children.\n   */\n  initialContext() {\n    return {};\n  }\n\n  /**\n   * Context for child; used when creating initial context for a node\n   *\n   * Note that the child already inherits from this context.\n   *\n   * will deprecate this. nothing is using it\n   * @deprecated\n   */\n  childContext() {\n    return {};\n  }\n\n  /**\n   * This method is never actually called, but merely because its implemented\n   * (dryad.isDryad is not undefined) it marks the things as being a Dryad.\n   *\n   * @returns {Boolean}\n   */\n  get isDryad() {\n    return true;\n  }\n\n  /**\n   * This method is never actually called, but merely because its implemented\n   * (MyDryad.isDryadSubclass is not undefined) it marks the thing as being a Dryad subclass.\n   *\n   * @returns {Boolean}\n   */\n  static isDryadSubclass() {\n    return true;\n  }\n\n  clone() {\n    let dup = new this.constructor();\n    let cloneValue = (c) => (c && c.isDryad) ? c.clone() : _.clone(c);\n    dup.properties = _.mapObject(this.properties, cloneValue);\n    dup.children = this.children.map(cloneValue);\n    return dup;\n  }\n}\n"
  },
  {
    "__docId__": 9,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Dryad",
    "memberof": "src/Dryad.js",
    "longname": "src/Dryad.js~Dryad",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/Dryad.js",
    "importStyle": "Dryad",
    "description": ">> A dryad (/ˈdraɪ.æd/; Greek: Δρυάδες, sing.: Δρυάς) is a tree nymph, or female tree spirit, in Greek mythology\n\nA Dryad is a component for managing the creation and control of something.\n\nFor instance that 'something' could be a SuperCollider Synth, or a MIDI connection, SVG or Canvas in a webrowser,\na datasource, a web resource to fetch or an external process.\n\nIt is anything that you want to specify parameters for and then create according to those parameters.\n\nDryads have properties and children but do not hold any internal state.\nTheir methods are passed a context object and they perform their functionality\nbased on their properties (what they are supposed to be / to do) and the context\nwhich holds the state, temporary variables they need for operation (like supercollider node ids) and gives them access to variables defined by parent nodes in the play graph.\n\nThey provide functionality by return command objects which are processed by\ncommand middleware which is supplied by various Dryadic packages.",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#constructor",
    "access": null,
    "description": "Subclasses should not implement constructor.\nAll Dryad classes take properties and children.",
    "lineNumber": 29,
    "params": [
      {
        "name": "properties",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "children",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "properties",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#properties",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#children",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tag",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#tag",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "defaultProperties",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#defaultProperties",
    "access": null,
    "description": "Defaults properties if none are supplied",
    "lineNumber": 38,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepareForAdd",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#prepareForAdd",
    "access": null,
    "description": "Returns a command object or a function that is called with node context and will return a command object.\n\nValues of the command objects are functions may return Promises,\nand may reject those promises which will halt the .add() operation\nThe function is called with the node's context\n\nMiddleware supplied by layers will match command keys and will be passed the value.\nValue is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.",
    "lineNumber": 53,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#add",
    "access": null,
    "description": "Add the Dryad, make it play, make it start etc.\n\nReturns a command object or a function that is called with node context and will return a command object.\n\nMiddleware supplied by layers will match command keys and will be passed the value.\nValue is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.\n\nCommand middleware for add may return Promises which resolve on success; ie. when the thing is successfully booted, running etc.",
    "lineNumber": 67,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#remove",
    "access": null,
    "description": "Remove the Dryad, make it stop etc.\n\nReturns a command object or a function that is called with node context and will return a command object.\n\nMiddleware supplied by layers will match command keys and will be passed the value.\nValue is either an object that the middleware uses to do whatever it does (launch things, send messages) or is a function that take context and returns the object.\n\nCommand middleware for run may return Promises which resolve on success; ie. when the thing is successfully stopped, remove etc.",
    "lineNumber": 81,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subgraph",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#subgraph",
    "access": null,
    "description": "Dryad classes may return a subgraph of Dryads to replace itself\nin the play graph.\nThis lets Dryads compose more complex behavior, add other Dryads that\nassist. Any Dryads supplied in properties should be included in the subgraph.\n\nThe subgraph may also contain the Dryad itself in which case its .add .remove\nwill be called. If subgraph is implemented but it does not include itself then\n.add / .remove will not be called.",
    "lineNumber": 95,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "requireParent",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#requireParent",
    "access": null,
    "description": "When Dryad requires a parent Dryad to be somewhere above it then it\nmay be specified by its class name here and the parent will be injected\ninto the playgraph. This is similar to subgraph() but make it easy to\ndo and is less error prone.\n\nExample: SCSynthDef compiles SynthDefs from source code and requires a supercollider SCLang interpreter as a parent to do that compilation. If there is not already an SCLang in the play graph then include one.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String|undefined} - class name of required parent Dryad"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "undefined"
      ],
      "spread": false,
      "description": "class name of required parent Dryad"
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initialContext",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#initialContext",
    "access": null,
    "description": "Initial context\n\nThis dryad's context is also the parent object for all children.",
    "lineNumber": 114,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "childContext",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#childContext",
    "access": null,
    "description": "Context for child; used when creating initial context for a node\n\nNote that the child already inherits from this context.\n\nwill deprecate this. nothing is using it",
    "lineNumber": 126,
    "deprecated": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isDryad",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#isDryad",
    "access": null,
    "description": "This method is never actually called, but merely because its implemented\n(dryad.isDryad is not undefined) it marks the things as being a Dryad.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isDryadSubclass",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad.isDryadSubclass",
    "access": null,
    "description": "This method is never actually called, but merely because its implemented\n(MyDryad.isDryadSubclass is not undefined) it marks the thing as being a Dryad subclass.",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/Dryad.js~Dryad",
    "longname": "src/Dryad.js~Dryad#clone",
    "access": null,
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/DryadPlayer.js",
    "memberof": null,
    "longname": "src/DryadPlayer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import _ from 'underscore';\nimport DryadTree from './DryadTree';\nimport CommandMiddleware from './CommandMiddleware';\nimport {Promise} from 'bluebird';\nimport hyperscript from './hyperscript';\n\nif (process) {\n  process.on('unhandledRejection', function(reason) {\n    console.error('Unhandled Rejection:', reason, reason && reason.stack);\n  });\n} else {\n  Promise.onPossiblyUnhandledRejection((error) => {\n    console.error(error);\n    throw Error(error);\n  });\n}\n\n\n/**\n * Manages play/stop/update for a Dryad tree.\n *\n * A Dryad has no state or functionality until it is played\n * by a DryadPlayer. A Dryad can be played more than once at\n * the same time by creating more DryadPlayers.\n *\n * The DryadPlayer also holds the layers and command middleware\n * which execute the functionality that the Dryads specify.\n */\nexport default class DryadPlayer {\n\n  constructor(rootDryad, layers, rootContext = {}) {\n    this.middleware = new CommandMiddleware();\n    this.classes = {};\n    if (layers) {\n      layers.forEach((layer) => {\n        this.use(layer);\n      });\n    }\n\n    if (!rootContext.log) {\n      rootContext.log = console;\n    }\n\n    this.log = rootContext.log;\n\n    this._errorHandler = (error) => this.log.error(error);\n\n    this.setRoot(rootDryad, rootContext);\n  }\n\n  /**\n   * Set a new tree.\n   *\n   * Behavior while already playing is not yet defined.\n   *\n   * @param {Dryad} dryad\n   */\n  setRoot(dryad, rootContext) {\n    if (dryad) {\n      let classLookup = _.bind(this.getClass, this);\n      this.tree = new DryadTree(this.h(dryad), classLookup, rootContext);\n    } else {\n      this.tree = null;\n    }\n  }\n\n  /**\n   * Convert hyperscript graph to Dryad objects with registered classes\n   *\n   * @param {Object} hgraph - JSON style object\n   * @returns {Dryad}\n   */\n  h(hgraph) {\n    let classLookup = _.bind(this.getClass, this);\n    return hyperscript(hgraph, classLookup);\n  }\n\n  /**\n   * Add a layer of functionality by registering Dryad classes and command middleware.\n   *\n   * @param {Object} layer - .classes is a list of Dryad classes, .middleware is a list of middleware functions\n   */\n  use(layer) {\n    this.middleware.use(layer.middleware || []);\n    (layer.classes || []).forEach((c) => this.addClass(c));\n    return this;\n  }\n\n  /**\n   * Register a Dryad class so it can be located when used in hyperscript.\n   * Also needed if a class uses requireParent()\n   *\n   * @param {Dryad} dryadClass\n   */\n  addClass(dryadClass) {\n    this.classes[dryadClass.name.toLowerCase()] = dryadClass;\n  }\n\n  /**\n   * Lookup Dryad class by name.\n   *\n   * Used by hyperscript and requireParent, this requires\n   * that layers and their classes were registered and any custom\n   * classes that you right are registered. If you aren't using\n   * hyperscript then you don't need to register your class.\n   * @param {String} className - case-insensitive\n   * @returns {Dryad}\n   */\n  getClass(className) {\n    let dryadClass = this.classes[className.toLowerCase()];\n    if (!dryadClass) {\n      throw new Error(`Dryad class not found: '${className}' in classes: ${Object.keys(this.classes)}`);\n    }\n    return dryadClass;\n  }\n\n  /**\n   * @returns {Promise} - that resolves to `this`\n   */\n  play(dryad) {\n    if (dryad) {\n      this.setRoot(dryad);\n    }\n    let prepTree = this._collectCommands('prepareForAdd');\n    let addTree = this._collectCommands('add');\n    return this._callPrepare(prepTree)\n      .then(() => this._call(addTree, 'add'))\n      .then(() => this)\n      .catch(this._errorHandler);\n  }\n\n  /**\n   * @returns {Promise} - that resolves to `this`\n   */\n  stop() {\n    let removeTree = this._collectCommands('remove');\n    return this._call(removeTree, 'remove').then(() => this).catch(this._errorHandler);\n  }\n\n  _collectCommands(commandName) {\n    return this.tree.collectCommands(commandName, this.tree.tree, this);\n  }\n\n  /**\n   * Execute a prepareForAdd tree of command objects.\n   *\n   * Values of the command objects are functions may return Promises.\n   *\n   * @param {Object} prepTree - id, commands, context, children\n   * @returns {Promise} - resolves when all Promises in the tree have resolved\n   */\n  _callPrepare(prepTree) {\n    var commands = prepTree.commands || {};\n    if (_.isFunction(commands)) {\n      commands = commands(prepTree.context);\n    }\n    return callAndResolveValues(commands, prepTree.context).then((resolved) => {\n      // save resolved to that node's context\n      // and mark that its $prepared: true for debugging\n      this.updateContext(prepTree.context, _.assign({state: {prepare: true}}, resolved));\n      let childPromises = prepTree.children.map((childPrep) => this._callPrepare(childPrep));\n      return Promise.all(childPromises);\n    }, (error) => {\n      this.updateContext(prepTree.context, {state: {prepare: false, error: error}});\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Execute a command tree using middleware.\n   *\n   * @returns {Promise}\n   */\n  _call(commandTree, stateTransitionName) {\n    const updateContext = (context, update) => {\n      this.tree.updateContext(context.id, update);\n    };\n    return this.middleware.call(commandTree, stateTransitionName, updateContext);\n  }\n\n  /**\n   * Execute a single command object for a single node using middleware\n   * outside the prepareForAdd/add/remove full tree command execution routine.\n   *\n   * This can be called out of band from a Dryad's add/remove method\n   *\n   * Its for commands that need to be executed during runtime\n   * in response to events, streams etc.\n   * eg. spawning synths from an incoming stream of data.\n   */\n  callCommand(nodeId, command) {\n    return this._call(this.tree.makeCommandTree(nodeId, command), 'callCommand');\n  }\n\n  /**\n   * Allow a Dryad to update its own context.\n   *\n   * Contexts are immutable - this returns a new context object.\n   */\n  updateContext(context, update) {\n    return this.tree.updateContext(context.id, update);\n  }\n\n  /**\n   * Get a representation of current state of the tree.\n   * Contains add|remove|prepared and may hold errors.\n   */\n  getDebugState() {\n    return this.tree.getDebugState();\n  }\n}\n\n\n/**\n * Returns a new object with each value mapped to the called-and-resolved value.\n *\n * For each key/value in commands object,\n * if value is a function then call it\n * if result is a Promise then resolve it.\n *\n * @private\n * @param {Object} commands\n * @returns {Object}\n */\nfunction callAndResolveValues(commands, context) {\n  if (_.isEmpty(commands)) {\n    return Promise.resolve({});\n  }\n  const keys = _.keys(commands);\n  return Promise.map(keys, (key) => {\n    let value = commands[key];\n    return Promise.resolve(_.isFunction(value) ? value(context) : value);\n  }).then((values) => {\n    let result = {};\n    keys.forEach((key, i) => {\n      result[key] = values[i];\n    });\n    return result;\n  });\n}\n"
  },
  {
    "__docId__": 26,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DryadPlayer",
    "memberof": "src/DryadPlayer.js",
    "longname": "src/DryadPlayer.js~DryadPlayer",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/DryadPlayer.js",
    "importStyle": "DryadPlayer",
    "description": "Manages play/stop/update for a Dryad tree.\n\nA Dryad has no state or functionality until it is played\nby a DryadPlayer. A Dryad can be played more than once at\nthe same time by creating more DryadPlayers.\n\nThe DryadPlayer also holds the layers and command middleware\nwhich execute the functionality that the Dryads specify.",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 27,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "rootDryad",
        "types": [
          "*"
        ]
      },
      {
        "name": "layers",
        "types": [
          "*"
        ]
      },
      {
        "name": "rootContext",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "middleware",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#middleware",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "classes",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#classes",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "log",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#log",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_errorHandler",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#_errorHandler",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setRoot",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#setRoot",
    "access": null,
    "description": "Set a new tree.\n\nBehavior while already playing is not yet defined.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "dryad",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tree",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#tree",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tree",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#tree",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "h",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#h",
    "access": null,
    "description": "Convert hyperscript graph to Dryad objects with registered classes",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Dryad}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hgraph",
        "description": "JSON style object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Dryad"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "use",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#use",
    "access": null,
    "description": "Add a layer of functionality by registering Dryad classes and command middleware.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "layer",
        "description": ".classes is a list of Dryad classes, .middleware is a list of middleware functions"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addClass",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#addClass",
    "access": null,
    "description": "Register a Dryad class so it can be located when used in hyperscript.\nAlso needed if a class uses requireParent()",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "dryadClass",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getClass",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#getClass",
    "access": null,
    "description": "Lookup Dryad class by name.\n\nUsed by hyperscript and requireParent, this requires\nthat layers and their classes were registered and any custom\nclasses that you right are registered. If you aren't using\nhyperscript then you don't need to register your class.",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Dryad}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "case-insensitive"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Dryad"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "play",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#play",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - that resolves to `this`"
      }
    ],
    "params": [
      {
        "name": "dryad",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves to `this`"
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stop",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#stop",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - that resolves to `this`"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "that resolves to `this`"
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_collectCommands",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#_collectCommands",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_callPrepare",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#_callPrepare",
    "access": null,
    "description": "Execute a prepareForAdd tree of command objects.\n\nValues of the command objects are functions may return Promises.",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - resolves when all Promises in the tree have resolved"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prepTree",
        "description": "id, commands, context, children"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves when all Promises in the tree have resolved"
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_call",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#_call",
    "access": null,
    "description": "Execute a command tree using middleware.",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "name": "commandTree",
        "types": [
          "*"
        ]
      },
      {
        "name": "stateTransitionName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "callCommand",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#callCommand",
    "access": null,
    "description": "Execute a single command object for a single node using middleware\noutside the prepareForAdd/add/remove full tree command execution routine.\n\nThis can be called out of band from a Dryad's add/remove method\n\nIts for commands that need to be executed during runtime\nin response to events, streams etc.\neg. spawning synths from an incoming stream of data.",
    "lineNumber": 191,
    "params": [
      {
        "name": "nodeId",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateContext",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#updateContext",
    "access": null,
    "description": "Allow a Dryad to update its own context.\n\nContexts are immutable - this returns a new context object.",
    "lineNumber": 200,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "update",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDebugState",
    "memberof": "src/DryadPlayer.js~DryadPlayer",
    "longname": "src/DryadPlayer.js~DryadPlayer#getDebugState",
    "access": null,
    "description": "Get a representation of current state of the tree.\nContains add|remove|prepared and may hold errors.",
    "lineNumber": 208,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "callAndResolveValues",
    "memberof": "src/DryadPlayer.js",
    "longname": "src/DryadPlayer.js~callAndResolveValues",
    "access": "private",
    "export": false,
    "importPath": "dryadic/src/DryadPlayer.js",
    "importStyle": null,
    "description": "Returns a new object with each value mapped to the called-and-resolved value.\n\nFor each key/value in commands object,\nif value is a function then call it\nif result is a Promise then resolve it.",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/DryadTree.js",
    "memberof": null,
    "longname": "src/DryadTree.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as _ from 'underscore';\n\n\n/**\n * Manages the tree structure, contexts for nodes,\n * utilities to walk the tree, collect commands and\n * call command middleware.\n */\nexport default class DryadTree {\n\n  /**\n   * @param {Dryad} rootDryad\n   * @param {Function} getClass - lookup function\n   */\n  constructor(rootDryad, getClass, rootContext={}) {\n    this.root = rootDryad;\n    this.dryads = {};\n    this.contexts = {};\n    this.getClass = getClass;\n    this.rootContext = rootContext;\n    this.tree = this._makeTree(this.root);\n  }\n\n  /**\n   * Depth first traversal of the Dryad tree\n   *\n   * The function is given arguments:\n   *   node {id type children}\n   *   Dryad\n   *   context\n   *   memo\n   *\n   * @param {Function} fn - called with (dryad, context, node)\n   * @param {Object} node - data object\n   * @param {Object} memo - for usage during recursion\n   */\n  walk(fn, node, memo) {\n    if (!node) {\n      node = this.root;\n    }\n    memo = fn(node, this.dryads[node.id], this.contexts[node.id], memo);\n    node.children.forEach((child) => {\n      memo = this.walk(fn, child, memo);\n    });\n    return memo;\n  }\n\n  /**\n   * Collect a tree of command objects from each node for a given method.\n   * eg. 'add' 'remove' 'prepareForAdd'\n   *\n   * @param {String} methodName\n   * @param {Dryad} node\n   * @returns {Object}\n   */\n  collectCommands(methodName, node, player) {\n    let dryad = this.dryads[node.id];\n    let context = this.contexts[node.id];\n    let commands = dryad[methodName](player);\n    return {\n      commands: commands,\n      context: context,\n      id: node.id,\n      children: node.children.map((child) => this.collectCommands(methodName, child, player))\n    };\n  }\n\n  /**\n   * Construct a command tree for a single commandObject to be executed\n   * with a single node's context.\n   *\n   * This is for runtime execution of commands,\n   * called from streams and async processes initiated during Dryad's .add()\n   */\n  makeCommandTree(nodeId, command) {\n    return {\n      commands: command,\n      context: this.contexts[nodeId],\n      id: nodeId,\n      children: []\n    };\n  }\n\n  /**\n   * Update the context for a node.\n   *\n   * @param {String} dryadId\n   * @param {Object} update\n   */\n  updateContext(dryadId, update) {\n    return this.contexts[dryadId] = _.assign(this.contexts[dryadId], update);\n  }\n\n  /**\n   * Get a representation of current state of the tree.\n   * Contains add|remove|prepared and may hold errors.\n   */\n  getDebugState() {\n    const formatState = (s) => {\n      if (!s) {\n        return s;\n      }\n\n      if (s.error) {\n        return `ERROR: ${s.error}`;\n      }\n\n      if (s.add) {\n        return 'running';\n      }\n\n      if (s.remove) {\n        return 'removed';\n      }\n\n      if (s.prepared) {\n        return 'prepared';\n      }\n    };\n\n    const dbug = (node) => {\n      const r = {\n        class: this.dryads[node.id].constructor.name,\n        // props: this.dryads[node.id].properties,\n        state: formatState(this.contexts[node.id].state)\n      };\n      if (node.children.length) {\n        r.children = node.children.map(dbug);\n      }\n      return r;\n    };\n\n    return dbug(this.tree);\n  }\n\n  /**\n   * Create and return initial context for a Dryad.\n   *\n   * Each context inherits from it's parent's context.\n   *\n   * @returns {Object}\n   */\n  _createContext(dryad, dryadId, parentId, rootContext={}) {\n    let cc = _.assign({id: dryadId}, rootContext, dryad.initialContext());\n    if (parentId) {\n      let parent = this.dryads[parentId];\n      let childContext = parent.childContext(this.contexts[parentId]);\n      return _.create(this.contexts[parentId], _.assign(childContext, cc));\n    }\n    return cc;\n  }\n\n  /**\n   * Given a Dryad (possibily with children), construct a tree of Objects\n   * {id type children}\n   *\n   * Dryad classes may use requireParent() and subgraph() to replace themselves\n   * with a different graph. So this tree is not a direct representation of the input\n   * graph, but may be expanded through the use of requireParent() and subgraph()\n   *\n   * Generates ids for each Dryad\n   * Stores each by its id\n   * Creates context for each\n   *\n   * This method calls itself recursively for children.\n   *\n   * @param {Dryad} dryad\n   * @param {String} parentId\n   * @param {Integer} childIndex\n   * @param {Object} memo - for internal usage during recursion\n   * @returns {Object}\n   */\n  _makeTree(dryad, parentId, childIndex=0, memo={}) {\n    if (!dryad.isDryad) {\n      console.error('Not a dryad', dryad);\n      throw new Error('Not a Dryad:' + dryad);\n    }\n    // Copy seenTypes, pass it to your children\n    // Each branch sees a different descendent list\n    memo.seenTypes = memo.seenTypes ? memo.seenTypes.slice() : [];\n\n    if (memo.skipRequireParentOf === dryad) {\n      delete memo.skipRequireParentOf;\n    } else {\n      let rq = dryad.requireParent();\n      if (rq) {\n        if (!_.contains(memo.seenTypes, rq)) {\n          // fetch the parent class from dryadTypes registery by name\n          if (!this.getClass) {\n            throw new Error('A getClass lookup was not provided to DryadTree and ' + dryad.constructor.name + ' needs one for requireParent()');\n          }\n          let requiredParent = new (this.getClass(rq))({}, [dryad]);\n          memo.skipRequireParentOf = dryad;\n          return this._makeTree(requiredParent, parentId, childIndex, memo);\n        }\n      }\n    }\n\n    let id = parentId ? parentId + '.' + childIndex : '0';\n    let context = this._createContext(dryad, id, parentId, this.rootContext);\n    this.dryads[id] = dryad;\n    this.contexts[id] = context;\n\n    let makeSubgraph = (dr) => {\n      let subgraph = dr.subgraph();\n      if (subgraph) {\n        context.subgraph = {};\n        let subMemo = _.clone(memo);\n        // When and if this dryad appears in its own subgraph\n        // then do not call subgraph() on that. It will just\n        // do prepare/add/remove on its own self.\n        subMemo.skipSubgraphOf = dryad;\n        // objects in subgraph will store references to themselves\n        // in this dryad's context because of this memo flag:\n        subMemo.subgraphOfId = id;\n        // if its an array then should have been supplied in a Branch\n        if (Array.isArray(subgraph)) {\n          throw new Error('Dryad subgraph should return a single Dryad with children.' + dr + subgraph);\n        }\n        return this._makeTree(subgraph, id, 'subgraph', subMemo);\n      }\n    };\n\n    if (memo.skipSubgraphOf) {\n      if (memo.skipSubgraphOf === dryad) {\n        // may still be subgraph children to come\n        delete memo.skipSubgraphOf;\n      } else {\n        // This dryad is in a subgraph of another\n        // store self and context in that parent's context\n        // under the dryad.tag or create a unique id\n        if (memo.subgraphOfId) {\n          this.contexts[memo.subgraphOfId].subgraph[dryad.tag || id] = {\n            dryad: dryad,\n            context: context\n          };\n        }\n\n        let subgraph = makeSubgraph(dryad);\n        if (subgraph) {\n          return subgraph;\n        }\n      }\n    } else {\n      let subgraph = makeSubgraph(dryad);\n      if (subgraph) {\n        return subgraph;\n      }\n    }\n\n    let dryadType = dryad.constructor.name;\n    memo.seenTypes.push(dryadType);\n\n    return {\n      id: id,\n      type: dryadType,\n      // don't want Dryads from properties\n      // they should be in subgraph\n      // but there should be some comparable data dump of them\n      // for diffing\n      // properties: _convertObject(dryad.properties, dryad.id, 0, memo),\n      // parent: this.contexts[parentId],\n      children: this._convertObject(dryad.children, id, childIndex, memo)\n    };\n  }\n\n  /**\n   * private.\n   *\n   * Calls the appropriate method on the dryad.children\n   * Currently it can only be an Array and all the children\n   * must be a Dryad.\n   *\n   * It will be used for including the properties in the tree\n   * for use in diffing. If there are any Dryad in the properties\n   * then the Dryad class is currently responsible for returning those\n   * in subgraph() so they get launched.\n   *\n   * @param {Dryad|Array|Object|String|Number|undefined} obj\n   */\n  _convertObject(obj, parentId, childIndex=0, memo={}) {\n    if (obj.isDryad) {\n      return this._makeTree(obj, parentId, childIndex, memo);\n    }\n    if (_.isArray(obj)) {\n      return _.map(obj, (pp, ii) => {\n        return this._convertObject(pp, parentId, ii, memo);\n      });\n    }\n    if (_.isObject(obj)) {\n      return _.mapObject(obj, (pp, key) => {\n        return this._convertObject(pp, parentId, key, memo);\n      });\n    }\n    // should check that its a primitive type\n    return obj;\n  }\n}\n"
  },
  {
    "__docId__": 49,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DryadTree",
    "memberof": "src/DryadTree.js",
    "longname": "src/DryadTree.js~DryadTree",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/DryadTree.js",
    "importStyle": "DryadTree",
    "description": "Manages the tree structure, contexts for nodes,\nutilities to walk the tree, collect commands and\ncall command middleware.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "rootDryad",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getClass",
        "description": "lookup function"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "root",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#root",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dryads",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#dryads",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contexts",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#contexts",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "getClass",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#getClass",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rootContext",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#rootContext",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "tree",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#tree",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "walk",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#walk",
    "access": null,
    "description": "Depth first traversal of the Dryad tree\n\nThe function is given arguments:\n  node {id type children}\n  Dryad\n  context\n  memo",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "called with (dryad, context, node)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "data object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "memo",
        "description": "for usage during recursion"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "collectCommands",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#collectCommands",
    "access": null,
    "description": "Collect a tree of command objects from each node for a given method.\neg. 'add' 'remove' 'prepareForAdd'",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "methodName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "makeCommandTree",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#makeCommandTree",
    "access": null,
    "description": "Construct a command tree for a single commandObject to be executed\nwith a single node's context.\n\nThis is for runtime execution of commands,\ncalled from streams and async processes initiated during Dryad's .add()",
    "lineNumber": 75,
    "params": [
      {
        "name": "nodeId",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateContext",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#updateContext",
    "access": null,
    "description": "Update the context for a node.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dryadId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDebugState",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#getDebugState",
    "access": null,
    "description": "Get a representation of current state of the tree.\nContains add|remove|prepared and may hold errors.",
    "lineNumber": 98,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createContext",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#_createContext",
    "access": null,
    "description": "Create and return initial context for a Dryad.\n\nEach context inherits from it's parent's context.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "name": "dryad",
        "types": [
          "*"
        ]
      },
      {
        "name": "dryadId",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentId",
        "types": [
          "*"
        ]
      },
      {
        "name": "rootContext",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_makeTree",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#_makeTree",
    "access": null,
    "description": "Given a Dryad (possibily with children), construct a tree of Objects\n{id type children}\n\nDryad classes may use requireParent() and subgraph() to replace themselves\nwith a different graph. So this tree is not a direct representation of the input\ngraph, but may be expanded through the use of requireParent() and subgraph()\n\nGenerates ids for each Dryad\nStores each by its id\nCreates context for each\n\nThis method calls itself recursively for children.",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "dryad",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "parentId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "childIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "memo",
        "description": "for internal usage during recursion"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_convertObject",
    "memberof": "src/DryadTree.js~DryadTree",
    "longname": "src/DryadTree.js~DryadTree#_convertObject",
    "access": null,
    "description": "private.\n\nCalls the appropriate method on the dryad.children\nCurrently it can only be an Array and all the children\nmust be a Dryad.\n\nIt will be used for including the properties in the tree\nfor use in diffing. If there are any Dryad in the properties\nthen the Dryad class is currently responsible for returning those\nin subgraph() so they get launched.",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad",
          "Array",
          "Object",
          "String",
          "Number",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/CommandMiddleware.js",
    "memberof": null,
    "longname": "src/__tests__/CommandMiddleware.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../CommandMiddleware');\n\nvar CommandMiddleware = require('../CommandMiddleware').default;\n\ndescribe('CommandMiddleware', function() {\n  var rc = {\n    commands: {action: () => 0},\n    context: {id: 0},\n    children: [\n      {\n        commands: {action: () => 1},\n        context: {id: 1},\n        children: []\n      },\n      {\n        commands: {action: () => 2},\n        context: {id: 2},\n        children: [\n          {\n            commands: {action: () => 3},\n            context: {id: 3},\n            children: []\n          }\n        ]\n      }\n    ]\n  };\n\n  it('should flatten command objects and their children to a flat list', function() {\n    var cm = new CommandMiddleware();\n\n    var flat = cm._flatten(rc);\n    expect(flat.length).toBe(4);\n    flat.forEach((f, i) => {\n      expect(f.commands.action()).toBe(i);\n      expect(f.context.id).toBe(i);\n    });\n  });\n\n  pit('should call a command root stack', function() {\n\n    var updatedContext;\n\n    function updateContext(context, update) {\n      // would write to the store\n      updatedContext = update;\n    }\n\n    var middleware = function(commands, context) {\n      if (commands.action) {\n        return commands.action(context);\n      }\n    };\n\n    var cm = new CommandMiddleware([middleware]);\n\n    return cm.call(rc, 'add', updateContext).then((returned) => {\n      // 4 undefineds\n      expect(returned.length).toBe(4);\n      // state was marked as updated\n      expect(updatedContext).toEqual({state: {add: true}});\n    });\n  });\n\n  pit('should set state error on failure', function() {\n\n    var updatedContext;\n\n    function updateContext(context, update) {\n      // would write to the store\n      updatedContext = update;\n    }\n\n    var middleware = function(commands/*, context*/) {\n      if (commands.action) {\n        // throw new Error('deliberate failure in middleware');\n        return Promise.reject('deliberate failure in middleware');\n      }\n    };\n\n    var cm = new CommandMiddleware([middleware]);\n\n    return new Promise((resolve, reject) => {\n      cm.call(rc, 'add', updateContext).then(() => {\n        reject('middleware should not have resolved');\n      }).catch((error) => {\n        expect(updatedContext).toEqual({state: {add: false, error: error}});\n        resolve();\n      });\n    });\n  });\n});\n"
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CommandMiddleware",
    "memberof": "src/__tests__/CommandMiddleware.js",
    "longname": "src/__tests__/CommandMiddleware.js~CommandMiddleware",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/CommandMiddleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Dryad.js",
    "memberof": null,
    "longname": "src/__tests__/Dryad.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "jest.dontMock('../Dryad');\nvar Dryad = require('../Dryad').default;\n\nclass TypeOne extends Dryad {}\n\ndescribe('Dryad', function() {\n  it('should clone', function() {\n    let a = [1, 2, 3];\n    let child = new TypeOne();\n    let d = new TypeOne({one: 1, two: a}, [child]);\n\n    let cloned = d.clone();\n    expect(cloned.constructor.name).toBe(d.constructor.name);\n    expect(cloned.properties !== d.properties).toBe(true);\n    expect(cloned.children !== d.children).toBe(true);\n    expect(cloned.properties.two !== d.properties.two).toBe(true);\n    expect(cloned.children[0] !== d.children[0]).toBe(true);\n  });\n});\n"
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Dryad",
    "memberof": "src/__tests__/Dryad.js",
    "longname": "src/__tests__/Dryad.js~Dryad",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/Dryad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypeOne",
    "memberof": "src/__tests__/Dryad.js",
    "longname": "src/__tests__/Dryad.js~TypeOne",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/Dryad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/DryadPlayer.js",
    "memberof": null,
    "longname": "src/__tests__/DryadPlayer.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../DryadPlayer');\njest.dontMock('../DryadTree');\njest.dontMock('../Dryad');\njest.dontMock('../hyperscript');\njest.dontMock('../CommandMiddleware');\njest.dontMock('../run');\njest.dontMock('../layer');\n\nvar Dryad = require('../Dryad').default;\nvar DryadPlayer = require('../DryadPlayer').default;\nvar layer = require('../layer').default;\n\nclass TypeOne extends Dryad {\n\n  prepareForAdd() {\n    return {\n      something: () => {\n        return Promise.resolve('something');\n      }\n    };\n  }\n\n  add() {\n    return {\n      run: () => {\n        return Promise.resolve();\n      }\n    };\n  }\n}\n\nclass Child extends Dryad {}\n\nclass PrepareWithFunction extends Dryad {\n  prepareForAdd() {\n    return (/*context*/) => {\n      return {\n        one: 1,\n        two: 2\n      };\n    };\n  }\n}\n\ndescribe('DryadPlayer', function() {\n\n  describe('basics', function() {\n    var root;\n    var player;\n\n    beforeEach(() => {\n      root = new TypeOne({}, [new Child()]);\n      player = new DryadPlayer(root);\n      player.addClass(TypeOne);\n    });\n\n    it('should construct', function() {\n      expect(player).toBeTruthy();\n    });\n\n    it('should have registered TypeOne', function() {\n      expect(player.classes['typeone']).toBeTruthy();\n    });\n\n    pit('should play', function() {\n      return player.play();\n    });\n\n    pit('should update context on prepareForAdd', function() {\n      // only if you give it a middleware to process 'something'\n      return player.play().then(() => {\n        let rootId = player.tree.tree.id;\n        let childId = player.tree.tree.children[0].id;\n        expect(player.tree.contexts[rootId].something).toBe('something');\n        expect(player.tree.contexts[childId].something).toBe('something');\n      });\n    });\n\n    pit('should stop', function() {\n      return player.stop();\n    });\n\n  });\n\n  describe('prepareForAdd with function', function() {\n    var root;\n    var player;\n\n    beforeEach(() => {\n      root = new PrepareWithFunction();\n      player = new DryadPlayer(root);\n    });\n\n    pit('should update context on prepareForAdd if that returns a function', function() {\n      return player.play().then(() => {\n        let rootId = player.tree.tree.id;\n        expect(player.tree.contexts[rootId].one).toBe(1);\n        expect(player.tree.contexts[rootId].two).toBe(2);\n      });\n    });\n  });\n\n  describe('callCommand', function() {\n\n    let ran = false;\n\n    class CallsRuntimeCommand extends Dryad {\n      add(player) {\n        return {\n          run: (context) => {\n            player.callCommand(context.id, {\n              // context === innerContext\n              run: (innerContext) => {\n                // should execute this\n                if (context.id !== innerContext.id) {\n                  console.error('context', context, innerContext);\n                  throw new Error('context and innerContext id do not match');\n                }\n                ran = true;\n              }\n            });\n          }\n        };\n      }\n    }\n\n    pit('should execute a command object via context.callCommand', function() {\n      let root = new CallsRuntimeCommand();\n      let player = new DryadPlayer(root, [layer]);\n      return player.play().then(() => {\n        expect(ran).toBe(true);\n      });\n    });\n\n    pit('should set context.callCommand in children', function() {\n      let root = new Dryad({}, [new CallsRuntimeCommand()]);\n      let player = new DryadPlayer(root, [layer]);\n      return player.play().then(() => {\n        expect(ran).toBe(true);\n      });\n    });\n\n    // implement this test when you have implemented .update\n    // pit('should execute context.callCommand for any Dryad added by .add', function() {\n    //   let root = new CallsRuntimeCommand();\n    //   let player = new DryadPlayer(root, [layer]);\n    //   return player.play().then(() => {\n    //     expect(ran).toBe(true);\n    //   });\n    //\n    // });\n\n  });\n\n  // it('on prepare should update context of parent so child sees it', function() {\n  //   return player.play().then(() => {\n  //     let rootId = player.tree.tree.id;\n  //     let childId = player.tree.tree.children[0].id;\n  //\n  //   });\n  // });\n\n});\n"
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Dryad",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~Dryad",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DryadPlayer",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~DryadPlayer",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "layer",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~layer",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypeOne",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~TypeOne",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepareForAdd",
    "memberof": "src/__tests__/DryadPlayer.js~TypeOne",
    "longname": "src/__tests__/DryadPlayer.js~TypeOne#prepareForAdd",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/__tests__/DryadPlayer.js~TypeOne",
    "longname": "src/__tests__/DryadPlayer.js~TypeOne#add",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Child",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~Child",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 78,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PrepareWithFunction",
    "memberof": "src/__tests__/DryadPlayer.js",
    "longname": "src/__tests__/DryadPlayer.js~PrepareWithFunction",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepareForAdd",
    "memberof": "src/__tests__/DryadPlayer.js~PrepareWithFunction",
    "longname": "src/__tests__/DryadPlayer.js~PrepareWithFunction#prepareForAdd",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/DryadTree.js",
    "memberof": null,
    "longname": "src/__tests__/DryadTree.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../Dryad');\njest.dontMock('../DryadTree');\njest.dontMock('../DryadPlayer');\njest.dontMock('../CommandMiddleware');\njest.dontMock('../hyperscript');\njest.dontMock('../run');\njest.dontMock('../layer');\n\nvar Dryad = require('../Dryad').default;\nvar DryadTree = require('../DryadTree').default;\nvar DryadPlayer = require('../DryadPlayer').default;\nvar layer = require('../layer').default;\n\n\nclass TypeOne extends Dryad {}\nclass TypeTwo extends Dryad {}\n\nclass HasSubgraph extends Dryad {\n  subgraph() {\n    return new TypeOne({}, [new TypeTwo()]);\n  }\n}\n\nclass HasSubgraphWithSelf extends Dryad {\n  subgraph() {\n    // rendering self as a child of another\n    return new TypeOne({}, [this]);\n  }\n}\n\nclass Parent extends Dryad {}\nclass Child extends Dryad {\n  requireParent() {\n    return 'Parent';\n  }\n}\n\n\ndescribe('DryadTree', function() {\n  it('should construct', function() {\n    var root = new TypeOne({}, [new TypeTwo()]);\n    var tree = new DryadTree(root);\n\n    expect(tree.root).toBe(root);\n    expect(Object.keys(tree.dryads).length).toBe(2);\n    expect(Object.keys(tree.contexts).length).toBe(2);\n\n    expect(tree.tree.type).toBe('TypeOne');\n    expect(tree.tree.children.length).toBe(1);\n    expect(tree.tree.children[0].id).toBe('0.0');\n    expect(tree.tree.children[0].type).toBe('TypeTwo');\n  });\n\n  it('should walk', function() {\n    var root = new TypeOne({}, [new TypeTwo()]);\n    var tree = new DryadTree(root);\n\n    var count = 0;\n    tree.walk((/*dryad, context, node*/) => {\n      count += 1;\n    });\n\n    expect(count).toBe(2);\n  });\n\n  it('should create a context with parent as Prototype', function() {\n    var root = new TypeOne({}, [new TypeTwo()]);\n    var tree = new DryadTree(root);\n    var rootId = tree.tree.id;\n    var childId = tree.tree.children[0].id;\n\n    tree.updateContext(rootId, {changed: 'value'});\n    expect(tree.contexts[childId].changed).toBe('value');\n  });\n\n  it('should make tree with subgraph', function() {\n    var root = new HasSubgraph();\n    var tree = new DryadTree(root);\n\n    // 3 not 2 ?\n    // because the parent is registered twice with two different ids\n    // even though it only appears in the tree once\n    expect(Object.keys(tree.dryads).length).toBe(3);\n    expect(tree.tree.children.length).toBe(1);\n    expect(tree.tree.children[0].type).toBe('TypeTwo');\n  });\n\n  it('should make tree with subgraph with self as a new child', function() {\n    var root = new HasSubgraphWithSelf();\n    var tree = new DryadTree(root);\n\n    expect(Object.keys(tree.dryads).length).toBe(3);\n    expect(tree.tree.type).toBe('TypeOne');\n    expect(tree.tree.children.length).toBe(1);\n    expect(tree.tree.children[0].type).toBe('HasSubgraphWithSelf');\n  });\n\n  /**\n   * You can only do requireParent if the classes are registered\n   * by name with the DryadPlayer / app.\n   */\n  describe('required parent', function() {\n\n    function makeApp() {\n      let app = new DryadPlayer();\n      app.addClass(Child);\n      app.addClass(Parent);\n      return app;\n    }\n\n    it('Child should be wrapped in required Parent', function() {\n      let app = makeApp();\n      var root = new Child({}, [new TypeOne()]);\n      app.setRoot(root);\n      var tree = app.tree;\n      expect(tree.tree.children.length).toBe(1);\n      let child = tree.tree.children[0];\n      expect(child.type).toBe('Child');\n      expect(child.children[0].type).toBe('TypeOne');\n    });\n\n    it('should not wrap a dryad in a required parent if already present in branch', function() {\n      let app = makeApp();\n      var root = new Parent({}, [new Child({}, [new TypeOne()])]);\n      app.setRoot(root);\n      var tree = app.tree;\n      let child = tree.tree.children[0];\n      expect(child.type).toBe('Child');\n      expect(child.children[0].type).toBe('TypeOne');\n    });\n  });\n\n  describe('prepareForAdd can be a function', function() {\n    var value = 'value';\n\n    class ParentWithPrepareFn extends Dryad {\n      prepareForAdd() {\n        return {\n          one: (context) => {\n            if (!context) {\n              throw new Error('no contex supplied to prepareForAdd inner function');\n            }\n            return value;\n          },\n          two: value\n        };\n      }\n    }\n\n    class Inner extends Dryad {}\n\n    pit('should call fn and save to context', function() {\n      var root = new ParentWithPrepareFn({}, [new Inner({})]);\n      var app = new DryadPlayer(root);\n      return app.play().then(() => {\n        var tree = app.tree;\n        var rootId = tree.tree.id;\n        var childId = tree.tree.children[0].id;\n\n        // root context should have one two = 'value'\n        expect(tree.contexts[rootId].one).toBe(value);\n        expect(tree.contexts[rootId].two).toBe(value);\n        // child context should have those also\n        expect(tree.contexts[childId].one).toBe(value);\n        expect(tree.contexts[childId].two).toBe(value);\n      });\n    });\n  });\n\n  // describe('collectCommands', function() {\n  //\n  //   let value = 'value';\n  //\n  //   class Adds extends Dryad {\n  //     add() {\n  //       return {\n  //         one: () => value\n  //       };\n  //     }\n  //   }\n  //\n  //   it('should collect add commands with extra context', function() {\n  //     let root = new Adds();\n  //     let app = new DryadPlayer(root);\n  //     let callCommand = 'callCommand';\n  //     let ctree = app._collectCommands('add', {callCommand: callCommand});\n  //     expect(ctree.context.callCommand).toBe(callCommand);\n  //   });\n  // });\n\n  describe('makeCommandTree', function() {\n    pit('should make a command tree given a single command', function() {\n      let root = new Dryad();\n      let app = new DryadPlayer(root, [layer]);\n      let rootId = app.tree.tree.id;\n      let ran = false;\n      let commands = {\n        run: () => ran = true\n      };\n      let ctree = app.tree.makeCommandTree(rootId, commands);\n      expect(ctree.commands).toBe(commands);\n      expect(app.middleware.middlewares.length).toBeTruthy();\n\n      return app._call(ctree).then(() => {\n        expect(ran).toBe(true);\n      });\n    });\n  });\n});\n"
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Dryad",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~Dryad",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DryadTree",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~DryadTree",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DryadPlayer",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~DryadPlayer",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "layer",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~layer",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypeOne",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~TypeOne",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 86,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypeTwo",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~TypeTwo",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 87,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HasSubgraph",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~HasSubgraph",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subgraph",
    "memberof": "src/__tests__/DryadTree.js~HasSubgraph",
    "longname": "src/__tests__/DryadTree.js~HasSubgraph#subgraph",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HasSubgraphWithSelf",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~HasSubgraphWithSelf",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subgraph",
    "memberof": "src/__tests__/DryadTree.js~HasSubgraphWithSelf",
    "longname": "src/__tests__/DryadTree.js~HasSubgraphWithSelf#subgraph",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Parent",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~Parent",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 92,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Child",
    "memberof": "src/__tests__/DryadTree.js",
    "longname": "src/__tests__/DryadTree.js~Child",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/DryadTree.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "requireParent",
    "memberof": "src/__tests__/DryadTree.js~Child",
    "longname": "src/__tests__/DryadTree.js~Child#requireParent",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/hyperscript.js",
    "memberof": null,
    "longname": "src/__tests__/hyperscript.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../hyperscript');\njest.dontMock('../Dryad');\nvar hyperscript = require('../hyperscript').default;\nvar Dryad = require('../Dryad').default;\n\nclass GenericDryad extends Dryad {}\n\nfunction lookupClassByNameFn(className) {\n  if (className === GenericDryad.name.toLowerCase()) {\n    return GenericDryad;\n  }\n  throw new Error('Unexpected className: ' + className);\n}\n\ndescribe('hyperscript', function() {\n\n  it('should pass a Dryad through', function() {\n    let input = new GenericDryad();\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output).toBe(input);\n  });\n\n  it('should create a Dryad from supplying the class', function() {\n    let input = [GenericDryad, {key: 'value'}, []];\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output.isDryad).toBe(true);\n    expect(output.properties).toEqual({key: 'value'});\n    expect(output.children).toEqual([]);\n  });\n\n  it('should create a Dryad from 3 args', function() {\n    let input = ['genericdryad', {key: 'value'}, []];\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output.isDryad).toBe(true);\n    expect(output.properties).toEqual({key: 'value'});\n    expect(output.children).toEqual([]);\n  });\n\n  it('should create a Dryad from 2 args', function() {\n    let input = ['genericdryad', []];\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output.isDryad).toBe(true);\n    expect(output.properties).toEqual({});\n    expect(output.children).toEqual([]);\n  });\n\n  it('should create a Dryad from 1 arg', function() {\n    let input = ['genericdryad'];\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output.isDryad).toBe(true);\n    expect(output.properties).toEqual({});\n    expect(output.children).toEqual([]);\n  });\n\n  it('should create Dryad for children', function() {\n    let input = ['genericdryad', [\n      ['genericdryad', {}, []]\n    ]];\n    let output = hyperscript(input, lookupClassByNameFn);\n    expect(output.isDryad).toBe(true);\n    expect(output.properties).toEqual({});\n    expect(output.children.length).toEqual(1);\n    expect(output.children[0].isDryad).toBeTruthy();\n  });\n\n});\n"
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "hyperscript",
    "memberof": "src/__tests__/hyperscript.js",
    "longname": "src/__tests__/hyperscript.js~hyperscript",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/hyperscript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Dryad",
    "memberof": "src/__tests__/hyperscript.js",
    "longname": "src/__tests__/hyperscript.js~Dryad",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/hyperscript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GenericDryad",
    "memberof": "src/__tests__/hyperscript.js",
    "longname": "src/__tests__/hyperscript.js~GenericDryad",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/hyperscript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Dryad"
    ]
  },
  {
    "__docId__": 98,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lookupClassByNameFn",
    "memberof": "src/__tests__/hyperscript.js",
    "longname": "src/__tests__/hyperscript.js~lookupClassByNameFn",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/hyperscript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "className",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/index.spec.js",
    "memberof": null,
    "longname": "src/__tests__/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../../index');\nvar index = require('../../index');\n\ndescribe('\"dryadic index\"', () => {\n  it('should define exports', function() {\n    expect(index.Dryad).toBeTruthy();\n    expect(index.dryadic).toBeTruthy();\n  });\n});\n"
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "index",
    "memberof": "src/__tests__/index.spec.js",
    "longname": "src/__tests__/index.spec.js~index",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/index.spec.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/run.js",
    "memberof": null,
    "longname": "src/__tests__/run.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\njest.dontMock('../run');\nvar run = require('../run').default;\n\ndescribe('\"run\" middleware', () => {\n  pit('should evaluate and resolve the return value of commands', () => {\n    let ok = false;\n    let commands = {\n        run: () => {\n          ok = true;\n          return Promise.resolve('ok');\n        }\n      };\n    let context = {};\n\n    return Promise.resolve(run(commands, context)).then(() => {\n      expect(ok).toBeTruthy();\n    });\n  });\n\n  pit('should resolve even with no return value', function() {\n    let ok = false;\n    let commands = {\n        run: () => {\n          ok = true;\n        }\n      };\n    let context = {};\n\n    return Promise.resolve(run(commands, context)).then(() => {\n      expect(ok).toBeTruthy();\n    });\n  });\n\n});\n"
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "run",
    "memberof": "src/__tests__/run.js",
    "longname": "src/__tests__/run.js~run",
    "access": null,
    "export": false,
    "importPath": "dryadic/src/__tests__/run.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/dryadic.js",
    "memberof": null,
    "longname": "src/dryadic.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import DryadPlayer from './DryadPlayer';\nimport layer from './layer';\n\n/**\n * Short cut to create a DryadPlayer from a root Dryad\n * optionally adding some layers.\n *\n * @param {Dryad} dryad - Root Dryad of the tree\n * @param {Array} layers - implementation layers with Dryad classes and middleware\n * @param {Object} rootContext - optional context to supply such as log: winston logger\n * @returns {DryadPlayer}\n */\nexport default function dryadic(dryad, moreLayers=[], rootContext={}) {\n  return new DryadPlayer(dryad, [layer].concat(moreLayers), rootContext);\n}\n"
  },
  {
    "__docId__": 104,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dryadic",
    "memberof": "src/dryadic.js",
    "longname": "src/dryadic.js~dryadic",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/dryadic.js",
    "importStyle": "dryadic",
    "description": "Short cut to create a DryadPlayer from a root Dryad\noptionally adding some layers.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DryadPlayer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad"
        ],
        "spread": false,
        "optional": false,
        "name": "dryad",
        "description": "Root Dryad of the tree"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "layers",
        "description": "implementation layers with Dryad classes and middleware"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rootContext",
        "description": "optional context to supply such as log: winston logger"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DryadPlayer"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/hyperscript.js",
    "memberof": null,
    "longname": "src/hyperscript.js",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "content": "\n/**\n * Convert a JSON object tree into a tree of instantiated Dryads\n *\n * A Domain-specific language for easily creating Dryad trees\n *\n * className, properties:\n * ['synth', {freq: 440}]\n\n * className, properties, children:\n * ['audiobus', {numChannels: 2}, [\n *   ['synth', {defName: 'saw', args: {freq: 440}]\n * ]]\n\n * If there are only 2 items and the second is an Array (not Object),\n * then parse it as:\n *\n * className, children:\n *\n *  ['group', [\n *    ['synth', {freq: 440}]\n *  ]]\n *\n * a la: https://github.com/Raynos/virtual-hyperscript\n *\n * @param {Dryad|Array} root\n * @param {Function} lookupClassByNameFn\n * @returns {Dryad}\n */\nexport default function hyperscript(root, lookupClassByNameFn) {\n\n  if (!root) {\n    throw new Error('Bad argument to hyperscript: ' + root);\n  }\n  // if the thing implements isDryad then the answer must be yes.\n  if (root.isDryad) {\n    return root;\n  }\n  if (!Array.isArray(root)) {\n    throw new Error('Malformed argument to hyperscript. Expected Array, got: ' +\n      (typeof root) + ' ' + root);\n  }\n  let [tag, properties, children] = root;\n  if (!children && Array.isArray(properties)) {\n    children = properties;\n    properties = {};\n  }\n\n  // convert children\n  let childNodes = (children || []).map((child) => {\n    return hyperscript(child, lookupClassByNameFn);\n  });\n\n  // if the thing implements isDryadSubclass then the answer must be yes.\n  // its a static method on Dryad\n  let DryadClass = tag.isDryadSubclass ? tag : lookupClassByNameFn(tag);\n  return new DryadClass(properties, childNodes);\n}\n"
  },
  {
    "__docId__": 106,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "hyperscript",
    "memberof": "src/hyperscript.js",
    "longname": "src/hyperscript.js~hyperscript",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/hyperscript.js",
    "importStyle": "hyperscript",
    "description": "Convert a JSON object tree into a tree of instantiated Dryads\n\nA Domain-specific language for easily creating Dryad trees\n\nclassName, properties:\n['synth', {freq: 440}]\nclassName, properties, children:\n['audiobus', {numChannels: 2}, [\n  ['synth', {defName: 'saw', args: {freq: 440}]\n]]\nIf there are only 2 items and the second is an Array (not Object),\nthen parse it as:\n\nclassName, children:\n\n ['group', [\n   ['synth', {freq: 440}]\n ]]\n\na la: https://github.com/Raynos/virtual-hyperscript",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Dryad}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Dryad",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "lookupClassByNameFn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Dryad"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/layer.js",
    "memberof": null,
    "longname": "src/layer.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nimport run from './run';\n\n/**\n * Core middleware functionality\n *\n * At this point only 'run' but others will follow\n */\nexport default {\n  middleware: [\n    run\n  ],\n  classes: []\n};\n"
  },
  {
    "__docId__": 108,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/run.js",
    "memberof": null,
    "longname": "src/run.js",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "content": "\n/**\n * Calls a function, supplying the Dryad's context.\n * May return a Promise for success/failure\n *\n * Usage:\n *\n *  add() {\n *   return {\n *    run: (context) => {\n *       return new Promise((resolve, reject) => {\n *        // do something async like start a process,\n *        // fetch an image etc.\n *        // Dryad's properties: this.properties\n *        // Dryad's runtime context: context\n *        // on success call:\n *         resolve();\n *       });\n *     }\n *   };\n *  }\n */\nexport default function run(command, context) {\n  if (command.run) {\n    return command.run(context);\n  }\n};\n"
  },
  {
    "__docId__": 109,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "run",
    "memberof": "src/run.js",
    "longname": "src/run.js~run",
    "access": null,
    "export": true,
    "importPath": "dryadic/src/run.js",
    "importStyle": "run",
    "description": "Calls a function, supplying the Dryad's context.\nMay return a Promise for success/failure\n\nUsage:\n\n add() {\n  return {\n   run: (context) => {\n      return new Promise((resolve, reject) => {\n       // do something async like start a process,\n       // fetch an image etc.\n       // Dryad's properties: this.properties\n       // Dryad's runtime context: context\n       // on success call:\n        resolve();\n      });\n    }\n  };\n }",
    "lineNumber": 23,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]