!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.*	package.json	/^      ".*": "<rootDir>\/node_modules\/babel-jest"$/;"	f
Accessors	src/Properties.js	/^  let propertyAccessors = mapProperties(dryad.properties, value => {$/;"	c
CALL_ORDER	src/CommandNode.js	/^export const CALL_ORDER = {$/;"	c
CALL_ORDER	src/CommandNode.js	/^export const CALL_ORDER = {$/;"	n
CallsRuntimeCommand	src/__tests__/DryadPlayer.js	/^    class CallsRuntimeCommand extends Dryad {$/;"	c
Child	src/__tests__/DryadPlayer.js	/^class Child extends Dryad {}$/;"	c
Child	src/__tests__/DryadTree.js	/^class Child extends Dryad {$/;"	c
CommandMiddleware	src/CommandMiddleware.js	/^export default class CommandMiddleware {$/;"	c
CommandNode	src/CommandNode.js	/^export default class CommandNode {$/;"	c
Context	src/Properties.js	/^      updateContext: (context: Object) => {$/;"	c
Context	src/__tests__/DryadPlayer.js	/^      updateContext: (\/*context, props*\/) => {$/;"	c
Context	src/__tests__/DryadPlayer.js	/^\/\/       updateContext: (\/*context, props*\/) => {$/;"	c
Context	src/__tests__/updateContext.js	/^      updateContext: (\/*context*\/) => {$/;"	c
Context	src/__tests__/updateContext.js	/^var updateContext = require('..\/updateContext').default;$/;"	c
Context	src/updateContext.js	/^ *      updateContext: (context, properties) => {$/;"	c
Context	src/updateContext.js	/^ *    updateContext: {$/;"	c
Dryad	index.js	/^exports.Dryad = require('.\/lib\/Dryad').default;$/;"	c
Dryad	src/Dryad.js	/^export default class Dryad {$/;"	c
Dryad	src/DryadTree.js	/^          let requiredParent: Dryad = new (this.getClass(rq))({}, [dryad]);$/;"	c
Dryad	src/DryadTree.js	/^      throw new Error('Not a Dryad: ${dryad}');$/;"	c
Dryad	src/DryadTree.js	/^    let propertiesDryad = invertDryadicProperties(dryad);$/;"	c
Dryad	src/__tests__/Dryad.js	/^var Dryad = require('..\/Dryad').default;$/;"	c
Dryad	src/__tests__/DryadPlayer.js	/^var Dryad = require('..\/Dryad').default;$/;"	c
Dryad	src/__tests__/DryadTree.js	/^var Dryad = require('..\/Dryad').default;$/;"	c
Dryad	src/__tests__/hyperscript.js	/^var Dryad = require('..\/Dryad').default;$/;"	c
Dryad	src/__tests__/utils.js	/^const Dryad = require('..\/Dryad').default;$/;"	c
DryadPlayer	src/DryadPlayer.js	/^export default class DryadPlayer {$/;"	c
DryadPlayer	src/__tests__/DryadPlayer.js	/^var DryadPlayer = require('..\/DryadPlayer').default;$/;"	c
DryadPlayer	src/__tests__/DryadTree.js	/^var DryadPlayer = require('..\/DryadPlayer').default;$/;"	c
DryadTree	src/DryadTree.js	/^export default class DryadTree {$/;"	c
DryadTree	src/__tests__/DryadTree.js	/^var DryadTree = require('..\/DryadTree').default;$/;"	c
DryadicCommandError	src/Errors.js	/^export class DryadicCommandError extends ExtendableError {$/;"	c
ERROR	src/DryadTree.js	/^        return `ERROR: ${s.error}`;$/;"	c
ExtendableError	src/Errors.js	/^class ExtendableError extends Error {$/;"	c
GenericDryad	src/__tests__/hyperscript.js	/^class GenericDryad extends Dryad {}$/;"	c
HasSubgraph	src/__tests__/DryadTree.js	/^class HasSubgraph extends Dryad {$/;"	c
HasSubgraphWithSelf	src/__tests__/DryadTree.js	/^class HasSubgraphWithSelf extends Dryad {$/;"	c
ID	src/updateContext.js	/^ *        let nodeID = generateNextId();$/;"	c
Inner	src/__tests__/DryadTree.js	/^  \/\/   class Inner extends Dryad {}$/;"	c
Logger	src/DryadPlayer.js	/^    this._errorLogger = (msg, error) => {$/;"	c
Lookup	src/DryadPlayer.js	/^    let classLookup = bind(this.getClass, this);$/;"	c
Memo	src/DryadTree.js	/^        let subMemo = clone(memo);$/;"	c
Message	src/__tests__/CommandMiddleware.js	/^          \/\/ `Error should contain errorMessage: ${e} missing: ${errorMessage}`);$/;"	c
Nodes	src/hyperscript.js	/^  let childNodes = (children || []).map(child => {$/;"	c
Object	src/Dryad.js	/^  constructor(properties: Object = {}, children: Array<Dryad> = []) {$/;"	c
Object	src/DryadPlayer.js	/^    rootContext: Object = {}$/;"	c
Object	src/DryadPlayer.js	/^  setRoot(dryad: Dryad | Array<any> | null, rootContext: Object = {}) {$/;"	c
Object	src/DryadTree.js	/^    memo: Object = {}$/;"	c
Object	src/DryadTree.js	/^    rootContext: Object = {}$/;"	c
Object	src/DryadTree.js	/^  constructor(rootDryad: ?Dryad, getClass: Function, rootContext: Object = {}) {$/;"	c
Object	src/DryadTree.js	/^  walk(fn: Function, node: ?TreeNode, memo: Object = {}): Object {$/;"	c
Object	src/dryadic.js	/^export default function dryadic(dryad:Dryad, moreLayers:Array<Object>=[], rootContext:Object={}) : DryadPlayer {$/;"	c
Object	src/updateContext.js	/^    let uc: Object = isFunction(command.updateContext)$/;"	c
OwnerDryad	src/__tests__/Properties.js	/^  class OwnerDryad extends Dryad {$/;"	c
PROPERTIES_MODE	src/CommandNode.js	/^export const PROPERTIES_MODE = 'PROPERTIES_MODE';$/;"	n
Parent	src/__tests__/DryadTree.js	/^class Parent extends Dryad {}$/;"	c
ParentDryad	src/__tests__/Properties.js	/^    class ParentDryad extends Dryad {$/;"	c
ParentWithPrepareFn	src/__tests__/DryadTree.js	/^  \/\/   class ParentWithPrepareFn extends Dryad {$/;"	c
PrepareWithFunction	src/__tests__/DryadPlayer.js	/^\/\/ class PrepareWithFunction extends Dryad {$/;"	c
Properties	src/Properties.js	/^export default class Properties extends Dryad {$/;"	c
PropertiesOwner	src/Properties.js	/^export class PropertiesOwner extends Dryad {$/;"	c
SELF_THEN_CHILDREN	src/CommandNode.js	/^export const SELF_THEN_CHILDREN = 'SELF_THEN_CHILDREN';$/;"	n
Supplied	src/__tests__/Properties.js	/^  var propertiesSupplied = {$/;"	c
TreeNode	src/DryadTree.js	/^class TreeNode {$/;"	c
TypeOne	src/__tests__/Dryad.js	/^class TypeOne extends Dryad {}$/;"	c
TypeOne	src/__tests__/DryadPlayer.js	/^class TypeOne extends Dryad {$/;"	c
TypeOne	src/__tests__/DryadTree.js	/^class TypeOne extends Dryad {$/;"	c
TypeTwo	src/__tests__/DryadTree.js	/^class TypeTwo extends Dryad {}$/;"	c
Unknown	src/DryadTree.js	/^      return `Unknown: ${JSON.stringify(s)}`;$/;"	c
Value	src/Dryad.js	/^    let cloneValue = (c: any): any => (c && c.isDryad ? c.clone() : clone(c));$/;"	c
ValueDryad	src/__tests__/Properties.js	/^  class ValueDryad extends Dryad {$/;"	c
add	src/__tests__/DryadPlayer.js	/^      add(pl) {$/;"	f
add	src/__tests__/DryadPlayer.js	/^  add() {$/;"	f
add	src/__tests__/Properties.js	/^    add() {$/;"	f
add	src/run.js	/^ *  add() {$/;"	f
add	src/updateContext.js	/^ *  add() {$/;"	f
args	src/hyperscript.js	/^ *   ['synth', {defName: 'saw', args: {freq: 440}]$/;"	o
asH	src/DryadTree.js	/^    function asH(node) {$/;"	f
author	package.json	/^  "author": "Chris Sattinger <crucialfelix@gmail.com>",$/;"	f
babel	package.json	/^    "babel": "^6.23.0",$/;"	f
babel-cli	package.json	/^    "babel-cli": "^6.24.1",$/;"	f
babel-eslint	package.json	/^    "babel-eslint": "^7.2.3",$/;"	f
babel-jest	package.json	/^    "babel-jest": "^19.0.0",$/;"	f
babel-plugin-transform-class-properties	package.json	/^    "babel-plugin-transform-class-properties": "^6.24.1",$/;"	f
babel-plugin-transform-flow-strip-types	package.json	/^    "babel-plugin-transform-flow-strip-types": "^6.22.0",$/;"	f
babel-preset-es2015	package.json	/^    "babel-preset-es2015": "^6.24.1",$/;"	f
bluebird	package.json	/^    "bluebird": "^3.5.0",$/;"	f
build	package.json	/^    "build": "npm run compile",$/;"	f
by	src/DryadPlayer.js	/^   * Lookup Dryad class by name.$/;"	c
catch	src/DryadTree.js	/^    } catch (error) {$/;"	f
classes	src/DryadPlayer.js	/^    this.classes = {};$/;"	o
collectCoverage	package.json	/^    "collectCoverage": true,$/;"	f
compile	package.json	/^    "compile": "babel --source-maps --out-dir=.\/lib src",$/;"	f
constructor	src/CommandMiddleware.js	/^  constructor(middlewares:Array<Function>=[]) {$/;"	f
constructor	src/Dryad.js	/^  constructor(properties: Object = {}, children: Array<Dryad> = []) {$/;"	f
constructor	src/DryadTree.js	/^  constructor(id, dryad, dryadType, children) {$/;"	f
constructor	src/DryadTree.js	/^  constructor(rootDryad: ?Dryad, getClass: Function, rootContext: Object = {}) {$/;"	f
constructor	src/Errors.js	/^  constructor(message) {$/;"	f
constructor	src/Errors.js	/^  constructor(message, treeNode, dryadId, dryadType, properties, context) {$/;"	f
contexts	src/DryadTree.js	/^    this.contexts = {};$/;"	o
contexts	src/DryadTree.js	/^  contexts: { [id: string]: Object };$/;"	o
contributors	package.json	/^  "contributors": [$/;"	f
coveragePathIgnorePatterns	package.json	/^    "coveragePathIgnorePatterns": [$/;"	f
dependencies	package.json	/^  "dependencies": {$/;"	f
describe	src/__tests__/CommandMiddleware.js	/^describe('CommandMiddleware', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^    describe('PROPERTIES_MODE', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^    describe('SELF_THEN_CHILDREN', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^    describe('default order', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^  describe('callOrder', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^  describe('execute', function() {$/;"	f
describe	src/__tests__/CommandNode.js	/^describe('CommandNode', function() {$/;"	f
describe	src/__tests__/Dryad.js	/^describe('Dryad', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^    \/\/ describe('prepareForAdd with function', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('callCommand', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('constructor', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('play', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('prepare', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('register class', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('setRoot', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^  describe('stop', function() {$/;"	f
describe	src/__tests__/DryadPlayer.js	/^describe('DryadPlayer', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  \/\/ describe('prepareForAdd can be a function', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  describe('Dryads in properties', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  describe('collectCommands', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  describe('makeCommandTree', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  describe('required parent', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^  describe('updateContext', function() {$/;"	f
describe	src/__tests__/DryadTree.js	/^describe('DryadTree', function() {$/;"	f
describe	src/__tests__/Properties.js	/^  describe('getting value in child', function() {$/;"	f
describe	src/__tests__/Properties.js	/^  describe('grandparent context accessible by children', function() {$/;"	f
describe	src/__tests__/Properties.js	/^describe('Properties', function() {$/;"	f
describe	src/__tests__/hyperscript.js	/^describe('hyperscript', function() {$/;"	f
describe	src/__tests__/utils.js	/^  \/\/ describe('passing a dryadic form', function() {$/;"	f
describe	src/__tests__/utils.js	/^\/\/ describe('flattenProperties', function() {$/;"	f
describe	src/__tests__/utils.js	/^describe('mapProperties', function() {$/;"	f
description	package.json	/^  "description": "Component micro-framework for creative coding",$/;"	f
destination	esdoc.json	/^  "destination": ".\/esdoc",$/;"	f
devDependencies	package.json	/^  "devDependencies": {$/;"	f
dict	src/__tests__/utils.js	/^    dict: {$/;"	o
dict	src/__tests__/utils.js	/^\/\/     dict: {$/;"	o
die	src/hyperscript.js	/^function die(root: any, message: string) {$/;"	f
docs	package.json	/^    "docs": "esdoc -c esdoc.json",$/;"	f
dryads	src/DryadTree.js	/^    this.dryads = {};$/;"	o
dryads	src/DryadTree.js	/^  dryads: { [id: string]: Dryad };$/;"	o
dump	src/DryadPlayer.js	/^  dump() {$/;"	f
email	package.json	/^      "email": "crucialfelix@gmail.com"$/;"	f
engines	package.json	/^  "engines": {$/;"	f
eslint	package.json	/^    "eslint": "^3.19.0",$/;"	f
eslint-plugin-flowtype	package.json	/^    "eslint-plugin-flowtype": "^2.32.1",$/;"	f
esnext	package.json	/^    "esnext": true$/;"	f
excludes	esdoc.json	/^  "excludes": [$/;"	f
exists	src/hyperscript.js	/^ *        Dryad classes. It should throw an error if no Dryad class exists by that name.$/;"	c
from	src/DryadTree.js	/^          \/\/ fetch the parent class from dryadTypes registery by name$/;"	c
function	src/__tests__/CommandMiddleware.js	/^    var middleware = function(commands \/*, context, properties*\/) {$/;"	f
function	src/__tests__/CommandMiddleware.js	/^    var middleware = function(commands, context, properties) {$/;"	f
function	src/__tests__/CommandNode.js	/^  const middleware = function(commands, context, properties \/*, updateFn*\/) {$/;"	f
if	src/CommandNode.js	/^    if (!this.commands.callOrder) {$/;"	f
if	src/DryadPlayer.js	/^      if (typeof value === 'function') {$/;"	f
if	src/DryadPlayer.js	/^    if (!dryadClass) {$/;"	f
if	src/DryadPlayer.js	/^    if (!rootContext.log) {$/;"	f
if	src/DryadPlayer.js	/^    if (dryad) {$/;"	f
if	src/DryadPlayer.js	/^    if (layers) {$/;"	f
if	src/DryadPlayer.js	/^    if (this.tree && this.tree.tree) {$/;"	f
if	src/DryadTree.js	/^          if (!this.getClass) {$/;"	f
if	src/DryadTree.js	/^        if (subgraph) {$/;"	f
if	src/DryadTree.js	/^      if (!s) {$/;"	f
if	src/DryadTree.js	/^      if (memo.skipSubgraphOf === dryad) {$/;"	f
if	src/DryadTree.js	/^      if (node.children.length) {$/;"	f
if	src/DryadTree.js	/^      if (parentContext) {$/;"	f
if	src/DryadTree.js	/^      if (rq) {$/;"	f
if	src/DryadTree.js	/^      if (s.add) {$/;"	f
if	src/DryadTree.js	/^      if (s.error) {$/;"	f
if	src/DryadTree.js	/^      if (s.prepareForAdd) {$/;"	f
if	src/DryadTree.js	/^      if (s.remove) {$/;"	f
if	src/DryadTree.js	/^      if (subgraph) {$/;"	f
if	src/DryadTree.js	/^    if (!dryad.isDryad) {$/;"	f
if	src/DryadTree.js	/^    if (!node) {$/;"	f
if	src/DryadTree.js	/^    if (memo.skipRequireParentOf === dryad) {$/;"	f
if	src/DryadTree.js	/^    if (memo.skipSubgraphOf) {$/;"	f
if	src/DryadTree.js	/^    if (node) {$/;"	f
if	src/DryadTree.js	/^    if (parentId) {$/;"	f
if	src/DryadTree.js	/^    if (propertiesDryad) {$/;"	f
if	src/DryadTree.js	/^    if (this.root) {$/;"	f
if	src/DryadTree.js	/^    if (this.tree) {$/;"	f
if	src/Errors.js	/^    if (typeof Error.captureStackTrace === 'function') {$/;"	f
if	src/Properties.js	/^        if (!context.propertiesValues) {$/;"	f
if	src/Properties.js	/^  if (ci < 0) {$/;"	f
if	src/Properties.js	/^  if (cname === 'Properties' || cname === 'PropertiesOwner') {$/;"	f
if	src/__tests__/CommandMiddleware.js	/^      if (commands.action) {$/;"	f
if	src/__tests__/CommandNode.js	/^    if (commands.action) {$/;"	f
if	src/__tests__/DryadPlayer.js	/^                if (context.id !== innerContext.id) {$/;"	f
if	src/__tests__/DryadTree.js	/^  \/\/           if (!context) {$/;"	f
if	src/hyperscript.js	/^  if (!root) {$/;"	f
if	src/hyperscript.js	/^  if (!tag) {$/;"	f
if	src/hyperscript.js	/^  if (children) {$/;"	f
if	src/hyperscript.js	/^  if (root.isDryad) {$/;"	f
if	src/run.js	/^  if (command.run) {$/;"	f
if	src/updateContext.js	/^  if (command.updateContext) {$/;"	f
initialContext	src/__tests__/Properties.js	/^      initialContext() {$/;"	f
is	src/Dryad.js	/^   * (MyDryad.isDryadSubclass is not undefined) it marks the thing as being a Dryad subclass.$/;"	c
is-plain-object	package.json	/^    "is-plain-object": "^2.0.1",$/;"	f
it	src/__tests__/CommandMiddleware.js	/^  \/\/ it('should flatten command objects and their children to a flat list', function() {$/;"	f
it	src/__tests__/CommandMiddleware.js	/^  it('should call a command root stack', function() {$/;"	f
it	src/__tests__/CommandMiddleware.js	/^  it('should set state error on failure', function() {$/;"	f
it	src/__tests__/CommandNode.js	/^      return it('should call a b c', function() {$/;"	f
it	src/__tests__/CommandNode.js	/^    it('should execute commands', function() {$/;"	f
it	src/__tests__/Dryad.js	/^  it('should clone', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    \/\/   it('should update context on prepareForAdd if that returns a function', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    \/\/ it('should execute context.callCommand for any Dryad added by .add', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should construct', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should execute a command object via context.callCommand', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should have registered TypeOne', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should play', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should set context.callCommand in children', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should setRoot', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should stop', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^    it('should update context on prepareForAdd', function() {$/;"	f
it	src/__tests__/DryadPlayer.js	/^  \/\/ it('on prepare should update context of parent so child sees it', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('Child should be wrapped in required Parent', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should include properties', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should invert Dryads in properties as a Properties dryad', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should make a command tree given a single command', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should not wrap a dryad in a required parent if already present in branch', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should remove an object if it is set to undefined', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should replace a sub object', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should set a top level value on context', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^    it('should set an object', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  \/\/   it('should call fn and save to context', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  it('should construct', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  it('should create context with parent as Prototype so parent properties are accessible', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  it('should make tree with subgraph with self as a new child', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  it('should make tree with subgraph', function() {$/;"	f
it	src/__tests__/DryadTree.js	/^  it('should walk', function() {$/;"	f
it	src/__tests__/Properties.js	/^    it('in add', function() {$/;"	f
it	src/__tests__/Properties.js	/^    it('in prepareForAdd', function() {$/;"	f
it	src/__tests__/Properties.js	/^    it('in remove', function() {$/;"	f
it	src/__tests__/Properties.js	/^    it('should supply parent context to children ', function() {$/;"	f
it	src/__tests__/Properties.js	/^  it('should return a Properties if dryad is in Properties', function() {$/;"	f
it	src/__tests__/Properties.js	/^  it('should return undefined if no dryads in properties', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create Dryad for children', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create Dryads from properties that look like hyperscript forms ', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create a Dryad from 1 arg', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create a Dryad from 2 args', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create a Dryad from 3 args', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should create a Dryad from supplying the class', function() {$/;"	f
it	src/__tests__/hyperscript.js	/^  it('should pass a Dryad through', function() {$/;"	f
it	src/__tests__/index.spec.js	/^  it('should define exports', function() {$/;"	f
it	src/__tests__/run.js	/^  it('should resolve even with no return value', function() {$/;"	f
it	src/__tests__/utils.js	/^  \/\/ it('should pass a dryadic form through', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('a Dryad to be identified as such', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should have 3 top level entries', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should have a list at .list', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should have dict.key', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should have pushed 3 long keys', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should include the sub Dryad', function() {$/;"	f
it	src/__tests__/utils.js	/^  it('should return a dict', function() {$/;"	f
it	src/__tests__/utils.js	/^\/\/   it('a Dryad to be identified as such', function() {$/;"	f
it	src/__tests__/utils.js	/^\/\/   it('should have 3 entries', function() {$/;"	f
it	src/__tests__/utils.js	/^\/\/   it('should have dict.key', function() {$/;"	f
it	src/__tests__/utils.js	/^\/\/   it('should include the sub Dryad', function() {$/;"	f
it	src/__tests__/utils.js	/^\/\/   it('should return a dict', function() {$/;"	f
jest	package.json	/^    "jest": "npm run build && jest --watch",$/;"	f
jest	package.json	/^  "jest": {$/;"	f
jest-cli	package.json	/^    "jest-cli": "^19.0.2"$/;"	f
jshintConfig	package.json	/^  "jshintConfig": {$/;"	f
keywords	package.json	/^  "keywords": [],$/;"	f
license	package.json	/^  "license": "MIT",$/;"	f
lint	package.json	/^    "lint": "eslint -c .eslintrc src",$/;"	f
lodash	package.json	/^    "lodash": "^4.17.4"$/;"	f
lookupClassByNameFn	src/__tests__/hyperscript.js	/^function lookupClassByNameFn(className) {$/;"	f
main	package.json	/^  "main": "index",$/;"	f
make	src/__tests__/CommandNode.js	/^    function make(callOrder) {$/;"	f
makeApp	src/__tests__/_testUtils.js	/^export function makeApp(classes=[]) {$/;"	f
middleware	src/__tests__/CommandMiddleware.js	/^    var middleware = function(commands \/*, context, properties*\/) {$/;"	f
middleware	src/__tests__/CommandMiddleware.js	/^    var middleware = function(commands, context, properties) {$/;"	f
middleware	src/__tests__/CommandNode.js	/^  const middleware = function(commands, context, properties \/*, updateFn*\/) {$/;"	f
moduleFileExtensions	package.json	/^    "moduleFileExtensions": [$/;"	f
name	package.json	/^      "name": "Chris Sattinger",$/;"	f
name	package.json	/^  "name": "dryadic",$/;"	f
name	src/Dryad.js	/^   * @returns {String|undefined} - class name of required parent Dryad$/;"	c
name	src/Dryad.js	/^   * may be specified by its class name here and the parent will be injected$/;"	c
node	package.json	/^    "node": ">=4"$/;"	f
not	src/DryadPlayer.js	/^        `Dryad class not found: '${className}' in classes: ${Object.keys(this.classes).join(', ')}`$/;"	c
obj	src/__tests__/DryadTree.js	/^      tree.updateContext(dryadId, {obj: {$/;"	o
postinstall	package.json	/^    "postinstall": "node -e \\"require('fs').stat('lib', function (e, s) { process.exit(e || !s.isDirectory() ? 1 : 0) })\\" || npm run build"$/;"	f
prepareForAdd	src/Properties.js	/^  prepareForAdd(player: DryadPlayer) {$/;"	f
prepareForAdd	src/__tests__/DryadPlayer.js	/^  prepareForAdd() {$/;"	f
prepareForAdd	src/__tests__/DryadPlayer.js	/^\/\/   prepareForAdd() {$/;"	f
prepareForAdd	src/__tests__/DryadTree.js	/^  \/\/     prepareForAdd() {$/;"	f
prepareForAdd	src/__tests__/Properties.js	/^    prepareForAdd() {$/;"	f
prepareForAdd	src/updateContext.js	/^ *  prepareForAdd() {$/;"	f
prepublish	package.json	/^    "prepublish": "npm run build",$/;"	f
remove	src/__tests__/Properties.js	/^    remove() {$/;"	f
replacer	src/DryadPlayer.js	/^    function replacer(key, value) {$/;"	f
repository	package.json	/^  "repository": {$/;"	f
requireParent	src/__tests__/DryadTree.js	/^  requireParent() {$/;"	f
responsibility	src/Dryad.js	/^      `Subclass responsibility: ${this.constructor.name} should implement 'value()'`$/;"	c
roots	package.json	/^    "roots": [$/;"	f
scripts	package.json	/^  "scripts": {$/;"	f
setRoot	src/DryadPlayer.js	/^  setRoot(dryad: Dryad | Array<any> | null, rootContext: Object = {}) {$/;"	f
so	src/DryadPlayer.js	/^   * Register a Dryad class so it can be located when used in hyperscript.$/;"	c
source	esdoc.json	/^  "source": ".\/src",$/;"	f
state	src/CommandMiddleware.js	/^   *                            `{state: {[stateTransitionName]: true|false[, error: error]}}`$/;"	o
state	src/CommandNode.js	/^          state: { [stateTransitionName]: false, error }$/;"	o
state	src/CommandNode.js	/^        updateContext(this.context, { state: { [stateTransitionName]: true } });$/;"	o
state	src/__tests__/CommandMiddleware.js	/^          \/\/ expect(updatedContext).toEqual({state: {add: false, error: error}});$/;"	o
state	src/__tests__/CommandMiddleware.js	/^      expect(updatedContext).toEqual({ state: { add: true } });$/;"	o
subgraph	src/__tests__/DryadTree.js	/^  subgraph() {$/;"	f
switch	src/CommandNode.js	/^    switch (this.commands.callOrder) {$/;"	f
switch	src/DryadTree.js	/^      switch (stateTransitionName) {$/;"	f
test	package.json	/^    "test": "jest && npm run lint",$/;"	f
testRegex	package.json	/^    "testRegex": "(\/__tests__\/[a-zA-Z].*|\\\\.(test|spec))\\\\.(js|json)$",$/;"	f
then	src/hyperscript.js	/^  \/\/ If the thing implements isDryadSubclass then the answer must be yes.$/;"	c
transform	package.json	/^    "transform": {$/;"	f
type	package.json	/^    "type": "git",$/;"	f
updateContext	src/__tests__/CommandMiddleware.js	/^    function updateContext(context, update) {$/;"	f
updateContext	src/updateContext.js	/^ *    updateContext: {$/;"	o
url	package.json	/^    "url": "git:\/\/github.com\/crucialfelix\/dryadic"$/;"	f
use	src/CommandMiddleware.js	/^  use(middlewares:Array<Function>) {$/;"	f
uses	src/DryadPlayer.js	/^   * Also needed if a class uses requireParent()$/;"	c
value	src/__tests__/Properties.js	/^    value() {$/;"	f
version	package.json	/^  "version": "0.3.1",$/;"	f
watch	package.json	/^    "watch": "babel --watch --source-maps --out-dir=.\/lib src",$/;"	f
