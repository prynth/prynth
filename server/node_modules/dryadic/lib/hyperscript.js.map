{"version":3,"sources":["../src/hyperscript.js"],"names":["hyperscript","root","lookupClassByNameFn","die","isDryad","tag","properties","children","isDryadSubclass","isDryadForm","value","childNodes","map","child","DryadClass","length","message","Error"],"mappings":";;;;;;;;;;kBAgDwBA,W;;AA/CxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCe,SAASA,WAAT,CACbC,IADa,EAEbC,mBAFa,EAGN;AACP,MAAI,CAACD,IAAL,EAAW;AACTE,QAAIF,IAAJ,EAAU,qBAAV;AACD;;AAED;AACA,MAAIA,KAAKG,OAAT,EAAkB;AAChB,WAAQH,IAAR;AACD;;AAED,MAAI,CAAC,uBAAQA,IAAR,CAAL,EAAoB;AAClBE,QAAIF,IAAJ,EAAU,iBAAV;AACD;;AAZM,6BAc2BA,IAd3B;AAAA,MAcFI,GAdE;AAAA,MAcGC,UAdH;AAAA,MAceC,QAdf;;AAgBP,MAAI,CAACF,GAAL,EAAU;AACRF,QAAIF,IAAJ,EAAU,UAAV;AACD;;AAED,MAAI,EAAE,wBAASI,GAAT,KAAiBA,IAAIG,eAAvB,CAAJ,EAA6C;AAC3CL,QAAIF,IAAJ,EAAU,2BAAV;AACD;;AAED,MAAIM,QAAJ,EAAc;AACZ,QAAI,CAAC,wBAASD,UAAT,CAAL,EAA2B;AACzBH,UAAIF,IAAJ,EAAU,qCAAV;AACD;AACD,QAAI,CAAC,uBAAQM,QAAR,CAAL,EAAwB;AACtBJ,UAAIF,IAAJ,EAAU,kCAAV;AACD;AACF,GAPD,MAOO;AACL;AACA,QAAI,uBAAQK,UAAR,CAAJ,EAAyB;AACvBC,iBAAWD,UAAX;AACAA,mBAAa,EAAb;AACD,KAHD,MAGO;AACL,UAAIA,cAAc,CAAC,wBAASA,UAAT,CAAnB,EAAyC;AACvCH,YAAIF,IAAJ,EAAU,qCAAV;AACD;AACF;AACF;;AAED;AACAK,eAAa,yBACXA,cAAc,EADH,EAEX;AAAA,WACEG,YAAYC,KAAZ,IAAqBV,YAAYU,KAAZ,EAAmBR,mBAAnB,CAArB,GAA+DQ,KADjE;AAAA,GAFW,CAAb;;AAMA;AACA,MAAIC,aAAa,CAACJ,YAAY,EAAb,EAAiBK,GAAjB,CAAqB,iBAAS;AAC7C,WAAOZ,YAAYa,KAAZ,EAAmBX,mBAAnB,CAAP;AACD,GAFgB,CAAjB;;AAIA;AACA;AACA,MAAIY,aAAaT,IAAIG,eAAJ,GAAsBH,GAAtB,GAA4BH,oBAAoBG,GAApB,CAA7C;AACA,SAAO,IAAIS,UAAJ,CAAeR,UAAf,EAA2BK,UAA3B,CAAP;AACD;;AAED,SAASF,WAAT,CAAqBC,KAArB,EAAqC;AACnC,SACE,uBAAQA,KAAR,KACAA,MAAMK,MAAN,IAAgB,CADhB,IAEA,wBAASL,MAAM,CAAN,CAAT,CAFA,IAGA,wBAASA,MAAM,CAAN,CAAT,CAJF;AAMD;;AAED,SAASP,GAAT,CAAaF,IAAb,EAAwBe,OAAxB,EAAyC;AACvC,QAAM,IAAIC,KAAJ,4CACoChB,IADpC,yCACoCA,IADpC,YAC6CA,IAD7C,SACqDe,OADrD,CAAN;AAGD","file":"hyperscript.js","sourcesContent":["/* @flow */\nimport isObject from 'lodash/isObject';\nimport isArray from 'lodash/isArray';\nimport isString from 'lodash/isString';\nimport mapValues from 'lodash/mapValues';\nimport type Dryad from './Dryad';\n\n/**\n * Convert a JSON object into a tree of instantiated Dryads.\n *\n * A Domain-specific language for easily creating Dryad trees\n * a la: https://github.com/Raynos/virtual-hyperscript\n *\n * This is used for sending tree documents from remote clients,\n * and for writing dryadic documents in JSON form without having to\n * import classes and construct trees filled with `new Object()` etc.\n *\n * className, properties:\n * ['synth', {freq: 440}]\n\n * className, properties, children:\n * ['audiobus', {numChannels: 2}, [\n *   ['synth', {defName: 'saw', args: {freq: 440}]\n * ]]\n\n * If there are only 2 items and the second is an Array (not Object),\n * then parse it as:\n *\n * className, children:\n *\n *  ['group', [\n *    ['synth', {freq: 440}]\n *  ]]\n *\n * If a property value is of the form [string, object] or [string, object, array] then assume it is\n * a dryad.\n *\n * ['synth', {\n *    'freq': ['synth', {'defName': 'lfo', 'freq': 0.3}]\n * }]\n *\n * @param {Array|Dryad} root - The Array is the top level (root) dryad form.\n *                           If a Dryad is supplied then no conversion is needed so it is returned immediately.\n * @param {Function} lookupClassByNameFn\n *        This function is provided by the DryadPlayer and converts strings into\n *        Dryad classes. It should throw an error if no Dryad class exists by that name.\n * @returns {Dryad} - the root Dryad\n */\nexport default function hyperscript(\n  root: any,\n  lookupClassByNameFn: Function\n): Dryad {\n  if (!root) {\n    die(root, 'Got null|undefined.');\n  }\n\n  // if the thing implements isDryad then the answer must be yes.\n  if (root.isDryad) {\n    return (root: Dryad);\n  }\n\n  if (!isArray(root)) {\n    die(root, 'Expected Array.');\n  }\n\n  let [tag, properties, children] = root;\n\n  if (!tag) {\n    die(root, 'Null tag');\n  }\n\n  if (!(isString(tag) || tag.isDryadSubclass)) {\n    die(root, 'Expected tag to be string');\n  }\n\n  if (children) {\n    if (!isObject(properties)) {\n      die(root, 'Expected properties to be an Object');\n    }\n    if (!isArray(children)) {\n      die(root, 'Expected children to be an Array');\n    }\n  } else {\n    // If 2nd arg is an array then it is the children and there are no properties.\n    if (isArray(properties)) {\n      children = properties;\n      properties = {};\n    } else {\n      if (properties && !isObject(properties)) {\n        die(root, 'Expected properties to be an Object');\n      }\n    }\n  }\n\n  // Convert any property value that looks like a hyperscript form to a Dryad\n  properties = mapValues(\n    properties || {},\n    value =>\n      isDryadForm(value) ? hyperscript(value, lookupClassByNameFn) : value\n  );\n\n  // Convert children\n  let childNodes = (children || []).map(child => {\n    return hyperscript(child, lookupClassByNameFn);\n  });\n\n  // If the thing implements isDryadSubclass then the answer must be yes.\n  // its a static method on Dryad\n  let DryadClass = tag.isDryadSubclass ? tag : lookupClassByNameFn(tag);\n  return new DryadClass(properties, childNodes);\n}\n\nfunction isDryadForm(value): boolean {\n  return (\n    isArray(value) &&\n    value.length <= 3 &&\n    isString(value[0]) &&\n    isObject(value[1])\n  );\n}\n\nfunction die(root: any, message: string) {\n  throw new Error(\n    `Bad argument to hyperscript: [${typeof root}] ${root} ${message}`\n  );\n}\n"]}