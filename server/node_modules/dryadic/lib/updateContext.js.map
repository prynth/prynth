{"version":3,"sources":["../src/updateContext.js"],"names":["updateContext","command","context","properties","updater","uc","resolveValues","then","updates","object","ks","map","value","key","resolve","result","forEach","i","values"],"mappings":";;;;;kBAsCwBA,a;;AArCxB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCe,SAASA,aAAT,CACbC,OADa,EAEbC,OAFa,EAGbC,UAHa,EAIbC,OAJa,EAKJ;AACT,MAAIH,QAAQD,aAAZ,EAA2B;AACzB,QAAIK,KAAa,0BAAWJ,QAAQD,aAAnB,IACbC,QAAQD,aAAR,CAAsBE,OAAtB,EAA+BC,UAA/B,CADa,GAEbF,QAAQD,aAFZ;AAGA,WAAOM,cAAcD,EAAd,EAAkBE,IAAlB,CAAuB,mBAAW;AACvCH,cAAQF,OAAR,EAAiBM,OAAjB;AACD,KAFM,CAAP;AAGD;AACF;;AAED,SAASF,aAAT,CAAuBG,MAAvB,EAAwD;AACtD,MAAMC,KAAK,oBAAKD,MAAL,CAAX;AACA,SAAO,kBAAQE,GAAR,CAAYD,EAAZ,EAAgB,eAAO;AAC5B,QAAIE,QAAQH,OAAOI,GAAP,CAAZ;AACA;AACA,WAAO,kBAAQC,OAAR,CAAgB,6BAAcF,KAAd,IAAuBN,cAAcM,KAAd,CAAvB,GAA8CA,KAA9D,CAAP;AACD,GAJM,EAIJL,IAJI,CAIC,kBAAU;AAChB,QAAIQ,SAAS,EAAb;AACAL,OAAGM,OAAH,CAAW,UAACH,GAAD,EAAMI,CAAN,EAAY;AACrBF,aAAOF,GAAP,IAAcK,OAAOD,CAAP,CAAd;AACD,KAFD;AAGA,WAAOF,MAAP;AACD,GAVM,CAAP;AAWD","file":"updateContext.js","sourcesContent":["/* @flow */\nimport isFunction from 'lodash/isFunction';\nimport keys from 'lodash/keys';\nimport isPlainObject from 'is-plain-object';\nimport { Promise } from 'bluebird';\n\n/**\n * Updates the player's context using DryadTree.updateContext\n *\n * Usage:\n *\n * Simplest example. The context is updated with someKey = 'someValue'\n *\n *  add() {\n *   return {\n *    updateContext: {\n *      someKey: 'someValue'\n *    }\n *   };\n *  }\n *\n * or:\n *\n *  prepareForAdd() {\n *    return {\n *      // return a function that will be called at command execution time\n *      updateContext: (context, properties) => {\n *        let nodeID = generateNextId();\n *        // these are the values that will be updated into context\n *        return {\n *          nodeID: nodeID,\n *          pid: startSomeProcess()  // any value that is a Promise will be resolved\n *        };\n *      }\n *    };\n *  }\n *\n */\nexport default function updateContext(\n  command: Object,\n  context: Object,\n  properties: Object,\n  updater: Function\n): Promise {\n  if (command.updateContext) {\n    let uc: Object = isFunction(command.updateContext)\n      ? command.updateContext(context, properties)\n      : command.updateContext;\n    return resolveValues(uc).then(updates => {\n      updater(context, updates);\n    });\n  }\n}\n\nfunction resolveValues(object: Object): Promise<Object> {\n  const ks = keys(object);\n  return Promise.map(ks, key => {\n    let value = object[key];\n    // if is object then go deep\n    return Promise.resolve(isPlainObject(value) ? resolveValues(value) : value);\n  }).then(values => {\n    let result = {};\n    ks.forEach((key, i) => {\n      result[key] = values[i];\n    });\n    return result;\n  });\n}\n"]}