'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Executes command trees using registered middleware.
 *
 * Middleware are functions that take two arguments: commandObject, context
 *
 * Where commandObject may have multiple keys, and middleware may handle none or more of those keys.
 * eg. the `run` middleware handles only the command key `run`
 */
var CommandMiddleware = function () {
  function CommandMiddleware() {
    var middlewares = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, CommandMiddleware);

    this.middlewares = middlewares;
  }

  _createClass(CommandMiddleware, [{
    key: 'use',
    value: function use(middlewares) {
      this.middlewares = this.middlewares.concat(middlewares);
    }

    /**
     * Each middleware is called with each command in a flattened depth-first stack.
     *
     * Any command that returns a Promise will be resolved,
     * and the entire action (add, remove, update) is considered complete
     * when all command results have resolved.
     *
     * @param {CommandNode} commandRoot - The root command node of the tree as collected by DryadTree collectCommands. It contains pointers to the children.
     * @param {String} stateTransitionName - Each node has its context updated after success or failure as:
     *                            `{state: {[stateTransitionName]: true|false[, error: error]}}`
     *                            On failure the error will also be stored here for debugging.
     * @param {Function} updateContext - supplied by the DryadPlayer, a function to update the context for a node.
     *
     * @returns {Promise} - resolves when all executed commands have resolved
     */

  }, {
    key: 'call',
    value: function call(commandRoot, stateTransitionName, updateContext) {
      return commandRoot.call(stateTransitionName, this.middlewares, updateContext);
    }
  }]);

  return CommandMiddleware;
}();

exports.default = CommandMiddleware;
//# sourceMappingURL=CommandMiddleware.js.map