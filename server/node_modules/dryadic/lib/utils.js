'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.mapProperties = mapProperties;
exports.isDryad = isDryad;
exports.isObject = isObject;
exports.className = className;

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Deep map Dryad property object using a function
 *
 * @param {Object} properties - a multi-leveled dictionary/Object
 * @param {Function} fn - mapping function. args: value, key, deep.dot.notation.key
 * @param {Array} _prefixKeys - for internal use in recursion only
 */
function mapProperties(properties, fn) {
  var _prefixKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var result = {};
  if (!isObject(properties)) {
    throw new Error('Invalid type: ' + (typeof properties === 'undefined' ? 'undefined' : _typeof(properties)));
  }

  (0, _forEach2.default)(properties, function (value, key) {
    if ((0, _isArray2.default)(value)) {
      result[key] = value.map(function (v, i) {
        // if object or array then map deeper
        if (isObject(v)) {
          return mapProperties(v, fn, appendKey(_prefixKeys, key + '.' + i));
        } else {
          return v;
        }
      });
    } else if (isObject(value)) {
      result[key] = mapProperties(value, fn, appendKey(_prefixKeys, key));
    } else {
      result[key] = fn(value, key, concatKeys(appendKey(_prefixKeys, key)));
    }
  });
  return result;
}

function appendKey(keys, key) {
  var out = keys.slice();
  out.push(key);
  return out;
}

function concatKeys(keys) {
  return keys.join('.');
}

function isDryad(value) {
  return (0, _isObject3.default)(value) && (value.isDryad ? true : false);
}

/**
 * Checks if object is a plain {} object
 *
 * Not Dryad, Array, Function, number etc
 */
function isObject(value) {
  return (0, _isPlainObject2.default)(value);
}

function className(dryad) {
  return dryad.constructor.name;
}
//# sourceMappingURL=utils.js.map