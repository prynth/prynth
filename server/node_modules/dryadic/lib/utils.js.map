{"version":3,"sources":["../src/utils.js"],"names":["mapProperties","isDryad","isObject","className","properties","fn","_prefixKeys","result","Error","value","key","map","v","i","appendKey","concatKeys","keys","out","slice","push","join","dryad","constructor","name"],"mappings":";;;;;;;;QAcgBA,a,GAAAA,a;QAuCAC,O,GAAAA,O;QASAC,Q,GAAAA,Q;QAIAC,S,GAAAA,S;;AAjEhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;;;;;;;AAOO,SAASH,aAAT,CACLI,UADK,EAELC,EAFK,EAIG;AAAA,MADRC,WACQ,uEADqB,EACrB;;AACR,MAAMC,SAAS,EAAf;AACA,MAAI,CAACL,SAASE,UAAT,CAAL,EAA2B;AACzB,UAAM,IAAII,KAAJ,4BAAkCJ,UAAlC,yCAAkCA,UAAlC,GAAN;AACD;;AAED,yBAAQA,UAAR,EAAoB,UAACK,KAAD,EAAaC,GAAb,EAA6B;AAC/C,QAAI,uBAAQD,KAAR,CAAJ,EAAoB;AAClBF,aAAOG,GAAP,IAAcD,MAAME,GAAN,CAAU,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChC;AACA,YAAIX,SAASU,CAAT,CAAJ,EAAiB;AACf,iBAAOZ,cAAcY,CAAd,EAAiBP,EAAjB,EAAqBS,UAAUR,WAAV,EAA0BI,GAA1B,SAAiCG,CAAjC,CAArB,CAAP;AACD,SAFD,MAEO;AACL,iBAAOD,CAAP;AACD;AACF,OAPa,CAAd;AAQD,KATD,MASO,IAAIV,SAASO,KAAT,CAAJ,EAAqB;AAC1BF,aAAOG,GAAP,IAAcV,cAAcS,KAAd,EAAqBJ,EAArB,EAAyBS,UAAUR,WAAV,EAAuBI,GAAvB,CAAzB,CAAd;AACD,KAFM,MAEA;AACLH,aAAOG,GAAP,IAAcL,GAAGI,KAAH,EAAUC,GAAV,EAAeK,WAAWD,UAAUR,WAAV,EAAuBI,GAAvB,CAAX,CAAf,CAAd;AACD;AACF,GAfD;AAgBA,SAAOH,MAAP;AACD;;AAED,SAASO,SAAT,CAAmBE,IAAnB,EAAwCN,GAAxC,EAAoE;AAClE,MAAMO,MAAMD,KAAKE,KAAL,EAAZ;AACAD,MAAIE,IAAJ,CAAST,GAAT;AACA,SAAOO,GAAP;AACD;;AAED,SAASF,UAAT,CAAoBC,IAApB,EAAiD;AAC/C,SAAOA,KAAKI,IAAL,CAAU,GAAV,CAAP;AACD;;AAEM,SAASnB,OAAT,CAAiBQ,KAAjB,EAAsC;AAC3C,SAAO,wBAAUA,KAAV,MAAqBA,MAAMR,OAAN,GAAgB,IAAhB,GAAuB,KAA5C,CAAP;AACD;;AAED;;;;;AAKO,SAASC,QAAT,CAAkBO,KAAlB,EAAuC;AAC5C,SAAO,6BAAcA,KAAd,CAAP;AACD;;AAEM,SAASN,SAAT,CAAmBkB,KAAnB,EAAyC;AAC9C,SAAOA,MAAMC,WAAN,CAAkBC,IAAzB;AACD","file":"utils.js","sourcesContent":["/* @flow */\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport _isObject from 'lodash/isObject';\nimport isPlainObject from 'is-plain-object';\nimport type Dryad from './Dryad';\n\n/**\n * Deep map Dryad property object using a function\n *\n * @param {Object} properties - a multi-leveled dictionary/Object\n * @param {Function} fn - mapping function. args: value, key, deep.dot.notation.key\n * @param {Array} _prefixKeys - for internal use in recursion only\n */\nexport function mapProperties(\n  properties: Object,\n  fn: Function,\n  _prefixKeys: Array<string> = []\n): Object {\n  const result = {};\n  if (!isObject(properties)) {\n    throw new Error(`Invalid type: ${typeof properties}`);\n  }\n\n  forEach(properties, (value: any, key: string) => {\n    if (isArray(value)) {\n      result[key] = value.map((v, i) => {\n        // if object or array then map deeper\n        if (isObject(v)) {\n          return mapProperties(v, fn, appendKey(_prefixKeys, `${key}.${i}`));\n        } else {\n          return v;\n        }\n      });\n    } else if (isObject(value)) {\n      result[key] = mapProperties(value, fn, appendKey(_prefixKeys, key));\n    } else {\n      result[key] = fn(value, key, concatKeys(appendKey(_prefixKeys, key)));\n    }\n  });\n  return result;\n}\n\nfunction appendKey(keys: Array<string>, key: string): Array<string> {\n  const out = keys.slice();\n  out.push(key);\n  return out;\n}\n\nfunction concatKeys(keys: Array<string>): string {\n  return keys.join('.');\n}\n\nexport function isDryad(value: any): boolean {\n  return _isObject(value) && (value.isDryad ? true : false);\n}\n\n/**\n * Checks if object is a plain {} object\n *\n * Not Dryad, Array, Function, number etc\n */\nexport function isObject(value: any): boolean {\n  return isPlainObject(value);\n}\n\nexport function className(dryad: Dryad): string {\n  return dryad.constructor.name;\n}\n"]}