{"version":3,"sources":["../src/DryadPlayer.js"],"names":["DryadPlayer","rootDryad","layers","rootContext","middleware","classes","forEach","use","layer","log","console","_errorLogger","msg","error","stack","dump","setRoot","dryad","classLookup","getClass","tree","h","hgraph","addClass","c","dryadClass","name","toLowerCase","className","Error","Object","keys","join","call","prepare","then","reject","commandName","collectCommands","stateTransitionName","cmdTree","_collectCommands","_call","commandTree","context","update","updateContext","id","nodeId","command","makeCommandTree","getDebugState","hyperscript","replacer","key","value","String","info","JSON","stringify","getPlayGraph"],"mappings":"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","file":"DryadPlayer.js","sourcesContent":["/* @flow */\nimport bind from 'lodash/bind';\nimport DryadTree from './DryadTree';\nimport CommandMiddleware from './CommandMiddleware';\nimport CommandNode from './CommandNode';\nimport { Promise } from 'bluebird';\nimport hyperscript from './hyperscript';\nimport type Dryad from './Dryad';\nimport updateContext from './updateContext';\nimport run from './run';\n\n/**\n * Manages play/stop/update for a Dryad tree.\n *\n * A Dryad has no state or functionality until it is played\n * by a DryadPlayer. A Dryad can be played more than once at\n * the same time by creating more DryadPlayers.\n *\n * The DryadPlayer also holds the layers and command middleware\n * which execute the functionality that the Dryads specify.\n */\nexport default class DryadPlayer {\n  middleware: CommandMiddleware;\n  classes: Object;\n  tree: DryadTree;\n  log: any;\n  _errorLogger: Function;\n\n  constructor(\n    rootDryad: Dryad,\n    layers: Array<Object>,\n    rootContext: Object = {}\n  ) {\n    this.middleware = new CommandMiddleware([updateContext, run]);\n    this.classes = {};\n    if (layers) {\n      layers.forEach(layer => this.use(layer));\n    }\n\n    if (!rootContext.log) {\n      rootContext.log = console;\n    }\n\n    this.log = rootContext.log;\n\n    // default logger\n    this._errorLogger = (msg, error) => {\n      this.log.error(msg, error, error.stack);\n      this.dump();\n      // and emit error event\n    };\n\n    this.setRoot(rootDryad, rootContext);\n  }\n\n  /**\n   * Set a new tree.\n   *\n   * Behavior while already playing is not yet defined.\n   *\n   * @param {Dryad} dryad\n   */\n  setRoot(dryad: Dryad | Array<any> | null, rootContext: Object = {}) {\n    let classLookup = bind(this.getClass, this);\n    this.tree = new DryadTree(\n      dryad ? this.h(dryad) : null,\n      classLookup,\n      rootContext\n    );\n  }\n\n  /**\n   * Convert hyperscript graph to Dryad objects with registered classes\n   *\n   * @param {Object} hgraph - JSON style object\n   * @returns {Dryad}\n   */\n  h(hgraph: Dryad | Array<any>): Dryad {\n    let classLookup = bind(this.getClass, this);\n    return hyperscript(hgraph, classLookup);\n  }\n\n  /**\n   * Add a layer of functionality by registering Dryad classes and command middleware.\n   *\n   * @param {Object} layer - .classes is a list of Dryad classes, .middleware is a list of middleware functions\n   */\n  use(layer: Object): DryadPlayer {\n    this.middleware.use(layer.middleware || []);\n    (layer.classes || []).forEach(c => this.addClass(c));\n    return this;\n  }\n\n  /**\n   * Register a Dryad class so it can be located when used in hyperscript.\n   * Also needed if a class uses requireParent()\n   *\n   * @param {Dryad} dryadClass\n   */\n  addClass(dryadClass: Class<Dryad>): void {\n    this.classes[dryadClass.name.toLowerCase()] = dryadClass;\n  }\n\n  /**\n   * Lookup Dryad class by name.\n   *\n   * Used by hyperscript and requireParent, this requires\n   * that layers and their classes were registered and any custom\n   * classes that you right are registered. If you aren't using\n   * hyperscript then you don't need to register your class.\n   * @param {String} className - case-insensitive\n   * @returns {Dryad}\n   */\n  getClass(className: string): Class<Dryad> {\n    let dryadClass = this.classes[className.toLowerCase()];\n    if (!dryadClass) {\n      throw new Error(\n        `Dryad class not found: '${className}' in classes: ${Object.keys(this.classes).join(', ')}`\n      );\n    }\n    return dryadClass;\n  }\n\n  /**\n   * Prepare Dryads in document for play.\n   *\n   * This allocates resources and performs any time consuming async work\n   * required before the Dryads may play.\n   *\n   * Prepare commands may fail by rejecting their Promises.\n   * Unable to allocate resource, required executables do not exist etc.\n   *\n   * .play commands should not fail\n   *\n   */\n  prepare(): Promise<DryadPlayer> {\n    return this.call('prepareForAdd');\n  }\n\n  /**\n   * Prepares and plays the current document.\n   *\n   * Optionally updates to a new document.\n   *\n   * @returns {Promise} - that resolves to `this`\n   */\n  play(dryad: ?Dryad): Promise<DryadPlayer> {\n    if (dryad) {\n      this.setRoot(dryad);\n    }\n\n    return this.prepare().then(() => this.call('add')).then(\n      () => this,\n      error => {\n        // Log the error but continue the Promise chain\n        this._errorLogger('Failed to play', error);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * @returns {Promise} - that resolves to `this`\n   */\n  stop(): Promise<DryadPlayer> {\n    return this.call('remove').then(\n      () => this,\n      error => {\n        this._errorLogger('Failed to stop', error);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  _collectCommands(commandName: string): CommandNode {\n    if (this.tree && this.tree.tree) {\n      return this.tree.collectCommands(commandName, this.tree.tree, this);\n    }\n    // no-op\n    return new CommandNode({}, {}, {}, '', []);\n  }\n\n  /**\n   * Collect commands and call for a transition: add|remove|prepareForAdd\n   */\n  call(stateTransitionName: string): Promise<DryadPlayer> {\n    let cmdTree = this._collectCommands(stateTransitionName);\n    return this._call(cmdTree, stateTransitionName).then(() => this);\n  }\n\n  /**\n   * Execute a command tree using middleware.\n   */\n  _call(commandTree: CommandNode, stateTransitionName: string): Promise {\n    return this.middleware.call(\n      commandTree,\n      stateTransitionName,\n      (context, update) => this.tree.updateContext(context.id, update)\n    );\n  }\n\n  /**\n   * Execute a single command object for a single node using middleware\n   * outside the prepareForAdd/add/remove full tree command execution routine.\n   *\n   * This can be called out of band from a Dryad's add/remove method\n   *\n   * Its for commands that need to be executed during runtime\n   * in response to events, streams etc.\n   * eg. spawning synths from an incoming stream of data.\n   */\n  callCommand(nodeId: string, command: Object): Promise {\n    return this._call(\n      this.tree.makeCommandTree(nodeId, command),\n      'callCommand'\n    );\n  }\n\n  /**\n   * updateContext - Allow a Dryad to update its own context.\n   *\n   * This can be called during runtime by event handlers,\n   * updates via stream etc. when you need to save new values into the context\n   * outside of the add/remove/update functions.\n   *\n   * Contexts are immutable - this returns a new context object.\n   *\n   * @param  {Object} context to update\n   * @param  {Object} update  updated variables\n   * @return {Object}         new context object\n   */\n  updateContext(context: Object, update: Object): Object {\n    return this.tree.updateContext(context.id, update);\n  }\n\n  /**\n   * Get a representation of current state of the tree.\n   * Contains add|remove|prepared and may hold errors.\n   */\n  getDebugState(): Object {\n    return this.tree.getDebugState();\n  }\n\n  /**\n   * Get hyperscript representation of current (expanded) play graph\n   */\n  getPlayGraph(): ?Array<mixed> {\n    return this.tree.hyperscript();\n  }\n\n  dump() {\n    // TODO: get a better one\n    function replacer(key, value) {\n      if (typeof value === 'function') {\n        return String(value);\n      }\n      return value;\n    }\n\n    this.log.info(JSON.stringify(this.getPlayGraph(), replacer, 2));\n    this.log.error(JSON.stringify(this.getDebugState(), replacer, 2));\n  }\n}\n"]}