{"version":3,"sources":["../src/CommandMiddleware.js"],"names":["CommandMiddleware","middlewares","concat","commandRoot","stateTransitionName","updateContext","call"],"mappings":";;;;;;;;;;AAGA;;;;;;;;IAQqBA,iB;AAInB,+BAA4C;AAAA,QAAhCC,WAAgC,uEAAJ,EAAI;;AAAA;;AAC1C,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;;;wBAEGA,W,EAA6B;AAC/B,WAAKA,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,MAAjB,CAAwBD,WAAxB,CAAnB;AACD;;AAED;;;;;;;;;;;;;;;;;;yBAeKE,W,EAAyBC,mB,EAA4BC,a,EAAqC;AAC7F,aAAOF,YAAYG,IAAZ,CAAiBF,mBAAjB,EAAsC,KAAKH,WAA3C,EAAwDI,aAAxD,CAAP;AACD;;;;;;kBA7BkBL,iB","file":"CommandMiddleware.js","sourcesContent":["/* @flow */\nimport type CommandNode from './CommandNode';\n\n/**\n * Executes command trees using registered middleware.\n *\n * Middleware are functions that take two arguments: commandObject, context\n *\n * Where commandObject may have multiple keys, and middleware may handle none or more of those keys.\n * eg. the `run` middleware handles only the command key `run`\n */\nexport default class CommandMiddleware {\n\n  middlewares: Array<Function>;\n\n  constructor(middlewares:Array<Function>=[]) {\n    this.middlewares = middlewares;\n  }\n\n  use(middlewares:Array<Function>) {\n    this.middlewares = this.middlewares.concat(middlewares);\n  }\n\n  /**\n   * Each middleware is called with each command in a flattened depth-first stack.\n   *\n   * Any command that returns a Promise will be resolved,\n   * and the entire action (add, remove, update) is considered complete\n   * when all command results have resolved.\n   *\n   * @param {CommandNode} commandRoot - The root command node of the tree as collected by DryadTree collectCommands. It contains pointers to the children.\n   * @param {String} stateTransitionName - Each node has its context updated after success or failure as:\n   *                            `{state: {[stateTransitionName]: true|false[, error: error]}}`\n   *                            On failure the error will also be stored here for debugging.\n   * @param {Function} updateContext - supplied by the DryadPlayer, a function to update the context for a node.\n   *\n   * @returns {Promise} - resolves when all executed commands have resolved\n   */\n  call(commandRoot:CommandNode, stateTransitionName:string, updateContext:Function) : Promise<*> {\n    return commandRoot.call(stateTransitionName, this.middlewares, updateContext);\n  }\n}\n"]}