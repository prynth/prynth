{"version":3,"sources":["../../src/dryads/index.js"],"names":["dryadic","play","h","SCServer","SCLang","Group","Synth","AudioBus","SCSynthDef","SynthControl","SynthStream","SynthEventList","middleware","classes","layer","rootDryad","moreLayers","rootContext","concat","hgraph","player"],"mappings":";;;;;;QA4EgBA,O,GAAAA,O;QA6BAC,I,GAAAA,I;QAUAC,C,GAAAA,C;;AA/GhB;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AAGA;QAEEC,Q;QACAC,M;QACAC,K;QACAC,K;QACAC,Q;QACAC,U;QACAC,Y;QACAC,W;QACAC,c;;AAGF;;;AAjBA;AAhBA;;;;;AAkCA,IAAMC,aAAyB,oBAA/B;;AAEA,IAAMC,UAAmB,2LAAzB;;AAYO,IAAMC,wBAAQ;AACnBF,wBADmB;AAEnBC;AAFmB,CAAd;;AAKP;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAASb,OAAT,CACLe,SADK,EAIQ;AAAA,MAFbC,UAEa,uEAFO,EAEP;AAAA,MADbC,WACa,uEADS,EACT;;AACb,SAAO,sBAAgBF,SAAhB,EAA2B,CAACD,KAAD,EAAQI,MAAR,CAAeF,UAAf,CAA3B,EAAuDC,WAAvD,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBO,SAAShB,IAAT,CAAcc,SAAd,EAA6C;AAClD,SAAOf,QAAQe,SAAR,EAAmBd,IAAnB,EAAP;AACD;;AAED;;;;;;AAMO,SAASC,CAAT,CAAWiB,MAAX,EAA+B;AACpC,MAAIC,SAASpB,SAAb;AACA,SAAOoB,OAAOlB,CAAP,CAASiB,MAAT,CAAP;AACD","file":"index.js","sourcesContent":["/**\n * @module dryads\n * @flow\n */\nimport scserver from './middleware/scserver';\n\nimport SCServer from './SCServer';\nimport SCLang from './SCLang';\nimport Group from './Group';\nimport Synth from './Synth';\nimport AudioBus from './AudioBus';\nimport SCSynthDef from './SCSynthDef';\nimport SynthControl from './SynthControl';\nimport SynthStream from './SynthStream';\nimport SynthEventList from './SynthEventList';\n\n// confusing to swap the names like this\nimport { dryadic as makeDryadPlayer } from 'dryadic';\nimport type { Dryad, DryadPlayer } from 'dryadic';\n\n// re-export all the Dryad classes\nexport {\n  SCServer,\n  SCLang,\n  Group,\n  Synth,\n  AudioBus,\n  SCSynthDef,\n  SynthControl,\n  SynthStream,\n  SynthEventList\n};\n\n// export the layer for app = dryadic().use(layer)\nconst middleware: [Function] = [scserver];\n\nconst classes: [Dryad] = [\n  SCServer,\n  SCLang,\n  Group,\n  Synth,\n  AudioBus,\n  SCSynthDef,\n  SynthControl,\n  SynthStream,\n  SynthEventList\n];\n\nexport const layer = {\n  middleware,\n  classes\n};\n\n/**\n * Create a DryadPlayer from a Dryad or hyperscript definition.\n *\n * Automatically includes the supercollider.js layer\n *\n * usage:\n *\n *   var sc = require('supercolliderjs');\n *   var player = sc.dryadic([\n *     'scserver', [\n *       ['group', [\n *         ['synth', {\n *           defName: 'sinosc',\n *           args: {\n *             freq: 440\n *           }\n *         }]\n *       ]\n *   ]);\n *   player.play();\n *   ...\n *   player.stop();\n */\nexport function dryadic(\n  rootDryad: Dryad,\n  moreLayers: [any] = [],\n  rootContext: Object = {}\n): DryadPlayer {\n  return makeDryadPlayer(rootDryad, [layer].concat(moreLayers), rootContext);\n}\n\n/**\n * Play a Dryad or hyperscript document.\n *\n * usage:\n *\n *   var sc = require('supercolliderjs');\n *   var player = sc.play([\n *     'scserver', [\n *       ['group', [\n *         ['synth', {\n *           defName: 'sinosc',\n *           args: {\n *             freq: 440\n *           }\n *         }]\n *       ]\n *   ]);\n *\n * @param {Dryad|Array} rootDryad - Dryad object or hyperscript document\n * @returns {DryadPlayer}\n */\nexport function play(rootDryad: Dryad): DryadPlayer {\n  return dryadic(rootDryad).play();\n}\n\n/**\n * Convert hyperscript object to a tree of Dryads.\n *\n * This lookups each class by lower class 'classname'\n * and creates an instance with properties and children.\n */\nexport function h(hgraph: any): Dryad {\n  let player = dryadic();\n  return player.h(hgraph);\n}\n"]}