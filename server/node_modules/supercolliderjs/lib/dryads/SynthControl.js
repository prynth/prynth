'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dryadic = require('dryadic');

var _msg = require('../server/osc/msg');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Sends nodeSet messages to the Synth in the parent context.
 *
 * This takes a Bacon.js stream which should return objects
 * {param: value, ...} and sends `nodeSet` messages to the parent Synth.
 *
 * SynthControl should be a child of a Synth, Group or other Dryad that
 * sets context.nodeID
 */
var SynthControl = function (_Dryad) {
  _inherits(SynthControl, _Dryad);

  function SynthControl() {
    _classCallCheck(this, SynthControl);

    return _possibleConstructorReturn(this, (SynthControl.__proto__ || Object.getPrototypeOf(SynthControl)).apply(this, arguments));
  }

  _createClass(SynthControl, [{
    key: 'requireParent',

    /**
     * If there is no SCServer in the parent context,
     * then this will wrap itself in an SCServer
     */
    value: function requireParent() {
      return 'SCServer';
    }
  }, {
    key: 'add',
    value: function add(player) {
      return {
        run: function run(context, properties) {
          if (properties.stream) {
            var subscription = properties.stream.subscribe(function (event) {
              // This assumes a Bacon event.
              // Should validate that event.value is object
              var msg = (0, _msg.nodeSet)(context.nodeID, event.value());
              player.callCommand(context, {
                scserver: {
                  bundle: {
                    time: 0.03,
                    packets: [msg]
                  }
                }
              });
            });
            player.updateContext(context, { subscription: subscription });
          }
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        run: function run(context) {
          if (context.subscription) {
            if (_lodash2.default.isFunction(context.subscription)) {
              // baconjs style
              context.subscription();
            } else {
              // Rx style
              context.subscription.dispose();
            }
          }
        }
      };
    }
  }]);

  return SynthControl;
}(_dryadic.Dryad);

exports.default = SynthControl;
//# sourceMappingURL=SynthControl.js.map