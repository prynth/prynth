{"version":3,"sources":["../../src/dryads/AudioBus.js"],"names":["AudioBus","numChannels","callOrder","updateContext","context","properties","out","scserver","state","allocAudioBus","run","freeAudioBus"],"mappings":";;;;;;;;AACA;;;;;;;;AAEA;;;;IAIqBA,Q;;;;;;;;;;;wCACS;AAC1B,aAAO;AACLC,qBAAa;AADR,OAAP;AAGD;;AAED;;;;;;;oCAIwB;AACtB,aAAO,UAAP;AACD;;;oCAEuB;AACtB,aAAO;AACLC,mBAAW,oBADN;AAELC,uBAAe,uBAACC,OAAD,EAAUC,UAAV;AAAA,iBAA0B;AACvCC,iBAAKF,QAAQG,QAAR,CAAiBC,KAAjB,CAAuBC,aAAvB,CAAqCJ,WAAWJ,WAAhD,CADkC;AAEvCA,yBAAaI,WAAWJ;AAFe,WAA1B;AAAA;AAFV,OAAP;AAOD;;;6BAEgB;AACf,aAAO;AACLS,aAAK,aAACN,OAAD,EAAUC,UAAV;AAAA,iBACHD,QAAQG,QAAR,CAAiBC,KAAjB,CAAuBG,YAAvB,CAAoCP,QAAQE,GAA5C,EAAiDD,WAAWJ,WAA5D,CADG;AAAA;AADA,OAAP;AAID;;;;;;kBA9BkBD,Q","file":"AudioBus.js","sourcesContent":["/* @flow */\nimport { Dryad } from 'dryadic';\n\n/**\n  * Allocates an audio bus, making it available in the children's context as .out (integer)\n  * and .numChannels (integer)\n  */\nexport default class AudioBus extends Dryad {\n  defaultProperties(): Object {\n    return {\n      numChannels: 1\n    };\n  }\n\n  /**\n   * If there is no SCServer in the parent context,\n   * then this will wrap itself in an SCServer\n   */\n  requireParent(): string {\n    return 'SCServer';\n  }\n\n  prepareForAdd(): Object {\n    return {\n      callOrder: 'SELF_THEN_CHILDREN',\n      updateContext: (context, properties) => ({\n        out: context.scserver.state.allocAudioBus(properties.numChannels),\n        numChannels: properties.numChannels\n      })\n    };\n  }\n\n  remove(): Object {\n    return {\n      run: (context, properties) =>\n        context.scserver.state.freeAudioBus(context.out, properties.numChannels)\n    };\n  }\n}\n"]}