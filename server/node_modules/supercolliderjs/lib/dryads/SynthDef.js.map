{"version":3,"sources":["../../src/dryads/SynthDef.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAKqB;;;AAEnB,WAFmB,QAEnB,CAAY,OAAZ,EAAkC;QAAb,iEAAS,kBAAI;;0BAFf,UAEe;;kEAFf,qBAGX,EAAC,gBAAD,IAAW,WADe;GAAlC;;eAFmB;;oCAMH;AACd,aAAO,UAAP,CADc;;;;oCAIA;AACd,aAAO;AACL,gBAAQ,kBAAM;;AAEZ,cAAI,SAAS,IAAI,MAAJ,EAAT;;AAFQ,iBAIL,MAAP,CAJY;SAAN;;;;;AADH,OAAP,CADc;;;;0BAeV;AACJ,aAAO;AACL,kBAAU;AACR,2BAAiB,yBAAC,OAAD;mBAAa,SA/B9B,QA+B8B,CAAQ,QAAQ,MAAR;WAArB;SADnB;;;;AADK,OAAP,CADI;;;;6BAWG;;;AACP,aAAO;AACL,kBAAU;AACR,eAAK;mBAAM,SA1CF,QA0CE,CAAQ,OAAK,UAAL,CAAgB,OAAhB;WAAd;SADP;OADF,CADO;;;;+CAQkB;;;SA5CR;WAJb;;kBAIa","file":"SynthDef.js","sourcesContent":["\nimport {Dryad} from 'dryadic';\nimport {defRecv, defFree} from '../server/osc/msg';\n\n\nexport default class SynthDef extends Dryad {\n\n  constructor(defName, children=[]) {\n    super({defName}, children);\n  }\n\n  requireParent() {\n    return 'SCServer';\n  }\n\n  prepareForAdd() {\n    return {\n      buffer: () => {\n        // compile it here\n        let buffer = new Buffer();\n        // may have to construct a safe scoped synthDefName\n        return buffer;\n      }\n      // what is returned is stored in context\n      // could return the synthDef info\n      // but that should be stored in a library\n      // oscCallAndResponse: defRecv(buffer)\n    };\n  }\n\n  add() {\n    return {\n      scserver: {\n        callAndResponse: (context) => defRecv(context.buffer)\n      }\n      // done is when that resolves\n      // should store synthDesc\n      // and remove buffer from context\n    };\n  }\n\n  remove() {\n    return {\n      scserver: {\n        msg: () => defFree(this.properties.defName)\n      }\n    };\n  }\n\n  addUGen(/*context, ugen*/) {\n\n  }\n}\n"]}