{"version":3,"sources":["../../src/dryads/SCSynth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAUqB;;;AAEnB,WAFmB,OAEnB,GAAiD;QAArC,gEAAQ,EAAC,OAAO,KAAP,kBAA4B;QAAb,iEAAS,kBAAI;;0BAF9B,SAE8B;;kEAF9B,oBAGX,EAAC,gBAAD,IAAW,WAD8B;GAAjD;;eAFmB;;oCAMH;;;AACd,aAAO;AACL,iBAAS;iBAAM,YAhBb,KAgBa,CAAK,OAAK,UAAL,CAAgB,OAAhB;SAAX;AACT,eAAO,CAAP;OAFF,CADc;;;;6BAOP;AACP,aAAO;AACL,aAAK,aAAC,OAAD,EAAa;AAChB,iBAAO,QAAQ,OAAR,CAAgB,IAAhB,EAAP,CADgB;SAAb;OADP,CADO;;;;SAbU;WATb;;kBASa","file":"SCSynth.js","sourcesContent":["\nimport {Dryad} from 'dryadic';\nimport {boot} from '../server/server';\n\n\n/**\n * Boots a new supercollider server (scsynth) making it available for all children.\n *\n * Always boots a new one, ignoring any possibly already existing one in context.\n */\nexport default class SCSynth extends Dryad {\n\n  constructor(options={debug: false}, children=[]) {\n    super({options}, children);\n  }\n\n  prepareForAdd() {\n    return {\n      scsynth: () => boot(this.properties.options),\n      group: 0\n    };\n  }\n\n  remove() {\n    return {\n      run: (context) => {\n        return context.scsynth.quit();\n      }\n    };\n  }\n}\n"]}