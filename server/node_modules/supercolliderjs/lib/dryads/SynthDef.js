'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dryadic = require('dryadic');

var _msg = require('../server/osc/msg');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SynthDef = function (_Dryad) {
  _inherits(SynthDef, _Dryad);

  function SynthDef(defName) {
    var children = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    _classCallCheck(this, SynthDef);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(SynthDef).call(this, { defName: defName }, children));
  }

  _createClass(SynthDef, [{
    key: 'requireParent',
    value: function requireParent() {
      return 'SCServer';
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      return {
        buffer: function buffer() {
          // compile it here
          var buffer = new Buffer();
          // may have to construct a safe scoped synthDefName
          return buffer;
        }
        // what is returned is stored in context
        // could return the synthDef info
        // but that should be stored in a library
        // oscCallAndResponse: defRecv(buffer)
      };
    }
  }, {
    key: 'add',
    value: function add() {
      return {
        scserver: {
          callAndResponse: function callAndResponse(context) {
            return (0, _msg.defRecv)(context.buffer);
          }
        }
        // done is when that resolves
        // should store synthDesc
        // and remove buffer from context
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      var _this2 = this;

      return {
        scserver: {
          msg: function msg() {
            return (0, _msg.defFree)(_this2.properties.defName);
          }
        }
      };
    }
  }, {
    key: 'addUGen',
    value: function addUGen() /*context, ugen*/{}
  }]);

  return SynthDef;
}(_dryadic.Dryad);

exports.default = SynthDef;
//# sourceMappingURL=SynthDef.js.map