{"version":3,"sources":["../../src/dryads/SynthControl.js"],"names":["SynthControl","player","run","context","properties","stream","subscription","subscribe","msg","nodeID","event","value","callCommand","scserver","bundle","time","packets","updateContext","isFunction","dispose"],"mappings":";;;;;;;;AACA;;AAEA;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;IASqBA,Y;;;;;;;;;;;;AACnB;;;;oCAIwB;AACtB,aAAO,UAAP;AACD;;;wBAEGC,M,EAA6B;AAC/B,aAAO;AACLC,aAAK,aAACC,OAAD,EAAUC,UAAV,EAAyB;AAC5B,cAAIA,WAAWC,MAAf,EAAuB;AACrB,gBAAIC,eAAeF,WAAWC,MAAX,CAAkBE,SAAlB,CAA4B,iBAAS;AACtD;AACA;AACA,kBAAIC,MAAM,kBAAQL,QAAQM,MAAhB,EAAwBC,MAAMC,KAAN,EAAxB,CAAV;AACAV,qBAAOW,WAAP,CAAmBT,OAAnB,EAA4B;AAC1BU,0BAAU;AACRC,0BAAQ;AACNC,0BAAM,IADA;AAENC,6BAAS,CAACR,GAAD;AAFH;AADA;AADgB,eAA5B;AAQD,aAZkB,CAAnB;AAaAP,mBAAOgB,aAAP,CAAqBd,OAArB,EAA8B,EAAEG,0BAAF,EAA9B;AACD;AACF;AAlBI,OAAP;AAoBD;;;6BAEgB;AACf,aAAO;AACLJ,aAAK,sBAAW;AACd,cAAIC,QAAQG,YAAZ,EAA0B;AACxB,gBAAI,iBAAEY,UAAF,CAAaf,QAAQG,YAArB,CAAJ,EAAwC;AACtC;AACAH,sBAAQG,YAAR;AACD,aAHD,MAGO;AACL;AACAH,sBAAQG,YAAR,CAAqBa,OAArB;AACD;AACF;AACF;AAXI,OAAP;AAaD;;;;;;kBA9CkBnB,Y","file":"SynthControl.js","sourcesContent":["/* @flow */\nimport { Dryad } from 'dryadic';\nimport type { DryadPlayer } from 'dryadic';\nimport { nodeSet } from '../server/osc/msg';\nimport _ from 'lodash';\n\n/**\n * Sends nodeSet messages to the Synth in the parent context.\n *\n * This takes a Bacon.js stream which should return objects\n * {param: value, ...} and sends `nodeSet` messages to the parent Synth.\n *\n * SynthControl should be a child of a Synth, Group or other Dryad that\n * sets context.nodeID\n */\nexport default class SynthControl extends Dryad {\n  /**\n   * If there is no SCServer in the parent context,\n   * then this will wrap itself in an SCServer\n   */\n  requireParent(): string {\n    return 'SCServer';\n  }\n\n  add(player: DryadPlayer): Object {\n    return {\n      run: (context, properties) => {\n        if (properties.stream) {\n          let subscription = properties.stream.subscribe(event => {\n            // This assumes a Bacon event.\n            // Should validate that event.value is object\n            let msg = nodeSet(context.nodeID, event.value());\n            player.callCommand(context, {\n              scserver: {\n                bundle: {\n                  time: 0.03,\n                  packets: [msg]\n                }\n              }\n            });\n          });\n          player.updateContext(context, { subscription });\n        }\n      }\n    };\n  }\n\n  remove(): Object {\n    return {\n      run: context => {\n        if (context.subscription) {\n          if (_.isFunction(context.subscription)) {\n            // baconjs style\n            context.subscription();\n          } else {\n            // Rx style\n            context.subscription.dispose();\n          }\n        }\n      }\n    };\n  }\n}\n"]}