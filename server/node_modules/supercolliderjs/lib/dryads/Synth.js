'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dryadic = require('dryadic');

var _msg = require('../server/osc/msg');

var _nodeWatcher = require('../server/node-watcher');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates a synth on the server.
 *
 * Properties:
 * - def
 * - args
 */
var Synth = function (_Dryad) {
  _inherits(Synth, _Dryad);

  function Synth() {
    _classCallCheck(this, Synth);

    return _possibleConstructorReturn(this, (Synth.__proto__ || Object.getPrototypeOf(Synth)).apply(this, arguments));
  }

  _createClass(Synth, [{
    key: 'requireParent',

    /**
     * If there is no SCServer in the parent context,
     * then this will wrap itself in an SCServer
     */
    value: function requireParent() {
      return 'SCServer';
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      return {
        updateContext: function updateContext(context) {
          return {
            nodeID: context.scserver.state.nextNodeID()
          };
        }
      };
    }

    // synthDefName(context:Object) : string {
    //   // The parent SCSynthDef publishes both .synthDef (object) and .synthDefName to context
    //   let name = _.isString(this.properties.def) ? this.properties.def : (context.synthDef && context.synthDef.name);
    //   if (!name) {
    //     throw new Error('No synthDefName supplied to Synth', context);
    //   }
    //   return name;
    // }

  }, {
    key: 'add',
    value: function add() {
      var _this2 = this;

      return {
        scserver: {
          msg: function msg(context, properties) {
            var args = _lodash2.default.mapValues(properties.args, function (value, key) {
              return _this2._checkOscType(value, key, context.id);
            });
            // if out is not set in args and out is in synthdef
            // then set it from context
            // TODO: check that synthDef has an arg named out
            if (_lodash2.default.isUndefined(args.out) && !_lodash2.default.isUndefined(context.out)) {
              args.out = context.out;
            }

            var defName = _this2._checkOscType(properties.def && properties.def.name, 'def.name', context.id);
            return (0, _msg.synthNew)(defName, context.nodeID, _msg.AddActions.TAIL, context.group, args);
          }
        },
        run: function run(context, properties) {
          return (0, _nodeWatcher.whenNodeGo)(context.scserver, context.id, context.nodeID).then(function (nodeID) {
            // TODO: call a method instead so its testable
            (0, _nodeWatcher.updateNodeState)(context.scserver, context.nodeID, {
              synthDef: properties.def.name
            });
            return nodeID;
          });
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        scserver: {
          msg: function msg(context) {
            return (0, _msg.nodeFree)(context.nodeID);
          }
        },
        run: function run(context) {
          return (0, _nodeWatcher.whenNodeEnd)(context.scserver, context.id, context.nodeID);
        }
      };
    }
  }, {
    key: '_checkOscType',
    value: function _checkOscType(v, key, id) {
      switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
        case 'number':
        case 'string':
          // case 'Buffer':
          return v;
        default:
          throw new Error('Invalid OSC type for Synth ' + key + ': [' + (typeof v === 'undefined' ? 'undefined' : _typeof(v)) + ': ' + v + '] @ ' + id);
      }
    }
  }]);

  return Synth;
}(_dryadic.Dryad);

exports.default = Synth;
//# sourceMappingURL=Synth.js.map