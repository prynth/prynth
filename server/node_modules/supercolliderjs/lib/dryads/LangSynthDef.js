'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Dryad2 = require('../dryadic/Dryad');

var _Dryad3 = _interopRequireDefault(_Dryad2);

var _msg = require('../server/osc/msg.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Compile a SynthDef from sclang source code.
 */

var LangSynthDef = function (_Dryad) {
  _inherits(LangSynthDef, _Dryad);

  function LangSynthDef(defName, sourceCode) {
    var children = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    _classCallCheck(this, LangSynthDef);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(LangSynthDef).call(this, { defName: defName, sourceCode: sourceCode }, children));
  }

  _createClass(LangSynthDef, [{
    key: 'requireParent',
    value: function requireParent() {
      return 'SCLang';
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      var _this2 = this;

      var wrappedCode = '{\n      var source = ' + this.properties.sourceCode + ';\n      var def = if(source.isKindOf(SynthDef), { source }, { SynthDef("' + this.properties.defName + '", source) });\n      (\n        synthDesc: def.asSynthDesc.asJSON(),\n        bytes: def.asBytes()\n      )\n    }.value;';

      return {
        buffer: function buffer(context) {
          return context.sclang.interpret(wrappedCode, undefined, false, false, true).then(function (result) {
            putSynthDef(context, _this2.properties.defName, result.synthDesc);
            return new Buffer(result.bytes);
          }, function (error) {
            return Promise.reject({
              description: 'Failed to compile SynthDef \'' + _this2.properties.defName + '\'',
              error: error.error,
              sourceCode: _this2.properties.sourceCode
            });
          });
        }
      };
    }
  }, {
    key: 'add',
    value: function add() {
      return {
        scsynth: {
          callAndResponse: function callAndResponse(context) {
            return (0, _msg.defRecv)(context.buffer);
          }
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      var _this3 = this;

      return {
        scsynth: {
          // no need to do this if scsynth has gone away
          msg: function msg() {
            return (0, _msg.defFree)(_this3.properties.defName);
          }
        }
      };
    }
  }]);

  return LangSynthDef;
}(_Dryad3.default);

// temp


exports.default = LangSynthDef;
var StateKeys = {
  SYNTH_DEFS: 'SYNTH_DEFS'
};

function putSynthDef(context, defName, synthDesc) {
  context.scsynth.state.mutate(StateKeys.SYNTH_DEFS, function (state) {
    return state.set(defName, synthDesc);
  });
}
//# sourceMappingURL=LangSynthDef.js.map