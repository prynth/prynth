{"version":3,"sources":["../../../src/dryads/utils/test-utils.js"],"names":["makePlayer","expectPlayGraphToEqual","getCommand","dryad","expected","ignoreFn","p","g","tree","hyperscript","expect","toEqual","player","commandName","childAt","cmd","_collectCommands","obj","children","i"],"mappings":";;;;;QAKgBA,U,GAAAA,U;QAIAC,sB,GAAAA,sB;QAqCAC,U,GAAAA,U;;AA9ChB;;;;AACA;;;;AAIO,SAASF,UAAT,CAAoBG,KAApB,EAA+C;AACpD,SAAO,oBAAQA,KAAR,CAAP;AACD;;AAEM,SAASF,sBAAT,CACLE,KADK,EAELC,QAFK,EAGLC,QAHK,EAIK;AACV,MAAIC,IAAIN,WAAWG,KAAX,CAAR;AACA,MAAII,IAAID,EAAEE,IAAF,CAAOC,WAAP,EAAR;;AAEA,MAAIJ,QAAJ,EAAc;AACZE,QAAIF,SAASE,CAAT,CAAJ;AACA,QAAIH,QAAJ,EAAc;AACZA,iBAAWC,SAASD,QAAT,CAAX;AACD;AACF;;AAED,MAAIA,QAAJ,EAAc;AACZM,WAAOH,CAAP,EAAUI,OAAV,CAAkBP,QAAlB;AACD;;AAED,SAAOG,CAAP;AACD;;AAED;;;;;;;;;;;;;;;AAeO,SAASL,UAAT,CACLU,MADK,EAELC,WAFK,EAIG;AAAA,MADRC,OACQ,uEADY,EACZ;;AACR,MAAIC,MAAMH,OAAOI,gBAAP,CAAwBH,WAAxB,CAAV;AACA;AACA;AACA;AACA;AACA,MAAII,MAAMF,GAAV;AACA,sBAAKD,OAAL,EAAc,aAAK;AACjBG,UAAMA,IAAIC,QAAJ,CAAaC,CAAb,CAAN;AACD,GAFD;;AAIA,SAAOF,GAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"test-utils.js","sourcesContent":["import each from 'lodash/each';\nimport { dryadic } from '../index';\nimport type { Dryad, DryadPlayer } from 'dryadic';\nimport type { JSONType } from '../../Types';\n\nexport function makePlayer(dryad: Dryad): DryadPlayer {\n  return dryadic(dryad);\n}\n\nexport function expectPlayGraphToEqual(\n  dryad: Dryad,\n  expected: JSONType,\n  ignoreFn: Function\n): JSONType {\n  let p = makePlayer(dryad);\n  let g = p.tree.hyperscript();\n\n  if (ignoreFn) {\n    g = ignoreFn(g);\n    if (expected) {\n      expected = ignoreFn(expected);\n    }\n  }\n\n  if (expected) {\n    expect(g).toEqual(expected);\n  }\n\n  return g;\n}\n\n/**\n * Get a command object to inspect it for testing.\n * Calls any function in scserver msg/bundle so the result\n * will be the actual OSC message/bundle.\n *\n * @param  player\n * @param  commandName  'add' 'remove' etc.\n * @param  {Array}  [childAt=[]] Index array to fetch a child command\n *                               for examining the command of a child.\n *                               Especially useful when the Dryad uses\n *                               requireParent or Properties so that the\n *                               command you are testing is not the\n *                               top level.\n * @return Command object\n */\nexport function getCommand(\n  player: DryadPlayer,\n  commandName: string,\n  childAt: [number] = []\n): Object {\n  let cmd = player._collectCommands(commandName);\n  // specify which child you want to get the command for with indices:\n  // null top\n  // [0] first child\n  // [0, 0] first child first child\n  var obj = cmd;\n  each(childAt, i => {\n    obj = obj.children[i];\n  });\n\n  return obj;\n}\n\n// export function getOSCMsg(player:DryadPlayer, commandName:string='add', childAt:[number]=[])\n//   let cmd = getCommand(player, commandName, childAt);\n//   // this is actually calling the CommandNode\n//   console.log('getCommand got', cmd);\n//\n//   if (cmd.commands.scserver) {\n//     // msg\n//\n//     // value them with context and properties\n//     let properties = cmd.resolveProperties();\n//     let msg = cmd.\n//     obj.commands.scserver = resolveFuncs(obj.commands.scserver, obj.context, obj.properties);\n//   }\n//\n//   return obj;\n// }\n"]}