'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dryadic = require('dryadic');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
  * Allocates an audio bus, making it available in the children's context as .out (integer)
  * and .numChannels (integer)
  */
var AudioBus = function (_Dryad) {
  _inherits(AudioBus, _Dryad);

  function AudioBus() {
    _classCallCheck(this, AudioBus);

    return _possibleConstructorReturn(this, (AudioBus.__proto__ || Object.getPrototypeOf(AudioBus)).apply(this, arguments));
  }

  _createClass(AudioBus, [{
    key: 'defaultProperties',
    value: function defaultProperties() {
      return {
        numChannels: 1
      };
    }

    /**
     * If there is no SCServer in the parent context,
     * then this will wrap itself in an SCServer
     */

  }, {
    key: 'requireParent',
    value: function requireParent() {
      return 'SCServer';
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      return {
        callOrder: 'SELF_THEN_CHILDREN',
        updateContext: function updateContext(context, properties) {
          return {
            out: context.scserver.state.allocAudioBus(properties.numChannels),
            numChannels: properties.numChannels
          };
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        run: function run(context, properties) {
          return context.scserver.state.freeAudioBus(context.out, properties.numChannels);
        }
      };
    }
  }]);

  return AudioBus;
}(_dryadic.Dryad);

exports.default = AudioBus;
//# sourceMappingURL=AudioBus.js.map