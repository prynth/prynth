{"version":3,"sources":["../../src/dryads/CompileSynthDefFile.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASqB;;;AAEnB,WAFmB,mBAEnB,CAAY,YAAZ,EAAuC;QAAb,iEAAS,kBAAI;;0BAFpB,qBAEoB;;kEAFpB,gCAGX,EAAC,MAAM,YAAN,IAAqB,WADS;GAAvC;;eAFmB;;oCAMH;AACd,aAAO,QAAP,CADc;;;;oCAIA;;;;AAEd,UAAI,WAAW,eAAK,OAAL,CAAa,KAAK,UAAL,CAAgB,IAAhB,CAAxB,CAFU;AAGd,UAAI,UAAU,eAAK,QAAL,CAAc,QAAd,EAAwB,eAAK,OAAL,CAAa,QAAb,CAAxB,CAAV,CAHU;;AAKd,aAAO;AACL,gBAAQ,gBAAC,OAAD,EAAa;AACnB,iBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,yBAAG,QAAH,CAAY,QAAZ,EAAsB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACzC,kBAAI,GAAJ,EAAS;AACP,uBAAO,GAAP,EADO;eAAT,MAEO;AACL,wBAAQ,GAAR,CAAY,UAAZ;;AADK,oBAGD,mDACc,qGACmD,wLAFjE,CAHC;;AAYL,uBAAO,QAAQ,MAAR,CAAe,SAAf,CAAyB,WAAzB,EAAsC,SAAtC,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D,IAA/D,EACJ,IADI,CACC,UAAC,MAAD,EAAY;AAChB,8BAAY,OAAZ,EAAqB,OAAK,UAAL,CAAgB,OAAhB,EAAyB,OAAO,SAAP,CAA9C,CADgB;AAEhB,yBAAO,IAAI,MAAJ,CAAW,OAAO,KAAP,CAAlB,CAFgB;iBAAZ,EAGH,UAAC,KAAD,EAAW;AACZ,yBAAO,QAAQ,MAAR,CAAe;AACpB,mEAA4C,OAAK,UAAL,CAAgB,OAAhB,OAA5C;AACA,2BAAO,MAAM,KAAN;AACP,gCAAY,OAAK,UAAL,CAAgB,UAAhB;mBAHP,CAAP,CADY;iBAAX,CAJL,CAZK;eAFP;aADoB,CAAtB,CADsC;WAArB,CAAnB,CADmB;SAAb;OADV,CALc;;;;0BAyCV;;AAEJ,aAAO;AACL,iBAAS;AACP,2BAAiB,yBAAC,OAAD;mBAAa,SA9D9B,QA8D8B,CAAQ,QAAQ,MAAR;WAArB;SADnB;OADF,CAFI;;;;6BASG;;;AACP,aAAO;AACL,iBAAS;;AAEP,eAAK;mBAAM,SAvEF,QAuEE,CAAQ,OAAK,UAAL,CAAgB,OAAhB;WAAd;SAFP;OADF,CADO;;;;SA5DU;WARb;;;;;kBAQa;AAwErB,IAAM,YAAY;AAChB,cAAY,YAAZ;CADI;;AAIN,SAAS,WAAT,CAAqB,OAArB,EAA8B,OAA9B,EAAuC,SAAvC,EAAkD;AAChD,UAAQ,OAAR,CAAgB,KAAhB,CAAsB,MAAtB,CAA6B,UAAU,UAAV,EAAsB,UAAC,KAAD,EAAW;AAC5D,WAAO,MAAM,GAAN,CAAU,OAAV,EAAmB,SAAnB,CAAP,CAD4D;GAAX,CAAnD,CADgD;CAAlD","file":"CompileSynthDefFile.js","sourcesContent":["\nimport {Dryad} from 'dryadic';\nimport {defRecv, defFree} from '../server/osc/msg.js';\nimport path from 'path';\nimport fs from 'fs';\n\n/**\n * Compile a SynthDef from sclang source code file.\n */\nexport default class CompileSynthDefFile extends Dryad {\n\n  constructor(synthDefPath, children=[]) {\n    super({path: synthDefPath}, children);\n  }\n\n  requireParent() {\n    return 'SCLang';\n  }\n\n  prepareForAdd() {\n    // execute file\n    let fullpath = path.resolve(this.properties.path);\n    let defName = path.basename(fullpath, path.extname(fullpath));\n\n    return {\n      buffer: (context) => {\n        return new Promise((resolve, reject) => {\n          fs.readFile(fullpath, (err, sourceCode) => {\n            if (err) {\n              reject(err);\n            } else {\n              console.log(sourceCode);\n              // this can move to a utility function\n              var wrappedCode = `{\n                var source = ${ sourceCode };\n                var def = if(source.isKindOf(SynthDef), { source }, { SynthDef(\"${ defName }\", source) });\n                (\n                  synthDesc: def.asSynthDesc.asJSON(),\n                  bytes: def.asBytes()\n                )\n              }.value;`;\n\n              return context.sclang.interpret(wrappedCode, undefined, false, false, true)\n                .then((result) => {\n                  putSynthDef(context, this.properties.defName, result.synthDesc);\n                  return new Buffer(result.bytes);\n                }, (error) => {\n                  return Promise.reject({\n                    description: `Failed to compile SynthDef '${this.properties.defName}'`,\n                    error: error.error,\n                    sourceCode: this.properties.sourceCode\n                  });\n                });\n            }\n          });\n        });\n      }\n    };\n  }\n\n  add() {\n    // add a file watcher, stored in context\n    return {\n      scsynth: {\n        callAndResponse: (context) => defRecv(context.buffer)\n      }\n    };\n  }\n\n  remove() {\n    return {\n      scsynth: {\n        // no need to do this if scsynth has gone away\n        msg: () => defFree(this.properties.defName)\n      }\n    };\n  }\n}\n\n\n// temp\nconst StateKeys = {\n  SYNTH_DEFS: 'SYNTH_DEFS'\n};\n\nfunction putSynthDef(context, defName, synthDesc) {\n  context.scsynth.state.mutate(StateKeys.SYNTH_DEFS, (state) => {\n    return state.set(defName, synthDesc);\n  });\n}\n"]}