'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dryadic = require('dryadic');

var _msg = require('../server/osc/msg.js');

var _nodeWatcher = require('../server/node-watcher');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates a group on the server; sets .group in context for its children,
 * so any Synths or Groups will be spawned inside this group.
 */
var Group = function (_Dryad) {
  _inherits(Group, _Dryad);

  function Group() {
    _classCallCheck(this, Group);

    return _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
  }

  _createClass(Group, [{
    key: 'requireParent',

    /**
     * If there is no SCServer in the parent context,
     * then this will wrap itself in an SCServer
     */
    value: function requireParent() {
      return 'SCServer';
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      return {
        callOrder: 'SELF_THEN_CHILDREN',
        updateContext: function updateContext(context /*, properties*/) {
          var nodeID = context.scserver.state.nextNodeID();
          return {
            nodeID: nodeID,
            // TODO: but this overwrites my own group !
            // what if parent is a group ?
            // I need to create this group within that group
            // This should just be childContext,
            // but that is only called when creating the tree.
            group: nodeID,
            // for now, save it to parentGroup
            parentGroup: context.group || 0
          };
        }
      };
    }
  }, {
    key: 'add',
    value: function add() {
      return {
        scserver: {
          msg: function msg(context) {
            return (0, _msg.groupNew)(context.nodeID, _msg.AddActions.TAIL, context.parentGroup);
          }
        },
        run: function run(context) {
          return (0, _nodeWatcher.whenNodeGo)(context.scserver, context.id, context.nodeID);
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        scserver: {
          // children do not have to free their nodes
          // as they get freed by freeing this parent
          // so remove for children needs to communicate that somehow
          // but buffers and busses do need to free
          msg: function msg(context) {
            return (0, _msg.nodeFree)(context.nodeID);
          }
        },
        run: function run(context) {
          return (0, _nodeWatcher.whenNodeEnd)(context.scserver, context.id, context.nodeID);
        }
      };
    }
  }]);

  return Group;
}(_dryadic.Dryad);

exports.default = Group;
//# sourceMappingURL=Group.js.map