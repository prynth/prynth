'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dryadic = require('dryadic');

var _server = require('../server/server');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultOptions = {
  debug: false
};

/**
 * Boots a new SuperCollider server (scsynth) making it available for all children as `context.scserver`
 *
 * Always boots a new one, ignoring any possibly already existing one in the parent context.
 *
 * `options` are the command line options supplied to scsynth (note: not all options are passed through yet)
 * see {@link Server}
 */

var SCServer = function (_Dryad) {
  _inherits(SCServer, _Dryad);

  function SCServer() {
    _classCallCheck(this, SCServer);

    return _possibleConstructorReturn(this, (SCServer.__proto__ || Object.getPrototypeOf(SCServer)).apply(this, arguments));
  }

  _createClass(SCServer, [{
    key: 'defaultProperties',
    value: function defaultProperties() {
      return {
        options: defaultOptions
      };
    }
  }, {
    key: 'initialContext',
    value: function initialContext() {
      return {
        out: 0,
        group: 0
      };
    }
  }, {
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      return {
        callOrder: 'SELF_THEN_CHILDREN',
        updateContext: function updateContext(context, properties) {
          return {
            scserver: (0, _server.boot)(_lodash2.default.defaults(properties.options, { log: context.log }))
          };
        }
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        run: function run(context) {
          if (context.scserver) {
            return context.scserver.quit();
          }
        }
      };
    }
  }]);

  return SCServer;
}(_dryadic.Dryad);

exports.default = SCServer;
//# sourceMappingURL=SCServer.js.map