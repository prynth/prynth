{"version":3,"sources":["../../src/dryads/SCServer.js"],"names":["defaultOptions","debug","SCServer","options","out","group","callOrder","updateContext","context","properties","scserver","defaults","log","run","quit"],"mappings":";;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,iBAAiB;AACrBC,SAAO;AADc,CAAvB;;AAIA;;;;;;;;;IAQqBC,Q;;;;;;;;;;;wCACS;AAC1B,aAAO;AACLC,iBAASH;AADJ,OAAP;AAGD;;;qCAEwB;AACvB,aAAO;AACLI,aAAK,CADA;AAELC,eAAO;AAFF,OAAP;AAID;;;oCAEuB;AACtB,aAAO;AACLC,mBAAW,oBADN;AAELC,uBAAe,uBAACC,OAAD,EAAUC,UAAV;AAAA,iBAA0B;AACvCC,sBAAU,kBAAK,iBAAEC,QAAF,CAAWF,WAAWN,OAAtB,EAA+B,EAAES,KAAKJ,QAAQI,GAAf,EAA/B,CAAL;AAD6B,WAA1B;AAAA;AAFV,OAAP;AAMD;;;6BAEgB;AACf,aAAO;AACLC,aAAK,sBAAW;AACd,cAAIL,QAAQE,QAAZ,EAAsB;AACpB,mBAAOF,QAAQE,QAAR,CAAiBI,IAAjB,EAAP;AACD;AACF;AALI,OAAP;AAOD;;;;;;kBA/BkBZ,Q","file":"SCServer.js","sourcesContent":["/* @flow */\nimport { Dryad } from 'dryadic';\nimport { boot } from '../server/server';\nimport _ from 'lodash';\n\nconst defaultOptions = {\n  debug: false\n};\n\n/**\n * Boots a new SuperCollider server (scsynth) making it available for all children as `context.scserver`\n *\n * Always boots a new one, ignoring any possibly already existing one in the parent context.\n *\n * `options` are the command line options supplied to scsynth (note: not all options are passed through yet)\n * see {@link Server}\n */\nexport default class SCServer extends Dryad {\n  defaultProperties(): Object {\n    return {\n      options: defaultOptions\n    };\n  }\n\n  initialContext(): Object {\n    return {\n      out: 0,\n      group: 0\n    };\n  }\n\n  prepareForAdd(): Object {\n    return {\n      callOrder: 'SELF_THEN_CHILDREN',\n      updateContext: (context, properties) => ({\n        scserver: boot(_.defaults(properties.options, { log: context.log }))\n      })\n    };\n  }\n\n  remove(): Object {\n    return {\n      run: context => {\n        if (context.scserver) {\n          return context.scserver.quit();\n        }\n      }\n    };\n  }\n}\n"]}