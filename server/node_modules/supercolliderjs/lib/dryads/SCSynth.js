'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dryadic = require('dryadic');

var _server = require('../server/server');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Boots a new supercollider server (scsynth) making it available for all children.
 *
 * Always boots a new one, ignoring any possibly already existing one in context.
 */

var SCSynth = function (_Dryad) {
  _inherits(SCSynth, _Dryad);

  function SCSynth() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? { debug: false } : arguments[0];
    var children = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    _classCallCheck(this, SCSynth);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(SCSynth).call(this, { options: options }, children));
  }

  _createClass(SCSynth, [{
    key: 'prepareForAdd',
    value: function prepareForAdd() {
      var _this2 = this;

      return {
        scsynth: function scsynth() {
          return (0, _server.boot)(_this2.properties.options);
        },
        group: 0
      };
    }
  }, {
    key: 'remove',
    value: function remove() {
      return {
        run: function run(context) {
          return context.scsynth.quit();
        }
      };
    }
  }]);

  return SCSynth;
}(_dryadic.Dryad);

exports.default = SCSynth;
//# sourceMappingURL=SCSynth.js.map