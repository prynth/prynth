{"version":3,"sources":["../../../src/dryads/middleware/OSCSched.js"],"names":["OSCSched","sendFn","latency","setTimeoutFn","setTimeout","clearTimeoutFn","clearTimeout","getNextFn","undefined","epoch","now","timerId","Error","_schedNext","memo","logicalNow","next","delta","event","time","_send","console","warn","JSON","stringify","_jitSend","msgs"],"mappings":";;;;;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;IAQqBA,Q;;AASnB;;;;;;;;;;;AAWA,oBACEC,MADF,EAKE;AAAA,QAHAC,OAGA,uEAHkB,IAGlB;AAAA,QAFAC,YAEA,uEAFyBC,UAEzB;AAAA,QADAC,cACA,uEAD2BC,YAC3B;;AAAA;;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,UAAL,GAAkBD,YAAlB;AACA,SAAKG,YAAL,GAAoBD,cAApB;;AAEA,SAAKE,SAAL,GAAiB;AAAA,aAAMC,SAAN;AAAA,KAAjB;AACA,SAAKC,KAAL,GAAa,iBAAEC,GAAF,EAAb;AACA,SAAKC,OAAL,GAAeH,SAAf;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;8BAqBUD,S,EAAqBE,K,EAAgB;AAC7C,WAAKF,SAAL,GAAiBA,SAAjB;AACA,UAAI,CAAC,KAAKA,SAAV,EAAqB;AACnB,cAAM,IAAIK,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,UAAIH,KAAJ,EAAW;AACT,aAAKA,KAAL,GAAaA,KAAb;AACD;;AAED,UAAI,CAAC,KAAKA,KAAV,EAAiB;AACf,cAAM,IAAIG,KAAJ,qBAA4B,KAAKH,KAAjC,CAAN;AACD;;AAED,WAAKI,UAAL;AACD;;;+BAEUC,I,EAAeC,U,EAAqB;AAC7C,UAAI,KAAKJ,OAAT,EAAkB;AAChB,aAAKL,YAAL,CAAkB,KAAKK,OAAvB;AACA,aAAKA,OAAL,GAAeH,SAAf;AACD;;AAED,UAAME,MAAM,CAAC,iBAAEA,GAAF,KAAU,KAAKD,KAAhB,IAAyB,IAArC;AACA,UAAI,CAACM,UAAL,EAAiB;AACfA,qBAAaL,GAAb;AACD;;AAED,UAAMM,OAAOF,OACT,KAAKP,SAAL,CAAeQ,UAAf,EAA2BD,IAA3B,CADS,GAET,KAAKP,SAAL,CAAeQ,UAAf,CAFJ;AAGA,UAAIC,IAAJ,EAAU;AACR,YAAMC,QAAQD,KAAKE,KAAL,CAAWC,IAAX,GAAkBT,GAAhC;AACA,YAAIO,SAAS,KAAKf,OAAlB,EAA2B;AACzB,cAAIe,QAAQ,CAAZ,EAAe;AACb,iBAAKG,KAAL,CAAWJ,KAAKE,KAAhB;AACD,WAFD,MAEO;AACL;AACA;AACAG,oBAAQC,IAAR,CACE,8BADF,EAEEC,KAAKC,SAAL,CAAe,EAAEP,YAAF,EAASP,QAAT,EAAcQ,OAAOF,KAAKE,KAA1B,EAAf,CAFF;AAID;;AAED;AACA,eAAKL,UAAL,CAAgBG,KAAKF,IAArB,EAA2BE,KAAKE,KAAL,CAAWC,IAAtC;AACD,SAdD,MAcO;AACL,eAAKM,QAAL,CAAcf,GAAd,EAAmBO,KAAnB,EAA0BD,IAA1B;AACD;AACF;AACF;;AAED;;;;;;;;;;;;6BASSN,G,EAAaO,K,EAAeD,I,EAAc;AAAA;;AACjD,WAAKL,OAAL,GAAe,KAAKP,UAAL,CACb,YAAM;AACJ,cAAKO,OAAL,GAAe,IAAf;AACA,cAAKS,KAAL,CAAWJ,KAAKE,KAAhB;AACA,cAAKL,UAAL,CAAgBG,KAAKF,IAArB,EAA2BE,KAAKE,KAAL,CAAWC,IAAtC;AACD,OALY,EAMb,CAACF,QAAQ,KAAKf,OAAd,IAAyB,IANZ,CAAf;AAQD;;AAED;;;;;;;;0BAKMgB,K,EAAe;AACnB,WAAKjB,MAAL,CAAY,yBAAaiB,MAAMC,IAAnB,EAAyB,KAAKV,KAA9B,CAAZ,EAAkDS,MAAMQ,IAAxD;AACD;;;;;;kBAzIkB1B,Q","file":"OSCSched.js","sourcesContent":["/* @flow */\nimport _ from 'lodash';\nimport { deltaTimeTag } from '../../server/osc/utils';\n\n/**\n * Just in time osc scheduler used by scserver middleware\n * to send OSC messages.\n *\n * This is used by the scserver middleware.\n *\n * It is used by calling `.schedLoop(getNext, epoch)`\n */\nexport default class OSCSched {\n  sendFn: Function;\n  latency: number;\n  setTimeout: Function;\n  clearTimeout: Function;\n  getNextFn: Function;\n  epoch: number;\n  timerId: ?number;\n\n  /**\n   * constructor -\n   *\n   * @param  {Function} sendFn                   Function that sends OSC bundles to the server.\n   *                                             args: (time, msgs)\n   * @param  {number} latency=0.05               Just-in-time latency in seconds.\n   *                                             Bundles are schedule in the javascript process\n   *                                             and sent to the server just before the event time.\n   * @param  {Function} setTimeoutFn=setTimeout  JavaScript setTimeout (injectable for mocking tests)\n   * @param  {Function} clearTimeoutFn=clearTimeout JavaScript setInterval (injectable for mocking tests)\n   */\n  constructor(\n    sendFn: Function,\n    latency: number = 0.05,\n    setTimeoutFn: Function = setTimeout,\n    clearTimeoutFn: Function = clearTimeout\n  ) {\n    this.sendFn = sendFn;\n    this.latency = latency;\n    this.setTimeout = setTimeoutFn;\n    this.clearTimeout = clearTimeoutFn;\n\n    this.getNextFn = () => undefined;\n    this.epoch = _.now();\n    this.timerId = undefined;\n  }\n\n  /**\n   * schedLoop - start a loop that gets the next event and schedules it to be sent\n   *\n   * @param  {Function} getNextFn A function that returns the next event object to send.\n   *\n   *                              Args: now, memo\n   *\n   *                              Returns an object:\n   *\n   *                              {time: secondsSinceEpoch, msgs: [], memo: {}}\n   *\n   *                              If it does not return anything (void) then the loop will end.\n   *\n   *                              memo is an object that the loop function can store\n   *                              state in. eg. list index for an iterator\n   *\n   *                              msgs may be an array of osc messages or a function\n   *                              called at send time that will return an array of osc messages.\n   *\n   * @param  {float} epoch     Javascript timestamp (milliseconds since 1970 UTC)\n   */\n  schedLoop(getNextFn: Function, epoch: ?number) {\n    this.getNextFn = getNextFn;\n    if (!this.getNextFn) {\n      throw new Error('getNextFn is null');\n    }\n\n    if (epoch) {\n      this.epoch = epoch;\n    }\n\n    if (!this.epoch) {\n      throw new Error(`Epoch not set: ${this.epoch}`);\n    }\n\n    this._schedNext();\n  }\n\n  _schedNext(memo: ?Object, logicalNow: ?number) {\n    if (this.timerId) {\n      this.clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    const now = (_.now() - this.epoch) / 1000;\n    if (!logicalNow) {\n      logicalNow = now;\n    }\n\n    const next = memo\n      ? this.getNextFn(logicalNow, memo)\n      : this.getNextFn(logicalNow);\n    if (next) {\n      const delta = next.event.time - now;\n      if (delta <= this.latency) {\n        if (delta > 0) {\n          this._send(next.event);\n        } else {\n          /* eslint no-console: 0 */\n          // TODO: throw EventPastDue and catch that, log it with context.log\n          console.warn(\n            'Event is past due. Skipping.',\n            JSON.stringify({ delta, now, event: next.event })\n          );\n        }\n\n        // this steps by logical time\n        this._schedNext(next.memo, next.event.time);\n      } else {\n        this._jitSend(now, delta, next);\n      }\n    }\n  }\n\n  /**\n   * _jitSend - schedule to send the event just before it should play on the server.\n   *\n   * Cancels any previously scheduled event.\n   *\n   * @param  {float} delta seconds to wait\n   * @param  {Object} event With .msgs .time and optional .memo\n   *                        to be passed to the next call to getNextFn\n   */\n  _jitSend(now: number, delta: number, next: Object) {\n    this.timerId = this.setTimeout(\n      () => {\n        this.timerId = null;\n        this._send(next.event);\n        this._schedNext(next.memo, next.event.time);\n      },\n      (delta - this.latency) * 1000\n    );\n  }\n\n  /**\n   * _send - send the OSC bundle\n   *\n   * @param  {Object} event\n   */\n  _send(event: Object) {\n    this.sendFn(deltaTimeTag(event.time, this.epoch), event.msgs);\n  }\n}\n"]}