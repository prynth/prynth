{"version":3,"sources":["../../src/dryadic/helpers.js"],"names":["dryadic","withContext","makeChildContext","callAndResolve","callAndResolveValues","callAndResolveAll","onPossiblyUnhandledRejection","error","console","Error","fn","requireSCSynth","requireSClang","parentContext","then","context","assign","id","store","deps","options","stdin","echo","debug","server","lang","resolvedDeps","group","extend","keyName","value","isFunction","resolve","object","keys","isUndefined","map","key","i","values","result","forEach","things","thing"],"mappings":"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","file":"helpers.js","sourcesContent":["/* eslint no-console: 0 */\n// deprecated\n\nimport _ from 'underscore';\nimport {bootServer, bootLang} from '../server/internals/side-effects';\nimport {Promise} from 'bluebird';\nimport Store from '../server/internals/Store';\n\n\nPromise.onPossiblyUnhandledRejection((error) => {\n  console.error(error);\n  throw Error(error);\n});\n\n\nexport function dryadic(fn, requireSCSynth=false, requireSClang=false) {\n  return (parentContext) => {\n    return withContext(parentContext, requireSCSynth, requireSClang).then(fn);\n  };\n}\n\n\n/**\n * Create a context, inheriting from parentContext.\n *\n * @param {Object|undefined} parentContext\n * @param {Boolean} requireSCSynth - will boot server if required\n * @param {Boolean} requireSClang - will boot language interpreter if required\n */\nexport function withContext(parentContext, requireSCSynth=false, requireSClang=false) {\n  var context = _.assign({id: '0'}, parentContext);\n  if (!context.store) {\n    context.store = new Store();\n  }\n\n  var deps = {};\n  const options = {\n    stdin: false,\n    echo: true,  // that will make it post OSC send/recv\n    debug: false  // post debug messages in code, including stdout off lang/synth\n    // langPort\n  };\n  // deprec, but will replace this whole system soon\n  if (requireSCSynth && !context.server) {\n    deps.server = () => bootServer(options, context.store);\n  }\n  if (requireSClang && !context.lang) {\n    deps.lang = () => bootLang(options, context.store);\n  }\n  return callAndResolveValues(deps, context).then((resolvedDeps) => {\n    if (resolvedDeps.server) {\n      // set root node\n      resolvedDeps.group = 0;\n    }\n    return _.extend(context, resolvedDeps);\n  });\n}\n\n\nexport function makeChildContext(parentContext, keyName) {\n  return _.assign({}, parentContext, {id: parentContext.id + '.' + keyName});\n}\n\n\n/**\n * If value is a function then call it,\n * if function returns a Promise then resolve it.\n */\nexport function callAndResolve(value, context, keyName) {\n  if (_.isFunction(value)) {\n    value = value(makeChildContext(context, keyName || '_'));\n  }\n  return Promise.resolve(value);\n}\n\n\n/**\n * Call and resolve each of the values of an Object.\n *\n * @param {Object} object - whose values will be called and resolved\n * @param {Object} context - which is passed into any Functions\n * @returns {Promise} - resolves to an Object with values mapped to the resolved results\n */\nexport function callAndResolveValues(object, context) {\n  const keys = _.keys(object);\n  if (_.isUndefined(context)) {\n    throw new Error('Missing context for callAndResolveValues');\n  }\n  return Promise.map(keys, (key, i) => {\n    return callAndResolve(object[key], context, i);\n  }).then((values) => {\n    var result = {};\n    keys.forEach((key, i) => {\n      result[key] = values[i];\n    });\n    return result;\n  });\n}\n\n\n/**\n * Call and resolve each of the items in a list\n * @param {Array} things\n * @param {Object} parentContext\n * @returns {Promise} - resolves to an Array with the resolved things\n */\nexport function callAndResolveAll(things, parentContext) {\n  return Promise.map(things, (thing, i) => {\n    return callAndResolve(thing, parentContext, i);\n  });\n}\n"]}