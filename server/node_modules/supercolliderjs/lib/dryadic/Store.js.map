{"version":3,"sources":["../../src/dryadic/Store.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAUqB;AAEnB,WAFmB,KAEnB,GAAc;0BAFK,OAEL;;AACZ,SAAK,KAAL,GAAa,oBAAU,GAAV,EAAb,CADY;GAAd;;eAFmB;;0BAMb,MAAM,aAAa;AACvB,aAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,EAAuB,WAAvB,CAAP,CADuB;;;;;;;;;;gCAQb,MAAM,IAAI;AACpB,WAAK,KAAL,GAAa,KAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,EAA0B,oBAAU,GAAV,EAA1B,EAA2C,EAA3C,CAAb,CADoB;;;;;;;;;;;;;;yCAYD,MAAM,IAAI;AAC7B,UAAI,MAAJ,EAAY,QAAZ,CAD6B;;gBAER,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,EAAuB,oBAAU,GAAV,EAAvB,CAAH,EAFQ;;;;AAE5B,uBAF4B;AAEpB,yBAFoB;;AAG7B,WAAK,KAAL,GAAa,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,EAAuB,QAAvB,CAAb,CAH6B;AAI7B,aAAO,MAAP,CAJ6B;;;;SA1BZ","file":"Store.js","sourcesContent":["\n\nimport Immutable from 'immutable';\n\n/**\n * A store that holds a state tree.\n *\n * Holds an Immutable.Map and offers functions to mutate sub-states in that tree,\n * and stores the new state.\n */\nexport default class Store {\n\n  constructor() {\n    this.state = Immutable.Map();\n  }\n\n  getIn(keys, notSetValue) {\n    return this.state.getIn(keys, notSetValue);\n  }\n\n  /**\n   * Fetch the object at keys\n   * pass it to the function which mutates it and returns new sub state.\n   */\n  mutateState(keys, fn) {\n    this.state = this.state.updateIn(keys, Immutable.Map(), fn);\n  }\n\n  /**\n   * Fetch one part of the state,\n   * mutate it with the callback,\n   * which returns result, subState.\n   * Save the subState back into state and return the result.\n   *\n   * @returns {any} result\n   */\n  mutateStateAndReturn(keys, fn) {\n    var result, subState;\n    [result, subState] = fn(this.state.getIn(keys, Immutable.Map()));\n    this.state = this.state.setIn(keys, subState);\n    return result;\n  }\n}\n"]}