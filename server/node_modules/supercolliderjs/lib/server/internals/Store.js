'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = require('immutable');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A Store that holds a state tree. This is used by ServerState as
 * its immutable memory storage.
 *
 * Holds an Immutable.Map
 * and offers functions to mutate sub-states
 * in that tree, and stores the new state.
 *
 * https://facebook.github.io/immutable-js/docs/#/Map
 */
var Store = function () {
  function Store() {
    _classCallCheck(this, Store);

    this.state = (0, _immutable.Map)();
  }

  _createClass(Store, [{
    key: 'getIn',
    value: function getIn(keys, notSetValue) {
      return this.state.getIn(keys, notSetValue);
    }

    /**
     * Fetch the object at keys
     * pass it to the function which mutates it and returns new sub state.
     */

  }, {
    key: 'mutateState',
    value: function mutateState(keys, fn) {
      this.state = this.state.updateIn(keys, (0, _immutable.Map)(), fn);
    }

    /**
     * Fetch one part of the state,
     * mutate it with the callback,
     * which returns result, subState.
     * Save the subState back into state and return the result.
     *
     * @returns {any} result
     */

  }, {
    key: 'mutateStateAndReturn',
    value: function mutateStateAndReturn(keys, fn) {
      var result, subState;

      var _fn = fn(this.state.getIn(keys, (0, _immutable.Map)()));

      var _fn2 = _slicedToArray(_fn, 2);

      result = _fn2[0];
      subState = _fn2[1];

      this.state = this.state.setIn(keys, subState);
      return result;
    }
  }]);

  return Store;
}();

exports.default = Store;
//# sourceMappingURL=Store.js.map