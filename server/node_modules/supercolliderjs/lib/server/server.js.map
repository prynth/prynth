{"version":3,"sources":["../../src/server/server.js"],"names":["boot","dgram","osc","Server","options","stateStore","defaults","address","host","port","process","isRunning","send","receive","stdout","processEvents","_initLogger","_initEmitter","_initSender","_serverObservers","state","log","debug","echo","subscribe","out","JSON","stringify","event","payload","k","v","isArray","reduce","memo","n","toString","sendosc","rcvosc","o","err","match","stderr","dbug","emit","msg","on","buf","toBuffer","length","serverPort","bundle","flagMap","numAudioBusChannels","numControlBusChannels","numInputBusChannels","numOutputBusChannels","numBuffers","maxNodes","maxSynthDefs","blockSize","hardwareBufferSize","memSize","numRGens","numWireBufs","sampleRate","loadDefs","inputStreamsEnabled","outputStreamsEnabled","device","verbosity","zeroConf","restrictedPath","ugenPluginsPath","password","maxLogins","protocol","commandLineArgs","opts","Error","forEach","option","argName","flag","push","map","String","resolve","reject","_spawnProcess","e","fromEvent","data","onNext","onError","stdoutBuffer","takeWhile","text","setTimeout","execPath","scsynth","args","logMsg","join","cwd","detached","env","pid","error","killChild","kill","code","signal","disconnect","udpListening","createSocket","oscMessage","fromBuffer","msgbuf","oscError","callAndResponse","then","close","concat","matchArgs","timeout","subscription","command","slice","isEqual","dispose","tid","clearTimeout","promise","oscOnce","response","call","store","undefined","s","connect"],"mappings":"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","file":"server.js","sourcesContent":["/**\n * @flow\n */\n\nimport EventEmitter from 'events';\nimport { Observable, Subject } from 'rx';\nimport { spawn } from 'child_process';\nimport _ from 'lodash';\nimport * as dgram from 'dgram';\nimport * as osc from 'osc-min';\nimport { Promise } from 'bluebird';\n\nimport SendOSC from './internals/SendOSC';\nimport { parseMessage } from './osc/utils';\nimport { notify } from './osc/msg';\nimport resolveOptions from '../utils/resolveOptions';\nimport defaultOptions from './default-server-options';\nimport Logger from '../utils/logger';\nimport ServerState from './ServerState';\n\nimport type { CallAndResponseType, MsgType, ServerOptions } from '../Types';\n\n/**\n  * Server - starts a SuperCollider synthesis server (scsynth)\n  * as a child process. Enables OSC communication, subscribe to process events,\n  * send call and response OSC messages.\n  *\n  * SuperCollider comes with an executable called scsynth\n  * which can be communicated with via OSC.\n  *\n  * To send raw OSC messages:\n  * ```js\n  * server.send.msg('/s_new', ['defName', 440])\n  * ```\n  *\n  * Raw OSC responses can be subscribed to:\n  * ```js\n  * server.receive.subscribe(function(msg) {\n  *   console.log(msg);\n  * });\n  * ```\n */\nexport default class Server extends EventEmitter {\n  /**\n   * ```js\n   * host: string,\n   * serverPort: string,\n   * protocol: string,\n   * commandLineOptions: Array<string>,\n   * numPrivateAudioBusChannels: number,\n   * numAudioBusChannels: number,\n   * numControlBusChannels: number,\n   * numInputBusChannels: number,\n   * numOutputBusChannels: number,\n   * numBuffers: number,\n   * maxNodes: number,\n   * maxSynthDefs: number,\n   * blockSize: number,\n   * hardwareBufferSize: number,\n   * memSize: number,\n   * numRGens: number,\n   * numWireBufs: number,\n   * sampleRate: number,\n   * loadDefs: boolean,\n   * inputStreamsEnabled: boolean,\n   * outputStreamsEnabled: boolean,\n   * device: string,\n   * verbosity: number,\n   * zeroConf: boolean,\n   * restrictedPath: string,\n   * ugenPluginsPath: string,\n   * initialNodeID: number,\n   * remoteControlVolume: boolean,\n   * memoryLocking: boolean,\n   * threads: boolean,\n   * useSystemClock: boolean,\n   * // Environment variables to set for the server process\n   * // eg. SC_JACK_DEFAULT_INPUTS: \"system:capture_1,system:capture_2\"\n   * env: Object\n   * ```\n   */\n  options: ServerOptions;\n\n  address: string;\n\n  /**\n   * The process id that nodejs spawn() returns\n   * @private\n   */\n  process: any;\n\n  isRunning: boolean;\n\n  /**\n   * Supports `server.send.msg()` and `server.send.bundle()`\n   *\n   * You can also subscribe to it and get the OSC messages\n   * and bundles that are being sent echoed to you for\n   * debugging purposes.\n   */\n  send: SendOSC;\n\n  /**\n   * A subscribeable stream of OSC events received.\n   */\n  receive: Subject;\n\n  /**\n   * A subscribeable stream of STDOUT printed by the scsynth process.\n   */\n  stdout: Subject;\n\n  /**\n   * A subscribeable stream of events related to the scsynth process.\n   * Used internally.\n   */\n  processEvents: Subject;\n\n  /**\n   * Holds the mutable server state\n   * including allocators and the node state watcher.\n   * If a parent stateStore is supplied then it will store within that.\n   */\n  state: ServerState;\n\n  /**\n   * The logger used to print messages to the console.\n   */\n  log: Logger;\n\n  /**\n   * Node Socket. see /declarations\n   * @private\n   */\n  osc: Socket;\n\n  /* @private */\n  _serverObservers: Object;\n\n  /**\n   * @param options - command line options for scsynth\n   * @param stateStore - optional parent Store for allocators and node watchers\n   */\n  constructor(options: ServerOptions = {}, stateStore: any = null) {\n    super();\n    this.options = _.defaults(options, defaultOptions);\n    this.address = this.options.host + ':' + this.options.port;\n    this.process = null;\n    this.isRunning = false;\n\n    this.send = new SendOSC();\n    this.receive = new Subject();\n    this.stdout = new Subject();\n    this.processEvents = new Subject();\n\n    this._initLogger();\n    this._initEmitter();\n    this._initSender();\n\n    this._serverObservers = {};\n\n    this.state = new ServerState(this, stateStore);\n  }\n\n  /* @private */\n  _initLogger() {\n    this.log = new Logger(\n      this.options.debug,\n      this.options.echo,\n      this.options.log\n    );\n    this.send.subscribe(event => {\n      // will be a type:msg or type:bundle\n      // if args has a type: Buffer in it then compress that\n      var out = JSON.stringify(\n        event.payload || event,\n        (k: string, v: any): any => {\n          if (k === 'data' && _.isArray(v)) {\n            return _.reduce(\n              v,\n              (memo: string, n: number): string => memo + n.toString(16),\n              ''\n            );\n          }\n          return v;\n        },\n        2\n      );\n      if (!this.osc) {\n        out = '[NOT CONNECTED] ' + out;\n      }\n      this.log.sendosc(out);\n    });\n    this.receive.subscribe(\n      o => {\n        this.log.rcvosc(o);\n        // log all /fail responses as error\n        if (o[0] === '/fail') {\n          this.log.err(o);\n        }\n      },\n      (err: Error) => this.log.err(err)\n    );\n    this.stdout.subscribe(\n      o => {\n        // scsynth doesn't send ERROR messages to stderr\n        // if ERROR or FAILURE in output then redirect as though it did\n        // so it shows up in logs\n        if (o.match(/ERROR|FAILURE/)) {\n          this.log.stderr(o);\n        } else {\n          this.log.stdout(o);\n        }\n      },\n      (err: Error) => this.log.stderr(err)\n    );\n    this.processEvents.subscribe(\n      o => this.log.dbug(o),\n      (err: Error) => this.log.err(err)\n    );\n  }\n\n  /**\n    * Emit signals are deprecated and will be removed in 1.0\n    *\n    * Instead use ```server.{channel}.subscribe((event) => { })```\n    *\n    * Event Emitter emits:\n    *    'out'   - stdout text from the server\n    *    'error' - stderr text from the server or OSC error messages\n    *    'exit'  - when server exits\n    *    'close' - when server closes the UDP connection\n    *    'OSC'   - OSC responses from the server\n    *\n    * @private\n   */\n  _initEmitter() {\n    this.receive.subscribe(msg => {\n      this.emit('OSC', msg);\n    });\n    this.processEvents.subscribe(() => {}, err => this.emit('exit', err));\n    this.stdout.subscribe(\n      out => this.emit('out', out),\n      out => this.emit('stderr', out)\n    );\n  }\n\n  _initSender() {\n    this.send.on('msg', msg => {\n      if (this.osc) {\n        var buf = osc.toBuffer(msg);\n        this.osc.send(\n          buf,\n          0,\n          buf.length,\n          this.options.serverPort,\n          this.options.host\n        );\n      }\n    });\n    this.send.on('bundle', bundle => {\n      if (this.osc) {\n        var buf = osc.toBuffer(bundle);\n        this.osc.send(\n          buf,\n          0,\n          buf.length,\n          this.options.serverPort,\n          this.options.host\n        );\n      }\n    });\n  }\n\n  /**\n   * Format the command line args for scsynth.\n   *\n   * The args built using the options supplied to `Server(options)` or `sc.server.boot(options)`\n   *\n   * ```js\n   *  sc.server.boot({device: 'Soundflower (2ch)'});\n   *  sc.server.boot({serverPort: '11211'});\n   *  ```\n   *\n   * Supported arguments:\n   *\n   *     numAudioBusChannels\n   *     numControlBusChannels\n   *     numInputBusChannels\n   *     numOutputBusChannels\n   *     numBuffers\n   *     maxNodes\n   *     maxSynthDefs\n   *     blockSize\n   *     hardwareBufferSize\n   *     memSize\n   *     numRGens - max random generators\n   *     numWireBufs\n   *     sampleRate\n   *     loadDefs - (0 or 1)\n   *     inputStreamsEnabled - \"01100\" means only the 2nd and 3rd input streams\n   *                          on the device will be enabled\n   *     outputStreamsEnabled,\n   *     device - name of hardware device\n   *            or array of names for [inputDevice, outputDevice]\n   *     verbosity: 0 1 2\n   *     restrictedPath\n   *     ugenPluginsPath\n   *     password - for TCP logins open to the internet\n   *     maxLogins - max users that may login\n   *\n   * Arbitrary arguments can be passed in as options.commandLineArgs\n   * which is an array of strings that will be space-concatenated\n   * and correctly shell-escaped.\n   *\n   * Host is currently ignored: it is always local on the same machine.\n   *\n   * See ServerOptions documentation: http://danielnouri.org/docs/SuperColliderHelp/ServerArchitecture/ServerOptions.html\n   *\n   * @return {Array<string>} List of non-default args\n   */\n  args(): Array<string> {\n    const flagMap = {\n      numAudioBusChannels: '-a',\n      numControlBusChannels: '-c',\n      numInputBusChannels: '-i',\n      numOutputBusChannels: '-o',\n      numBuffers: '-b',\n      maxNodes: '-n',\n      maxSynthDefs: '-d',\n      blockSize: '-z',\n      hardwareBufferSize: '-Z',\n      memSize: '-m',\n      numRGens: '-r',\n      numWireBufs: '-w',\n      sampleRate: '-S',\n      loadDefs: '-D', // boolean\n      inputStreamsEnabled: '-I',\n      outputStreamsEnabled: '-O',\n      device: '-H',\n      verbosity: '-V',\n      zeroConf: '-R',\n      restrictedPath: '-P',\n      ugenPluginsPath: '-U',\n      password: '-p',\n      maxLogins: '-l'\n    };\n\n    const {\n      serverPort,\n      protocol,\n      commandLineArgs\n    } = this.options;\n\n    const opts = ['-u', serverPort];\n\n    if (protocol === 'tcp') {\n      throw new Error('Only udp sockets are supported at this time.');\n    }\n\n    _.forEach(this.options, (option, argName) => {\n      let flag = flagMap[argName];\n      if (flag) {\n        if (option !== defaultOptions[argName]) {\n          opts.push(flag);\n          if (_.isArray(option)) {\n            opts.push(...option);\n          } else {\n            opts.push(option);\n          }\n        }\n      }\n    });\n\n    if (_.isArray(commandLineArgs)) {\n      opts.push(...commandLineArgs);\n    }\n\n    return opts.map(String);\n  }\n\n  /**\n   * Boot the server\n   *\n   * Start scsynth and establish a pipe connection to receive stdout and stderr.\n   *\n   * Does not connect, so UDP is not yet ready for OSC communication.\n   *\n   * listen for system events and emit: exit out error\n   *\n   * @returns {Promise}\n   */\n  boot() {\n    return new Promise((resolve, reject) => {\n      this.isRunning = false;\n\n      try {\n        this._spawnProcess();\n      } catch (e) {\n        reject(e);\n      }\n\n      this._serverObservers.stdout = Observable.fromEvent(\n        this.process.stdout,\n        'data',\n        data => String(data)\n      );\n      this._serverObservers.stdout.subscribe(e => this.stdout.onNext(e));\n      this._serverObservers.stderr = Observable.fromEvent(\n        this.process.stderr,\n        'data'\n      ).subscribe(out => {\n        // just pipe it into the stdout object's error stream\n        this.stdout.onError(out);\n      });\n\n      // Keep a local buffer of the stdout text because on Windows it can be split into odd chunks.\n      var stdoutBuffer = '';\n      // watch for ready message\n      this._serverObservers.stdout\n        .takeWhile((text: string): boolean => {\n          stdoutBuffer += text;\n          return !stdoutBuffer.match(/SuperCollider 3 server ready/);\n        })\n        .subscribe(() => {}, this.log.err, () => {\n          // onComplete\n          stdoutBuffer = '';\n          this.isRunning = true;\n          resolve(this);\n        });\n\n      setTimeout(\n        () => {\n          if (!this.isRunning) {\n            reject(new Error('Server failed to start in 3000ms'));\n          }\n        },\n        3000\n      );\n    });\n  }\n\n  _spawnProcess() {\n    var execPath = this.options.scsynth, args = this.args();\n\n    const logMsg = 'Start process: ' + execPath + ' ' + args.join(' ');\n    this.processEvents.onNext(logMsg);\n\n    const options = {\n      cwd: this.options.cwd,\n      detached: false,\n      // Environment variables to set for server process\n      // eg. SC_JACK_DEFAULT_INPUTS: \"system:capture_1,system:capture_2\"\n      env: this.options.env || {}\n    };\n\n    this.process = spawn(execPath, args, options);\n\n    if (!this.process.pid) {\n      let error = `Failed to boot ${execPath}`;\n      this.processEvents.onError(error);\n      throw new Error(error);\n    }\n\n    this.processEvents.onNext('pid: ' + this.process.pid);\n\n    // when this parent process dies, kill child process\n    let killChild = () => {\n      if (this.process) {\n        this.process.kill('SIGTERM');\n        this.process = null;\n      }\n    };\n\n    process.on('exit', killChild);\n\n    this.process.on('error', err => {\n      this.processEvents.onError(err);\n      this.isRunning = false;\n      // this.disconnect()\n    });\n    this.process.on('close', (code, signal) => {\n      this.processEvents.onError(\n        'Server closed. Exit code: ' + code + ' signal: ' + signal\n      );\n      this.isRunning = false;\n      // this.disconnect()\n    });\n    this.process.on('exit', (code, signal) => {\n      this.processEvents.onError(\n        'Server exited. Exit code: ' + code + ' signal: ' + signal\n      );\n      this.isRunning = false;\n      // this.disconnect()\n    });\n  }\n\n  /**\n   * quit\n   *\n   * kill scsynth process\n   * TODO: should send /quit first for shutting files\n   */\n  quit() {\n    if (this.process) {\n      this.disconnect();\n      this.process.kill('SIGTERM');\n      this.process = null;\n    }\n  }\n\n  /**\n   * Establish connection to scsynth via OSC socket\n   *\n   * @returns {Promise} - resolves when udp responds\n   */\n  connect(): Promise<Server> {\n    return new Promise((resolve, reject) => {\n      const udpListening = 'udp is listening';\n\n      this.osc = dgram.createSocket('udp4');\n\n      this.osc.on('listening', () => {\n        this.processEvents.onNext(udpListening);\n      });\n      this.osc.on('close', e => {\n        this.processEvents.onNext('udp closed: ' + e);\n        this.disconnect();\n      });\n\n      // pipe events to this.receive\n      this._serverObservers.oscMessage = Observable.fromEvent(\n        this.osc,\n        'message',\n        msgbuf => osc.fromBuffer(msgbuf)\n      );\n      this._serverObservers.oscMessage.subscribe(e =>\n        this.receive.onNext(parseMessage(e)));\n\n      this._serverObservers.oscError = Observable.fromEvent(this.osc, 'error');\n      this._serverObservers.oscError.subscribe(e => {\n        this.receive.onError(e);\n        reject(e);\n      });\n\n      // this will trigger a response from server\n      // which will cause a udp listening event.\n      // After server responds then we are truly connected.\n      this.callAndResponse(notify()).then(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @private\n   */\n  disconnect() {\n    if (this.osc) {\n      this.osc.close();\n      delete this.osc;\n    }\n\n    // TODO: its the subscriptions that need to be disposed, these are the Observables\n    // this._serverObservers.forEach((obs) => obs.dispose());\n    // for (var key in this._serverObservers) {\n    //   console.log(key, this._serverObservers[key], this._serverObservers[key].dispose);\n    //   this._serverObservers[key].dispose();\n    // }\n    this._serverObservers = {};\n  }\n\n  /**\n   * Send OSC message to server\n   *\n   * @deprecated - use: `server.send.msg([address, arg1, arg2])``\n   * @param {String} address - OSC command string eg. `/s_new` which is referred to in OSC as the address\n   * @param {Array} args\n   */\n  sendMsg(address: string, args: Array<string | number>) {\n    this.send.msg([address].concat(args));\n  }\n\n  /**\n   * Wait for a single OSC response from server matching the supplied args.\n   *\n   * This is for getting responses async from the server.\n   * The first part of the message matches the expected args,\n   * and the rest of the message contains the response.\n   *\n   * The Promise fullfills with any remaining payload including in the message.\n   *\n   * @param {Array} matchArgs - osc message to match as a single array: `[/done, /notify]`\n   * @param {int} timeout - in milliseconds before the Promise is rejected\n   * @returns {Promise}\n   */\n  oscOnce(matchArgs: Array<string | number>, timeout: number = 4000): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      var subscription = this.receive.subscribe(msg => {\n        var command = msg.slice(0, matchArgs.length);\n        if (_.isEqual(command, matchArgs)) {\n          var payload = msg.slice(matchArgs.length);\n          resolve(payload);\n          dispose();\n        }\n      });\n\n      // if timeout then reject and dispose\n      var tid = setTimeout(\n        () => {\n          dispose();\n          reject(\n            new Error(\n              `Timed out waiting for OSC response: ${JSON.stringify(matchArgs)}`\n            )\n          );\n        },\n        timeout\n      );\n\n      function dispose() {\n        subscription.dispose();\n        clearTimeout(tid);\n      }\n    });\n  }\n\n  /**\n   * Send an OSC command that expects a reply from the server,\n   * returning a `Promise` that resolves with the response.\n   *\n   * This is for getting responses async from the server.\n   * The first part of the message matches the expected args,\n   * and the rest of the message contains the response.\n   *\n   * @param {Object} callAndResponse\n   *\n   *  ```js\n   *  {\n   *      call: ['/some_osc_msg', 1, 2],\n   *      response: ['/expected_osc_response', 1, 2, 3]\n   *  }```\n   * @param {int} timeout - in milliseconds before rejecting the `Promise`\n   * @returns {Promise} - resolves with all values the server responsed with after the matched response.\n   */\n  callAndResponse(\n    callAndResponse: CallAndResponseType,\n    timeout: number = 4000\n  ): Promise<MsgType> {\n    var promise = this.oscOnce(callAndResponse.response, timeout);\n    this.send.msg(callAndResponse.call);\n    return promise;\n  }\n}\n\n/**\n * Boot a server with options and connect\n *\n * @param {Object} options - command line options for server\n * @param {Store} store - optional external Store to hold Server state\n * @returns {Promise} - resolves with the Server\n */\nexport function boot(\n  options: ServerOptions = {},\n  store: any = null\n): Promise<Server> {\n  return resolveOptions(\n    undefined,\n    options\n  ).then((opts: ServerOptions): Server => {\n    const s: Server = new Server(opts, store);\n    return s.boot().then((): Server => s.connect()).then((): Server => s);\n  });\n}\n"]}