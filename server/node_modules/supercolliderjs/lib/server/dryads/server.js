'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Server = undefined;

var _Dryad2 = require('../../dryadic/Dryad');

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultOptions = {
  stdin: false,
  echo: true, // that will make it post OSC send/recv
  debug: false
};

/**
 * Boots a new supercollider server making it available for all children.
 *
 * Always boots a new one, ignoring any possibly already existing one in context.
 */

var Server = exports.Server = (function (_Dryad) {
  _inherits(Server, _Dryad);

  function Server() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var children = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    _classCallCheck(this, Server);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Server).call(this, { options: options }, children));
  }

  _createClass(Server, [{
    key: 'mount',
    value: function mount() /*context*/{
      var options = _underscore2.default.defaults(this.properties.options, defaultOptions);
      var server = new Server(options);

      // should
      return {
        context: {
          server: server
        },
        state: {
          server: server
        },
        completed: function completed() {
          return server.boot();
        }
      };
    }
  }, {
    key: 'unmount',
    value: function unmount(context, state) {
      return {
        completed: function completed() {
          return state.server.quit();
        }
      };
    }
  }]);

  return Server;
})(_Dryad2.Dryad);
//# sourceMappingURL=Server.js.map