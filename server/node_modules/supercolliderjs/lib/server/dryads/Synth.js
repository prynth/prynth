'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Synth = undefined;

var _Dryad2 = require('../../dryadic/Dryad');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Synth = exports.Synth = (function (_Dryad) {
  _inherits(Synth, _Dryad);

  /**
  * @param {String|Function} synthDefName - the name of the synthDef
  *     or a function that can be called and resolve to a synthDef name
  * @param {Object} args - Arguments may be int|float|string
  *     If an argument is a function then it will be called.
  *     If that returns a Promise then it will be resolved and the result of that
  *     is the final value passed to the Synth.
  */

  function Synth(synthDefName) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Synth);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Synth).call(this));

    _this.properties = {
      synthDefName: synthDefName,
      args: args
    };
    return _this;
  }

  _createClass(Synth, [{
    key: 'resolve',
    value: function resolve() /*context*/{
      // synthDef should compile to bytes, be in desc lib
      // may fail
      // maybe always resolve all properties
      return {
        defName: this.properties.synthDefName,
        args: this.properties.args // not play, just resolve if they need to load things
      };
    }
  }, {
    key: 'spawn',
    value: function spawn(context, resolved) {
      // synthDef can build into the current bundle
      // but it should be compiled in resolved
      var nodeID = nextNodeID(context);
      context.nodeID = nodeID;
      var oscMessage = msg.synthNew(resolved.defName, nodeID, msg.AddActions.TAIL, context.group, resolved.args);
      sendMsg(context, oscMessage);

      // if bundling than this will resolve after everything is sent
      return whenNodeGo(context.server, context.id, nodeID).then(function (nodeID) {
        updateNodeState(context.server, nodeID, { synthDef: resolvedDefName });
        return nodeID;
      });
    }

    // subtree might contain items in args
    // that need to spawn first

  }]);

  return Synth;
})(_Dryad2.Dryad);
//# sourceMappingURL=Synth.js.map