'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Group = undefined;

var _Dryad2 = require('../../dryadic/Dryad');

var _msg = require('../osc/msg.js');

var _sideEffects = require('./internals/side-effects');

var _nodeWatcher = require('./node-watcher');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Group = exports.Group = (function (_Dryad) {
  _inherits(Group, _Dryad);

  function Group() {
    var children = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    _classCallCheck(this, Group);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Group).call(this, {}, children));
  }

  _createClass(Group, [{
    key: 'mount',
    value: function mount(context) {
      var nodeID = (0, _sideEffects.nextNodeID)(context);
      return {
        osc: {
          scsynth: (0, _msg.groupNew)(nodeID, _msg.AddActions.TAIL, context.group)
        },
        state: {
          nodeID: nodeID
        },
        completed: function completed() {
          return (0, _nodeWatcher.whenNodeGo)(context.server, context.id, nodeID);
        }
      };
    }
  }, {
    key: 'unmount',
    value: function unmount(context, state) {
      return {
        osc: {
          scsynth: (0, _msg.nodeFree)(state.nodeID)
        },
        completed: function completed() {
          return (0, _nodeWatcher.whenNodeEnd)(context.server, context.id, state.nodeID);
        }
      };
    }
  }]);

  return Group;
})(_Dryad2.Dryad);
//# sourceMappingURL=Group.js.map