'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _dryadicDryad = require('../../dryadic/Dryad');

var _internalsSideEffects = require('../internals/side-effects');

var StateKeys = {
  SYNTH_DEFS: 'SYNTH_DEFS'
};

/**
 */

var Synth = (function (_Dryad) {
  _inherits(Synth, _Dryad);

  /**
  * @param {String|Function} synthDefName - the name of the synthDef
  *     or a function that can be called and resolve to a synthDef name
  * @param {Object} args - Arguments may be int|float|string
       If an argument is a function then it will be called.
       If that returns a Promise then it will be resolved and the result of that
       is the final value passed to the Synth.
  */

  function Synth(synthDefName) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Synth);

    _get(Object.getPrototypeOf(Synth.prototype), 'constructor', this).call(this);
    this.properties = {
      synthDefName: synthDefName,
      args: args
    };
  }

  _createClass(Synth, [{
    key: 'resolve',
    value: function resolve(context) {
      // synthDef should compile to bytes, be in desc lib
      // may fail
      // maybe always resolve all properties
      return {
        defName: this.properties.synthDefName,
        args: this.properties.args // not play, just resolve if they need to load things
      };
    }
  }, {
    key: 'spawn',
    value: function spawn(context, resolved) {
      // synthDef can build into the current bundle
      // but it should be compiled in resolved
      var nodeID = nextNodeID(context);
      context.nodeID = nodeID;
      var oscMessage = msg.synthNew(resolved.defName, nodeID, msg.AddActions.TAIL, context.group, resolved.args);
      sendMsg(context, oscMessage);

      // if bundling than this will resolve after everything is sent
      return whenNodeGo(context.server, context.id, nodeID).then(function (nodeID) {
        updateNodeState(context.server, nodeID, { synthDef: resolvedDefName });
        return nodeID;
      });
    }

    // subtree might contain items in args
    // that need to spawn first
  }]);

  return Synth;
})(_dryadicDryad.Dryad);

exports.Synth = Synth;

var Group = (function (_Dryad2) {
  _inherits(Group, _Dryad2);

  function Group() {
    var children = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

    _classCallCheck(this, Group);

    _get(Object.getPrototypeOf(Group.prototype), 'constructor', this).call(this);
    this.children = children;
  }

  _createClass(Group, [{
    key: 'resolve',
    value: function resolve(context) {
      // need child context for each
      return {
        children: this.children
      };
    }
  }, {
    key: 'spawn',
    value: function spawn(context, resolved) {
      var nodeID = nextNodeID(context);
      var message = msg.groupNew(nodeID, msg.AddActions.TAIL, context.group);
      sendMsg(context, message);
      return whenNodeGo(context.server, context.id, nodeID).then(function () {
        // spawn children with child context
        return callAndResolveAll(children, context);
      });
    }
  }]);

  return Group;
})(_dryadicDryad.Dryad);

exports.Group = Group;
//# sourceMappingURL=nodes.js.map