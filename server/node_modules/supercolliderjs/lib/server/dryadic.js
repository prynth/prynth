'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.dryadic = dryadic;
exports.withContext = withContext;
exports.makeChildContext = makeChildContext;
exports.callAndResolve = callAndResolve;
exports.callAndResolveValues = callAndResolveValues;
exports.callAndResolveAll = callAndResolveAll;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _internalsSideEffects = require('./internals/side-effects');

var _bluebird = require('bluebird');

_bluebird.Promise.onPossiblyUnhandledRejection(function (error, promise) {
  console.error(error);
  throw Error(error);
});

function dryadic(fn) {
  var requireSCSynth = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var requireSClang = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  return function (parentContext) {
    return withContext(parentContext, requireSCSynth, requireSClang).then(fn);
  };
}

/**
 * Create a context, inheriting from parentContext.
 *
 * @param {Object|undefined} parentContext
 * @param {Boolean} requireSCSynth - will boot server if required
 * @param {Boolean} requireSClang - will boot language interpreter if required
 */

function withContext(parentContext) {
  var requireSCSynth = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var requireSClang = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

  var context = _underscore2['default'].assign({ id: '0' }, parentContext);

  var deps = {};
  if (requireSCSynth && !context.server) {
    deps.server = _internalsSideEffects.bootServer;
  }
  if (requireSClang && !context.lang) {
    deps.lang = function () {
      var options = {
        stdin: false,
        echo: false,
        debug: false
        // langPort
      };
      return (0, _internalsSideEffects.bootLang)(options);
    };
  }

  var promise = callAndResolveValues(deps, context).then(function (resolvedDeps) {
    if (resolvedDeps.server) {
      // set root node
      resolvedDeps.group = 0;
    }
    return _underscore2['default'].extend(context, resolvedDeps);
  });
  // Top level call, raise all exceptions
  if (!parentContext) {
    return promise.then(function (ok) {
      return ok;
    }, function (error) {
      return console.error(error);
    });
  }
  return promise;
}

function makeChildContext(parentContext, keyName) {
  return _underscore2['default'].assign({}, parentContext, { id: parentContext.id + '.' + keyName });
}

/**
 * If value is a function then call it,
 * if function returns a Promise then resolve it.
 */

function callAndResolve(value, context, keyName) {
  if (_underscore2['default'].isFunction(value)) {
    value = value(makeChildContext(context, keyName || '_'));
  }
  return _bluebird.Promise.resolve(value);
}

/**
 * Call and resolve each of the values of an Object.
 *
 * @param {Object} object - whose values will be called and resolved
 * @param {Object} context - which is passed into any Functions
 * @returns {Promise} - resolves to an Object with values mapped to the resolved results
 */

function callAndResolveValues(object, context) {
  var keys = _underscore2['default'].keys(object);
  if (_underscore2['default'].isUndefined(context)) {
    throw new Error('Missing context for callAndResolveValues');
  }
  return _bluebird.Promise.map(keys, function (key, i) {
    return callAndResolve(object[key], context, i);
  }).then(function (values) {
    var result = {};
    keys.forEach(function (key, i) {
      result[key] = values[i];
    });
    return result;
  });
}

/**
 * Call and resolve each of the items in a list
 * @param {Array} things
 * @param {Object} parentContext
 * @returns {Promise} - resolves to an Array with the resolved things
 */

function callAndResolveAll(things, parentContext) {
  return _bluebird.Promise.map(things, function (thing, i) {
    return callAndResolve(thing, parentContext, i);
  });
}
//# sourceMappingURL=dryadic.js.map