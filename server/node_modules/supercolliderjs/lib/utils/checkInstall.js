'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = checkInstall;

var _resolveOptions = require('./resolveOptions');

var _resolveOptions2 = _interopRequireDefault(_resolveOptions);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Check that scsynth and sclang executables exist.
 *
 * This can be called in a postInstall step for a package
 * to inform the user if it can or cannot find scsynth and sclang.
 *
 * Posts the options to console.
 * Posts errors and any information it can find to help
 * the user.
 */
/* eslint no-console: 0 */

function checkInstall() {
  var checkSclang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var checkScsynth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  console.log('Checking supercollider.js install...');
  (0, _resolveOptions2.default)().then(function (options) {
    console.log('Default options:');
    console.log(JSON.stringify(options, null, 2));

    function check(binName) {
      return new Promise(function (resolve, reject) {
        var binPath = options[binName];
        _fs2.default.stat(binPath, function (err) {
          err ? reject(err) : resolve(binPath);
        });
      });
    }

    var checks = [];

    if (checkSclang) {
      checks.push(check('sclang'));
    }
    if (checkScsynth) {
      checks.push(check('scsynth'));
    }

    return Promise.all(checks).then(function (paths) {
      console.log('Paths OK: ' + paths.join(', '));
    }, function (error) {
      console.error('\nExecutable not found: ' + error.path);
      console.error(error);
      console.log('\nInstall SuperCollider if needed: http://supercollider.github.io/download\n' + 'If you already have it installed but it is in a non-standard location then edit\n' + (options.configPath + '\n') + 'and specify the paths to sclang and scsynth there.\n' + 'Then run this test again:\n' + 'npm run check-install\n');
    });
  }).catch(console.error);
}
//# sourceMappingURL=checkInstall.js.map