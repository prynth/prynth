{"version":3,"sources":["../../src/utils/resolveOptions.js"],"names":["resolveOptions","path","require","join","untildify","os","yaml","fs","_","defaultOptions","opts","debug","echo","stdin","langPort","serverPort","host","protocol","websocketPort","defaultRoot","platform","sclang","scsynth","sclang_conf","getUserHome","home","process","env","HOME","HOMEPATH","USERPROFILE","Error","filterUndefs","cleaned","each","value","key","isUndefined","configPath","commandLineOptions","resolve","reject","ok","aPath","options","extend","checkPath","resolvedPath","existsSync","loadConfig","safeLoad","readFileSync","error","mesage","explicitConfigPath","localConfigPath","homeDirConfigPath"],"mappings":"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","file":"resolveOptions.js","sourcesContent":["/**\n * Default configs for scsynth and sclang\n *\n * Looks for '.supercollider.yaml' starting from current working directory.\n *\n * Matching config files in child directories are shallow merged into config files found in parent directories. So a local project's .supercollider.yaml can inherit from a ~/.supercollider.yaml\n *\n *\n */\n\nimport { Promise } from 'bluebird';\n\nvar path = require('path'),\n  join = path.join,\n  untildify = require('untildify'),\n  os = require('os'),\n  yaml = require('js-yaml'),\n  fs = require('fs'),\n  _ = require('lodash');\nimport SCError from '../Errors';\n\nfunction defaultOptions() {\n  // should get this from server/default-server-options.json\n  let opts = {\n    debug: false,\n    echo: true,\n    stdin: true,\n    langPort: 57120,\n    serverPort: 57110,\n    host: '127.0.0.1',\n    protocol: 'udp',\n    websocketPort: 4040\n  };\n\n  let defaultRoot;\n  switch (os.platform()) {\n    case 'win32':\n      defaultRoot = 'C:\\\\Program Files (x86)\\\\SuperCollider';\n      opts.sclang = join(defaultRoot, 'sclang.exe');\n      opts.scsynth = join(defaultRoot, 'scsynth.exe');\n      opts.sclang_conf = join(defaultRoot, 'sclang_conf.yaml');\n      break;\n    case 'darwin':\n      opts.sclang = '/Applications/SuperCollider/SuperCollider.app/Contents/MacOS/sclang';\n      opts.scsynth = '/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth';\n      opts.sclang_conf = `${getUserHome()}/Library/Application Support/SuperCollider/sclang_conf.yaml`;\n      break;\n    default:\n      defaultRoot = '/usr/local/bin';\n      opts.sclang = join(defaultRoot, 'sclang');\n      opts.scsynth = join(defaultRoot, 'scsynth');\n      opts.sclang_conf = '/usr/local/share/SuperCollider/sclang_conf.yaml';\n  }\n\n  return opts;\n}\n\nfunction getUserHome() {\n  const home = process.env.HOME ||\n    process.env.HOMEPATH ||\n    process.env.USERPROFILE;\n  if (!home) {\n    throw new Error('Failed to find user home directory');\n  }\n  return home;\n}\n\nfunction filterUndefs(opts) {\n  var cleaned = {};\n  _.each(opts, (value, key) => {\n    if (!_.isUndefined(value)) {\n      cleaned[key] = value;\n    }\n  });\n  return cleaned;\n}\n\n/**\n  * load configuration files\n  * and merge options into a final dict\n  *\n  * @param {String} configPath - explicit path to a yaml config file\n  *           otherwise tries\n  *             .supercollider.yaml\n  *             ~/.supercollider.yaml\n  *\n  * @param {Object} commandLineOptions -\n  *            a dict of options to be merged over the loaded config.\n  *            eg. supplied command line options --sclang=/some/path/to/sclang\n  *\n  * @returns {Promise}\n  */\nexport default function resolveOptions(configPath, commandLineOptions) {\n  return new Promise((resolve, reject) => {\n    function ok(opts, aPath) {\n      var options = _.extend(\n        defaultOptions(),\n        filterUndefs(opts),\n        filterUndefs(commandLineOptions),\n        { configPath: aPath }\n      );\n\n      options.sclang = path.resolve(untildify(options.sclang));\n      options.scsynth = path.resolve(untildify(options.scsynth));\n\n      resolve(options);\n    }\n\n    function checkPath(aPath) {\n      let resolvedPath = path.resolve(untildify(aPath));\n      return fs.existsSync(resolvedPath) ? resolvedPath : null;\n    }\n\n    function loadConfig(aPath) {\n      try {\n        var options = yaml.safeLoad(fs.readFileSync(aPath, 'utf8'));\n        ok(options, aPath);\n      } catch (error) {\n        reject(\n          new SCError(`Error reading config file ${aPath}: ${error.mesage}`, {\n            error,\n            configPath: aPath\n          })\n        );\n      }\n    }\n\n    if (configPath) {\n      // explicit config path supplied\n      let explicitConfigPath = checkPath(configPath);\n      if (!explicitConfigPath) {\n        reject(new Error(`Config file not found: ${configPath}`));\n      } else {\n        loadConfig(explicitConfigPath);\n      }\n    } else {\n      // look in cwd\n      let localConfigPath = checkPath('.supercollider.yaml');\n      if (localConfigPath) {\n        loadConfig(localConfigPath);\n      } else {\n        // look in ~\n        let homeDirConfigPath = checkPath(\n          path.join(getUserHome(), '.supercollider.yaml')\n        );\n        if (homeDirConfigPath) {\n          loadConfig(homeDirConfigPath);\n        } else {\n          // use the defaults\n          ok({}, null);\n        }\n      }\n    }\n  });\n}\n"]}