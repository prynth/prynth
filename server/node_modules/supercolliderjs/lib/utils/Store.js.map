{"version":3,"sources":["../../src/utils/Store.js"],"names":[],"mappings":";;;;;;;;;;;;;;yBAEsB,WAAW;;;;;;;;;;;IAQZ,KAAK;AAEb,WAFQ,KAAK,GAEV;0BAFK,KAAK;;AAGtB,QAAI,CAAC,KAAK,GAAG,uBAAU,GAAG,EAAE,CAAC;GAC9B;;eAJkB,KAAK;;WAMnB,eAAC,IAAI,EAAE,WAAW,EAAE;AACvB,aAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KAC5C;;;;;;;;WAMU,qBAAC,IAAI,EAAE,EAAE,EAAE;AACpB,UAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,uBAAU,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;KAC7D;;;;;;;;;;;;WAUmB,8BAAC,IAAI,EAAE,EAAE,EAAE;AAC7B,UAAI,MAAM,EAAE,QAAQ,CAAC;;gBACA,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,uBAAU,GAAG,EAAE,CAAC,CAAC;;;;AAA/D,YAAM;AAAE,cAAQ;;AACjB,UAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC9C,aAAO,MAAM,CAAC;KACf;;;SA/BkB,KAAK;;;qBAAL,KAAK","file":"Store.js","sourcesContent":["\n\nimport Immutable from 'immutable';\n\n/**\n * A store that holds a state tree.\n *\n * Holds an Immutable.Map and offers functions to mutate sub-states in that tree,\n * and stores the new state.\n */\nexport default class Store {\n\n  constructor() {\n    this.state = Immutable.Map();\n  }\n\n  getIn(keys, notSetValue) {\n    return this.state.getIn(keys, notSetValue);\n  }\n\n  /**\n   * Fetch the object at keys\n   * pass it to the function which mutates it and returns new sub state.\n   */\n  mutateState(keys, fn) {\n    this.state = this.state.updateIn(keys, Immutable.Map(), fn);\n  }\n\n  /**\n   * Fetch one part of the state,\n   * mutate it with the callback,\n   * which returns result, subState.\n   * Save the subState back into state and return the result.\n   *\n   * @returns {any} result\n   */\n  mutateStateAndReturn(keys, fn) {\n    var result, subState;\n    [result, subState] = fn(this.state.getIn(keys, Immutable.Map()));\n    this.state = this.state.setIn(keys, subState);\n    return result;\n  }\n}\n"]}