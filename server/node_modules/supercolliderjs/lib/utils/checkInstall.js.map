{"version":3,"sources":["../../src/utils/checkInstall.js"],"names":["checkInstall","checkSclang","checkScsynth","console","log","then","JSON","stringify","options","check","binName","Promise","resolve","reject","binPath","stat","err","checks","push","all","paths","join","error","path","configPath","catch"],"mappings":";;;;;kBAewBA,Y;;AAbxB;;;;AACA;;;;;;AAEA;;;;;;;;;;AALA;;AAee,SAASA,YAAT,GAA+D;AAAA,MAAzCC,WAAyC,uEAA3B,IAA2B;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAC5EC,UAAQC,GAAR,CAAY,sCAAZ;AACA,kCACGC,IADH,CACQ,mBAAW;AACfF,YAAQC,GAAR,CAAY,kBAAZ;AACAD,YAAQC,GAAR,CAAYE,KAAKC,SAAL,CAAeC,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAZ;;AAEA,aAASC,KAAT,CAAeC,OAAf,EAAwB;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAUN,QAAQE,OAAR,CAAd;AACA,qBAAGK,IAAH,CAAQD,OAAR,EAAiB,eAAO;AACtBE,gBAAMH,OAAOG,GAAP,CAAN,GAAoBJ,QAAQE,OAAR,CAApB;AACD,SAFD;AAGD,OALM,CAAP;AAMD;;AAED,QAAIG,SAAS,EAAb;;AAEA,QAAIhB,WAAJ,EAAiB;AACfgB,aAAOC,IAAP,CAAYT,MAAM,QAAN,CAAZ;AACD;AACD,QAAIP,YAAJ,EAAkB;AAChBe,aAAOC,IAAP,CAAYT,MAAM,SAAN,CAAZ;AACD;;AAED,WAAOE,QAAQQ,GAAR,CAAYF,MAAZ,EAAoBZ,IAApB,CACL,iBAAS;AACPF,cAAQC,GAAR,gBAAyBgB,MAAMC,IAAN,CAAW,IAAX,CAAzB;AACD,KAHI,EAIL,iBAAS;AACPlB,cAAQmB,KAAR,8BAAyCA,MAAMC,IAA/C;AACApB,cAAQmB,KAAR,CAAcA,KAAd;AACAnB,cAAQC,GAAR,CACE,iFACE,mFADF,IAEKI,QAAQgB,UAFb,WAGE,sDAHF,GAIE,6BAJF,GAKE,yBANJ;AAQD,KAfI,CAAP;AAiBD,GAxCH,EAyCGC,KAzCH,CAyCStB,QAAQmB,KAzCjB;AA0CD","file":"checkInstall.js","sourcesContent":["/* eslint no-console: 0 */\n\nimport resolveOptions from './resolveOptions';\nimport fs from 'fs';\n\n/**\n * Check that scsynth and sclang executables exist.\n *\n * This can be called in a postInstall step for a package\n * to inform the user if it can or cannot find scsynth and sclang.\n *\n * Posts the options to console.\n * Posts errors and any information it can find to help\n * the user.\n */\nexport default function checkInstall(checkSclang = true, checkScsynth = true) {\n  console.log('Checking supercollider.js install...');\n  resolveOptions()\n    .then(options => {\n      console.log('Default options:');\n      console.log(JSON.stringify(options, null, 2));\n\n      function check(binName) {\n        return new Promise((resolve, reject) => {\n          let binPath = options[binName];\n          fs.stat(binPath, err => {\n            err ? reject(err) : resolve(binPath);\n          });\n        });\n      }\n\n      let checks = [];\n\n      if (checkSclang) {\n        checks.push(check('sclang'));\n      }\n      if (checkScsynth) {\n        checks.push(check('scsynth'));\n      }\n\n      return Promise.all(checks).then(\n        paths => {\n          console.log(`Paths OK: ${paths.join(', ')}`);\n        },\n        error => {\n          console.error(`\\nExecutable not found: ${error.path}`);\n          console.error(error);\n          console.log(\n            '\\nInstall SuperCollider if needed: http://supercollider.github.io/download\\n' +\n              'If you already have it installed but it is in a non-standard location then edit\\n' +\n              `${options.configPath}\\n` +\n              'and specify the paths to sclang and scsynth there.\\n' +\n              'Then run this test again:\\n' +\n              'npm run check-install\\n'\n          );\n        }\n      );\n    })\n    .catch(console.error);\n}\n"]}