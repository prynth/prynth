{"version":3,"sources":["../../src/utils/logger.js"],"names":["chalk","require","colors","debug","error","stdout","stderr","stdin","sendosc","rcvosc","Logger","echo","log","colorize","console","browser","window","text","print","label","color","JSON","stringify","undefined","lines","split","clean","rest","slice","filter","s","length","map","concat","join","trim","info"],"mappings":"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","file":"logger.js","sourcesContent":["/* eslint no-console: 0 */\n\nvar chalk = require('chalk');\n\nconst colors = {\n  debug: 'gray',\n  error: 'yellow',\n  stdout: 'green',\n  stderr: 'red',\n  stdin: 'blue',\n  sendosc: 'cyan',\n  rcvosc: 'magenta'\n};\n\n/**\n * A customized logging interface for supercollider.js\n *\n * Has special colors for osc messages and for logging stdin/stdout traffic.\n *\n * @example\n *\n *     log = new Logger(true, true);\n *\n *     log.dbug('a message');\n *     log.err('oh no');\n *     log.stdin('command that I sent')\n *     log.stdout('output from server')\n *     log.stderr('error from server')\n *\n */\nexport default class Logger {\n  /**\n   * @param {Boolean} debug - Post all debugging calls to log.\n   *                        If false then only errors are posted.\n   * @param {Boolean} echo - Echo stdin/stdout and osc traffic to console\n   * @param {winston.Logger|undefined} log - Default is to use console.(log|error)\n   *                                       but any object with a compatible API such\n   *                                       as winston will work.\n   */\n  constructor(debug, echo, log) {\n    this.debug = debug;\n    this.echo = echo;\n    this.colorize = typeof log === 'undefined';\n    this.log = log || console;\n    this.browser = typeof window !== 'undefined';\n  }\n\n  /**\n   * Log debugging information but only if this.debug is true\n   */\n  dbug(text) {\n    if (this.debug) {\n      this.print('debug  ', text, colors.debug);\n    }\n  }\n\n  /**\n   * Log an error.\n   */\n  err(text) {\n    this.print('error  ', text, colors.error);\n  }\n\n  /**\n   * Log messages that were sent to stdin or sclang.\n   */\n  stdin(text) {\n    if (this.echo) {\n      this.print('stdin  ', text, colors.stdin);\n    }\n  }\n\n  /**\n   * Log messages that were received from stdout of sclang/scsynth.\n   */\n  stdout(text) {\n    if (this.echo) {\n      this.print('stdout ', text, colors.stdout);\n    }\n  }\n\n  /**\n   * Log messages that were emitted from stderr of sclang/scsynth.\n   */\n  stderr(text) {\n    if (this.echo) {\n      this.print('stderr ', text, colors.stderr);\n    }\n  }\n\n  /**\n   * Log OSC messages sent to scsynth.\n   */\n  sendosc(text) {\n    if (this.echo) {\n      this.print('sendosc', text, colors.sendosc);\n    }\n  }\n\n  /**\n   * Log OSC messages received from scsynth.\n   */\n  rcvosc(text) {\n    if (this.echo) {\n      this.print('rcvosc ', text, colors.rcvosc);\n    }\n  }\n\n  /**\n   * @private\n   */\n  print(label, text, color) {\n    if (this.browser) {\n      console.log('%c' + label, 'font-size: 10px; color:' + color, text);\n    } else {\n      // terminal\n      if (typeof text !== 'string') {\n        text = JSON.stringify(text, undefined, 2);\n      }\n      var lines = text.split('\\n'),\n        clean = [label + ': ' + lines[0]],\n        rest = lines\n          .slice(1)\n          .filter(s => s.length > 0)\n          .map(s => '           ' + s);\n      clean = clean.concat(rest).join('\\n');\n      if (this.colorize) {\n        clean = chalk[color](clean);\n      }\n\n      switch (label.trim()) {\n        case 'debug':\n        case 'stdin':\n        case 'sendosc':\n        case 'rcvosc':\n          this.log.info(clean);\n          break;\n        case 'stderr':\n        case 'error':\n          this.log.error(clean);\n          break;\n        default:\n          this.log.info(clean);\n      }\n    }\n  }\n}\n"]}