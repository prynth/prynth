{"version":3,"sources":["../src/Errors.js"],"names":["copyOwnFrom","target","source","Object","getOwnPropertyNames","forEach","propName","defineProperty","getOwnPropertyDescriptor","ExtendableError","message","superInstance","Error","captureStackTrace","constructor","stack","SCError","data","SCLangError","type","error"],"mappings":";;;;;;;;;AACA;;;;;;;;;;;;AAEA;AACA,SAASA,WAAT,CAAqBC,MAArB,EAAqCC,MAArC,EAA6D;AAC3DC,SAAOC,mBAAP,CAA2BF,MAA3B,EAAmCG,OAAnC,CAA2C,UAASC,QAAT,EAA2B;AACpEH,WAAOI,cAAP,CACEN,MADF,EAEEK,QAFF,EAGEH,OAAOK,wBAAP,CAAgCN,MAAhC,EAAwCI,QAAxC,CAHF;AAKD,GAND;AAOA,SAAOL,MAAP;AACD;;IAEKQ,e,GAIJ,yBAAYC,OAAZ,EAA6B;AAAA;;AAC3B,MAAIC,gBAAgB,IAAIC,KAAJ,CAAUF,OAAV,CAApB,CAD2B,CACa;AACxCV,cAAY,IAAZ,EAAkBW,aAAlB;AACA,MAAI,OAAOC,MAAMC,iBAAb,KAAmC,UAAvC,EAAmD;AACjDD,UAAMC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,GAAaJ,cAAcI,KAA3B;AACD;AACF,C;;AAGH;;;;;;IAIaC,O,WAAAA,O;;;AAGX,mBAAYN,OAAZ,EAA6BO,IAA7B,EAA2C;AAAA;;AAAA,kHACnCP,OADmC;;AAEzC,UAAKO,IAAL,GAAYA,IAAZ;AAFyC;AAG1C;;AAED;;;;;;;;;6BAKSP,O,EAAiBO,I,EAAc;AACtC,WAAKP,OAAL,GAAeA,OAAf;AACA,WAAKO,IAAL,GAAY,sBAAO,KAAKA,IAAZ,EAAkBA,IAAlB,CAAZ;AACD;;;;EAhB0BR,e;;AAmB7B;;;;;;;;;;;;;;;IAaaS,W,WAAAA,W;;;AAIX,uBAAYR,OAAZ,EAA6BS,IAA7B,EAA2CC,KAA3C,EAA6E;AAAA,QAAnBH,IAAmB,uEAAJ,EAAI;;AAAA;;AAAA,2HACrEP,OADqE,EAC5DO,IAD4D;;AAE3E,WAAKE,IAAL,GAAYA,IAAZ;AACA,WAAKC,KAAL,GAAaA,KAAb;AACA,WAAKH,IAAL,GAAYA,IAAZ;AAJ2E;AAK5E;;;EAT8BD,O","file":"Errors.js","sourcesContent":["/* @flow */\nimport assign from 'lodash/assign';\n\n// http://www.2ality.com/2011/12/subtyping-builtins.html\nfunction copyOwnFrom(target: Object, source: Object): Object {\n  Object.getOwnPropertyNames(source).forEach(function(propName: string) {\n    Object.defineProperty(\n      target,\n      propName,\n      Object.getOwnPropertyDescriptor(source, propName)\n    );\n  });\n  return target;\n}\n\nclass ExtendableError {\n  message: string;\n  stack: string;\n\n  constructor(message: string) {\n    let superInstance = new Error(message); // Error.apply(null, [message]);\n    copyOwnFrom(this, superInstance);\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = superInstance.stack;\n    }\n  }\n}\n\n/**\n * A custom error class that adds a data field for passing structured error data.\n *\n */\nexport class SCError extends ExtendableError {\n  data: Object;\n\n  constructor(message: string, data: Object) {\n    super(message);\n    this.data = data;\n  }\n\n  /**\n    * Update message and data with additional information.\n    * Used when passing the error along but when you want\n    * to add additional contextual debugging information.\n    */\n  annotate(message: string, data: Object) {\n    this.message = message;\n    this.data = assign(this.data, data);\n  }\n}\n\n/**\n * SCLangError - syntax errors while interpreting code, interpret code execution errors, and asynchronous errors.\n *\n * @param type - SyntaxError | Error : Tells which format the error object will be in.\n * @param error - The error data object\n *               An Error will have a stack trace and all of the fields of the sclang error\n *               that it is generated from.\n *               SyntaxError is created by parsing the posted output of sclang.\n *\n * See SuperColliderJS-encodeError\n *\n * @param data - optional additional debug information supplied from supercollider.js\n */\nexport class SCLangError extends SCError {\n  type: string;\n  error: Object;\n\n  constructor(message: string, type: string, error: Object, data: Object = {}) {\n    super(message, data);\n    this.type = type;\n    this.error = error;\n    this.data = data;\n  }\n}\n"]}