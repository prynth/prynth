'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _msg = require('../server/osc/msg.js');

var _sclang = require('./sclang');

var _Types = require('../Types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Utility class to compile SynthDefs either from source code or by loading a path.
 *
 * Stores metadata, watches path for changes and can resend on change.
 * Can write compiled synthDefs to .scsyndef
 *
 * @ member of lang
 */
var SynthDefCompiler = function () {
  function SynthDefCompiler(lang) {
    _classCallCheck(this, SynthDefCompiler);

    this.lang = lang;
    this.store = new Map();
  }

  _createClass(SynthDefCompiler, [{
    key: 'boot',
    value: function boot() {
      var _this = this;

      if (!this.lang) {
        return (0, _sclang.boot)().then(function (lang) {
          _this.lang = lang;
          return _this.lang;
        });
      }
      return Promise.resolve(this.lang);
    }

    /**
     * Returns an object with each compiled synthdef
     * as a SynthDefResultType.
     */

  }, {
    key: 'compile',
    value: function compile(defs) {
      var _this2 = this;

      var defsList = _lodash2.default.toPairs(defs);
      return Promise.all(_lodash2.default.map(defsList, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            defName = _ref2[0],
            spec = _ref2[1];

        return _this2._compileOne(defName, spec);
      })).then(function (compiledDefs) {
        var defsMap = _lodash2.default.fromPairs(_lodash2.default.map(compiledDefs, function (result) {
          return [result.name, result];
        }));
        return defsMap;
      });
    }

    /**
     * Compile SynthDefs and send them to the server.
     *
     * @returns a Promise for {defName: SynthDefResult, ...}
     */

  }, {
    key: 'compileAndSend',
    value: function compileAndSend(defs, server) {
      var _this3 = this;

      return this.compile(defs).then(function (compiledDefs) {
        var commands = _lodash2.default.map(compiledDefs, function (_ref3) {
          var name = _ref3.name;
          return _this3.sendCommand(name);
        });
        return Promise.all(commands.map(function (cmd) {
          return server.callAndResponse(cmd);
        })).then(function () {
          return compiledDefs;
        });
      });
    }
  }, {
    key: 'set',
    value: function set(defName, data) {
      this.store.set(defName, data);
      return data;
    }
  }, {
    key: 'get',
    value: function get(defName) {
      return this.store.get(defName);
    }
  }, {
    key: 'allSendCommands',
    value: function allSendCommands() {
      var commands = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.store.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var defName = _step.value;

          commands.push(this.sendCommand(defName));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return commands;
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(defName) {
      var data = this.get(defName);
      var buffer = new Buffer(data.bytes);
      return (0, _msg.defRecv)(buffer);
    }

    // sendAll(server) {
    //   return Promise.all(
    //     this.store.keys().map((defName) => this.send(defName, server))
    //   );
    // }
    //
    // send(defName:string, server:Server) {
    //   let data = this.get(defName);
    //   let buffer = new Buffer(data.bytes);
    //   let promises = [
    //     context.scserver.callAndResponse(defRecv(buffer))
    //   ];
    //
    // }

  }, {
    key: '_compileOne',
    value: function _compileOne(defName, spec) {
      var _this4 = this;

      // path or source
      if (spec.source) {
        return this.compileSource(spec.source).then(function (result) {
          _this4.set(defName, result);
          return result;
        });
      }

      // if watch then add a watcher

      if (spec.path) {
        return this.compilePath(spec.path).then(function (result) {
          _this4.set(result.name, result);
          return result;
        });
      }

      return Promise.reject(new Error('Spec to SynthDefCompiler not recognized ' + defName + ' ' + JSON.stringify(spec)));
    }

    /**
     * Returns a Promise for a SynthDef result object: name, bytes, synthDesc
     */

  }, {
    key: 'compileSource',
    value: function compileSource(sourceCode, pathName) {
      var wrappedCode = '{\n      var def = { ' + sourceCode + ' }.value.asSynthDef;\n      (\n        name: def.name,\n        synthDesc: def.asSynthDesc.asJSON(),\n        bytes: def.asBytes()\n      )\n    }.value;';
      if (this.lang) {
        return this.lang.interpret(wrappedCode, undefined, false, false, true).then(function (result) {
          return result;
        }, function (error) {
          error.annotate('Failed to compile SynthDef  ' + error.message + ' ' + (pathName || ''), {
            sourceCode: sourceCode
          });
          return Promise.reject(error);
        });
      }
      return Promise.reject(new Error('SC intpreter is not booted'));
    }

    /**
     * Returns a Promise for a SynthDef result object: name, bytes, synthDesc
     */

  }, {
    key: 'compilePath',
    value: function compilePath(sourcePath) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        _fs2.default.readFile(_path2.default.resolve(sourcePath), function (err, fileBuf) {
          if (err) {
            reject(err);
          } else {
            // is it really just ascii ?
            _this5.compileSource(fileBuf.toString('ascii'), sourcePath).then(resolve, reject);
          }
        });
      });
    }
  }]);

  return SynthDefCompiler;
}();

exports.default = SynthDefCompiler;
//# sourceMappingURL=SynthDefCompiler.js.map