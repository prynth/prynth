{"version":3,"sources":["../../src/lang/sclang.js"],"names":["boot","SCLang","options","process","log","debug","echo","dbug","stateWatcher","makeStateWatcher","o","push","executeFile","langPort","config","str","safeDump","indent","resolve","reject","open","err","info","write","fd","err2","close","err3","path","state","setState","BOOTING","sclangConfigOptions","e","makeSclangConfig","then","spawnProcess","sclang","extend","configPath","execPath","commandLineOptions","done","_spawnProcess","args","pid","Error","bootListener","READY","removeListener","result","COMPILE_ERROR","addListener","setTimeout","processOutput","installListeners","Boolean","stdin","cwd","dirname","runtimeIncludePaths","__dirname","defaultConf","postInlineWarnings","includePaths","excludePaths","sclang_conf","safeLoad","readFileSync","failIfSclangConfIsMissing","union","postInlineWarning","isUndefined","name","on","emit","subprocess","listenToStdin","setEncoding","chunk","stdout","ds","String","data","parse","stderr","error","code","signal","callback","noEcho","setConfigPath","interpret","nowExecutingPath","asString","postErrors","getBacktrace","escaped","replace","guid","join","registerCall","filename","dirs","cleanup","once","kill","opts","storeSclangConf"],"mappings":"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","file":"sclang.js","sourcesContent":["/**\n * @ -- flow  -- not quite ready\n */\n\nimport _ from 'lodash';\nimport cuid from 'cuid';\nimport fs from 'fs';\nimport temp from 'temp';\nimport untildify from 'untildify';\nimport yaml from 'js-yaml';\nimport path from 'path';\nimport { EventEmitter } from 'events';\nimport { spawn } from 'child_process';\nimport { Promise } from 'bluebird';\n\nimport Logger from '../utils/logger';\nimport { SclangIO, STATES } from './internals/sclang-io';\nimport resolveOptions from '../utils/resolveOptions';\nimport { SCError } from '../Errors';\nimport { SclangResultType } from '../Types';\n\n// This is a private magic built in type.\n// It is now undefined, so using any until I track that down.\n// 'any' just opts out of type checking\ntype ChildProcessType = any; // child_process$ChildProcess;\n\n/**\n  * This class manages a supercollider language interpreter process\n  * and sends messages to and from it using STDIN / STDOUT.\n  *\n  *  SuperCollider comes with an executable called sclang\n  *  which can be communicated with via stdin/stdout\n  *  or via OSC.\n  *\n  *\n  * @ member of lang\n  * @extends EventEmitter\n  */\nexport default class SCLang extends EventEmitter {\n  options: Object;\n  process: ?ChildProcessType;\n  log: Logger;\n  stateWatcher: SclangIO;\n\n  /*\n   * @param {object} options - sclang command line options\n   */\n  constructor(options: Object = {}) {\n    super();\n    this.options = options || {};\n    this.process = null;\n    this.log = new Logger(\n      this.options.debug,\n      this.options.echo,\n      this.options.log\n    );\n    this.log.dbug(this.options);\n    this.stateWatcher = this.makeStateWatcher();\n  }\n\n  /**\n   * build args for sclang\n   *\n   * ```\n   *   -d <path>                      Set runtime directory\n   *   -D                             Enter daemon mode (no input)\n   *   -g <memory-growth>[km]         Set heap growth (default 256k)\n   *   -h                             Display this message and exit\n   *   -l <path>                      Set library configuration file\n   *   -m <memory-space>[km]          Set initial heap size (default 2m)\n   *   -r                             Call Main.run on startup\n   *   -s                             Call Main.stop on shutdown\n   *   -u <network-port-number>       Set UDP listening port (default 57120)\n   *   -i <ide-name>                  Specify IDE name (for enabling IDE-specific class code, default \"none\")\n   *   -a                             Standalone mode\n   * ```\n   */\n  args(options: Object): Array<string> {\n    var o = [];\n    o.push('-i', 'supercolliderjs');\n    if (options.executeFile) {\n      o.push(options.executeFile);\n    }\n    o.push('-u', options.langPort);\n    if (options.config) {\n      o.push('-l', options.config);\n    }\n    return o;\n  }\n\n  /**\n   * makeSclangConfig\n   *\n   * make sclang_config.yaml as a temporary file\n   * with the supplied values\n   *\n   * This is the config file that sclang reads, specifying\n   * includePaths and excludePaths\n   *\n   */\n  makeSclangConfig(config: Object): Promise<string> {\n    /**\n      write options as yaml to a temp file\n      and return the path\n    **/\n    let str = yaml.safeDump(config, { indent: 4 });\n    return new Promise((resolve, reject) => {\n      temp.open('sclang-config', function(err, info) {\n        if (err) {\n          return reject(err);\n        }\n\n        fs.write(info.fd, str, err2 => {\n          if (err2) {\n            reject(err2);\n          } else {\n            fs.close(info.fd, err3 => {\n              if (err3) {\n                reject(err3);\n              } else {\n                resolve(info.path);\n              }\n            });\n          }\n        });\n      });\n    });\n  }\n\n  isReady() {\n    return this.stateWatcher.state === 'ready';\n  }\n\n  /**\n   * Start sclang executable as a subprocess.\n   *\n   * sclang will compile it's class library, and this may result in syntax\n   * or compile errors. These errors are parsed and returned in a structured format.\n   *\n   * Resolves with:\n   *\n   * ```js\n   * {dirs: [compiled directories]}\n   * ```\n   *\n   * or rejects with:\n   *\n   * ```js\n   * {\n   *   dirs: [],\n   *   compileErrors: [],\n   *   parseErrors: [],\n   *   duplicateClasses: [],\n   *   errors[],\n   *   extensionErrors: [],\n   *   stdout: 'compiling class library...etc.'\n   * }\n   * ```\n   *\n   * @returns {Promise}\n   */\n  boot(): Promise<*> {\n    this.setState(STATES.BOOTING);\n\n    // merge supercollider.js options with any sclang_conf\n    let config;\n    try {\n      config = this.sclangConfigOptions(this.options);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n\n    return this.makeSclangConfig(config).then(configPath => {\n      return this.spawnProcess(\n        this.options.sclang,\n        _.extend({}, this.options, { config: configPath })\n      );\n    });\n  }\n\n  /**\n   * spawnProcess - starts the sclang executable\n   *\n   * sets this.process\n   * adds state listeners\n   *\n   * @param {string} execPath - path to sclang\n   * @param {object} commandLineOptions - options for the command line\n   *                filtered with this.args so it will only include values\n   *                that sclang uses.\n   * @returns {Promise}\n   *     resolves null on successful boot and compile\n   *     rejects on failure to boot or failure to compile the class library\n   */\n  spawnProcess(execPath: string, commandLineOptions: Object): Promise<*> {\n    return new Promise((resolve, reject) => {\n      var done = false;\n\n      this.process = this._spawnProcess(\n        execPath,\n        this.args(commandLineOptions)\n      );\n      if (!(this.process && this.process.pid)) {\n        reject(new Error(`Failed to spawn process: ${execPath}`));\n        return;\n      }\n\n      var bootListener = state => {\n        if (state === STATES.READY) {\n          done = true;\n          this.removeListener('state', bootListener);\n          resolve(this.stateWatcher.result);\n        } else if (state === STATES.COMPILE_ERROR) {\n          done = true;\n          reject(new SCError('CompileError', this.stateWatcher.result));\n          this.removeListener('state', bootListener);\n          // probably should remove all listeners\n        }\n      };\n\n      // temporary listener until booted ready or compileError\n      // that removes itself\n      this.addListener('state', bootListener);\n\n      setTimeout(\n        () => {\n          if (!done) {\n            this.log.err('Timeout waiting for sclang to boot');\n            // force it to finalize\n            this.stateWatcher.processOutput();\n            // bootListener above will reject the promise\n            this.stateWatcher.setState(STATES.COMPILE_ERROR);\n            this.removeListener('state', bootListener);\n          }\n        },\n        10000\n      );\n\n      // long term listeners\n      if (this.process) {\n        this.installListeners(this.process, Boolean(this.options.stdin));\n      }\n    });\n  }\n\n  _spawnProcess(\n    execPath: string,\n    commandLineOptions: Array<string>\n  ): ChildProcessType {\n    return spawn(execPath, commandLineOptions, {\n      cwd: path.dirname(execPath)\n    });\n  }\n\n  /**\n   * sclangConfigOptions\n   *\n   * Builds the options that will be written to the config file that is read by sclang\n   * If supercolliderjs-conf specifies a sclang_conf path\n   * then this is read and any includePaths and excludePaths are merged\n   *\n   * throws error if config cannot be read\n   *\n   * @param {object} options - supercolliderJs options\n   * @returns {object} - sclang_config variables\n   */\n  sclangConfigOptions(options: Object = {}) {\n    let runtimeIncludePaths = [\n      path.resolve(__dirname, '../../lib/supercollider-js')\n    ];\n    let defaultConf = {\n      postInlineWarnings: false,\n      includePaths: [],\n      excludePaths: []\n    };\n    let sclang_conf = defaultConf;\n\n    if (options.sclang_conf) {\n      try {\n        sclang_conf = yaml.safeLoad(\n          fs.readFileSync(untildify(options.sclang_conf), 'utf8')\n        );\n      } catch (e) {\n        // By default allow a missing sclang_conf file\n        // so that the language can create it on demand if you use Quarks or LanguageConfig.\n        if (!options.failIfSclangConfIsMissing) {\n          // Was the sclang_conf just in the defaults or was it explicitly set ?\n          this.log.dbug(e);\n          sclang_conf = defaultConf;\n        } else {\n          throw new Error(\n            'Cannot open or read specified sclang_conf ' + options.sclang_conf\n          );\n        }\n      }\n    }\n\n    return {\n      includePaths: _.union(\n        sclang_conf.includePaths,\n        options.includePaths,\n        runtimeIncludePaths\n      ),\n      excludePaths: _.union(sclang_conf.excludePaths, options.excludePaths),\n      postInlineWarning: _.isUndefined(options.postInlineWarnings)\n        ? Boolean(sclang_conf.postInlineWarnings)\n        : Boolean(options.postInlineWarnings)\n    };\n  }\n\n  makeStateWatcher(): SclangIO {\n    let stateWatcher = new SclangIO(this);\n    for (let name of ['interpreterLoaded', 'error', 'stdout', 'state']) {\n      stateWatcher.on(name, (...args) => {\n        this.emit(name, ...args);\n      });\n    }\n    return stateWatcher;\n  }\n\n  /**\n    * listen to events from process and pipe stdio to the stateWatcher\n    */\n  installListeners(\n    subprocess: ChildProcessType,\n    listenToStdin: boolean = false\n  ) {\n    if (listenToStdin) {\n      // stdin of the global top level nodejs process\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', chunk => {\n        if (chunk) {\n          this.write(chunk, null, true);\n        }\n      });\n    }\n    subprocess.stdout.on('data', data => {\n      var ds = String(data);\n      this.log.dbug(ds);\n      this.stateWatcher.parse(ds);\n    });\n    subprocess.stderr.on('data', data => {\n      var error = String(data);\n      this.log.stderr(error);\n      this.emit('stderr', error);\n    });\n    subprocess.on('error', err => {\n      this.log.err('ERROR:' + err, 'error');\n      this.emit('stderr', err);\n    });\n    subprocess.on('close', (code, signal) => {\n      this.log.dbug('close ' + code + signal);\n      this.emit('exit', code);\n      this.setState(null);\n    });\n    subprocess.on('exit', (code, signal) => {\n      this.log.dbug('exit ' + code + signal);\n      this.emit('exit', code);\n      this.setState(null);\n    });\n    subprocess.on('disconnect', () => {\n      this.log.dbug('disconnect');\n      this.emit('exit');\n      this.setState(null);\n    });\n  }\n\n  /**\n   * write\n   *\n   * Send a raw string to sclang to be interpreted\n   * callback is called after write is complete.\n   */\n  write(chunk: string, callback: ?Function, noEcho: boolean) {\n    if (!noEcho) {\n      this.log.stdin(chunk);\n    }\n    this.log.dbug(chunk);\n    this.process.stdin.write(chunk, 'UTF-8');\n    // Send the escape character which is interpreted by sclang as:\n    // \"evaluate the currently accumulated command line as SC code\"\n    this.process.stdin.write('\\x0c', null, callback);\n  }\n\n  /**\n    * storeSclangConf\n    *\n    * Store the original configuration path\n    * so that it can be accessed by the modified Quarks methods\n    * to store into the correct conf file.\n    */\n  storeSclangConf(): Promise<SCLang> {\n    if (this.options.sclang_conf) {\n      var configPath = path.resolve(untildify(this.options.sclang_conf));\n      var setConfigPath = 'SuperColliderJS.sclangConf = \"' +\n        configPath +\n        '\";\\n\\n';\n      return this.interpret(setConfigPath, null, true, true, true).then(\n        () => this\n      );\n    } else {\n      return Promise.resolve(this);\n    }\n  }\n\n  /**\n   * Interprets code in sclang and returns a Promise.\n   *\n   * @param {String} code\n   *        source code to evaluate\n   * @param {String} nowExecutingPath\n            set thisProcess.nowExecutingPath\n   *        for use in a REPL to evaluate text in a file\n   *        and let sclang know what file it is executing.\n   * @param {Boolean} asString\n   *        return result .asString for post window\n   *        otherwise returns result as a JSON object\n   * @param {Boolean} postErrors\n   *        call error.reportError on any errors\n   *        which posts call stack, receiver, args, etc\n   * @param {Boolean} getBacktrace\n   *        return full backtrace\n   * @returns {Promise} results - which resolves with result as JSON or rejects with SCLangError.\n   */\n  interpret(\n    code: string,\n    nowExecutingPath: ?string,\n    asString: boolean,\n    postErrors: boolean,\n    getBacktrace: boolean\n  ): Promise<SclangResultType> {\n    return new Promise((resolve, reject) => {\n      var escaped = code\n        .replace(/[\\n\\r]/g, '__NL__')\n        .replace(/\\\\/g, '__SLASH__')\n        .replace(/\\\"/g, '\\\\\"');\n      var guid = cuid();\n\n      var args = [\n        '\"' + guid + '\"',\n        '\"' + escaped + '\"',\n        nowExecutingPath ? '\"' + nowExecutingPath + '\"' : 'nil',\n        asString ? 'true' : 'false',\n        postErrors ? 'true' : 'false',\n        getBacktrace ? 'true' : 'false'\n      ].join(',');\n\n      this.stateWatcher.registerCall(guid, { resolve, reject });\n      this.write('SuperColliderJS.interpret(' + args + ');', null, true);\n    });\n  }\n\n  /**\n   * executeFile\n   */\n  executeFile(filename: string) {\n    return new Promise((resolve, reject) => {\n      var guid = cuid();\n      this.stateWatcher.registerCall(guid, { resolve, reject });\n      this.write(\n        `SuperColliderJS.executeFile(\"${guid}\", \"${filename}\")`,\n        null,\n        true\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  setState(state: ?string) {\n    this.stateWatcher.setState(state);\n  }\n\n  compilePaths(): [string] {\n    return this.stateWatcher.result.dirs;\n  }\n\n  quit(): Promise<SCLang> {\n    return new Promise(resolve => {\n      var cleanup = () => {\n        this.process = null;\n        this.setState(null);\n        resolve(this);\n      };\n      if (this.process) {\n        this.process.once('exit', cleanup);\n        // request a polite shutdown\n        this.process.kill('SIGINT');\n        setTimeout(\n          () => {\n            // 3.6.6 doesn't fully respond to SIGINT\n            // but SIGTERM causes it to crash\n            if (this.process) {\n              this.process.kill('SIGTERM');\n              cleanup();\n            }\n          },\n          250\n        );\n      } else {\n        cleanup();\n      }\n    });\n  }\n}\n\n/**\n  * Boots an sclang interpreter, resolving options and connecting.\n  *\n  * @memberof lang\n  *\n  * @param {Object} commandLineOptions - A dict of options to be merged into the loaded config. Command line options to be supplied to sclang --sclang=/some/path/to/sclang\n  * commandLineOptions.config - Explicit path to a yaml config file\n  * If undefined then it will look for config files in:\n  *    - .supercollider.yaml\n  *    - ~/.supercollider.yaml\n  */\nexport function boot(commandLineOptions: Object = {}): Promise<SCLang> {\n  return resolveOptions(\n    commandLineOptions.config,\n    commandLineOptions\n  ).then(opts => {\n    var sclang = new SCLang(opts);\n    return sclang.boot().then(() => {\n      return sclang.storeSclangConf().then(() => sclang);\n    });\n  });\n}\n\n// deprec. will be removed in 1.0\nSCLang.boot = boot;\n"]}