{"version":3,"sources":["../src/map.js"],"names":["midiToFreq","freqToMidi","linToLin","linToExp","expToLin","ampToDb","dbToAmp","linear","exp","dB","fader","unmapLinear","unmapExp","unmapDb","unmapFader","unmapWithSpec","mapWithSpec","midiNote","Math","pow","freq","mult","log","round","inMin","inMax","outMin","outMax","value","amp","log10","db","spec","range","maxval","minval","ratio","sqrt","warp","Error"],"mappings":"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","file":"map.js","sourcesContent":["/**\n * Useful mapping functions from supercollider\n *  @flow\n *  @module map\n */\n\n/**\n * Convert a MIDI note (1..127) to frequency.\n */\nexport function midiToFreq(midiNote: number): number {\n  return 440.0 * Math.pow(2, (midiNote - 69.0) / 12.0);\n}\n\n/**\n * Convert frequency to MIDI note (1..127).\n */\nexport function freqToMidi(freq: number): number {\n  let mult = Math.log(freq / 400.0) / Math.log(2);\n  return Math.round(12.0 * mult + 69);\n}\n\n/**\n * Map a number from linear min/max to min/max.\n */\nexport function linToLin(\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number,\n  value: number\n): number {\n  if (value <= inMin) {\n    return outMin;\n  }\n  if (value >= inMax) {\n    return outMax;\n  }\n  return (value - inMin) / (inMax - inMin) * (outMax - outMin) + outMin;\n}\n\n/**\n* Map a number from linear min/max to exponential min/max.\n */\nexport function linToExp(\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number,\n  value: number\n): number {\n  if (value <= inMin) {\n    return outMin;\n  }\n  if (value >= inMax) {\n    return outMax;\n  }\n  return Math.pow(outMax / outMin, (value - inMin) / (inMax - inMin)) * outMin;\n}\n\n/**\n* Map a number from exponential min/max to linear min/max.\n */\nexport function expToLin(\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number,\n  value: number\n): number {\n  if (value <= inMin) {\n    return outMin;\n  }\n  if (value >= inMax) {\n    return outMax;\n  }\n  return Math.pow(\n    outMax / outMin,\n    Math.log(value / inMin) / Math.log(inMax / inMin)\n  ) * outMin;\n}\n\n/**\n * Map an amplitude value (usually 0..1) to dB.\n */\nexport function ampToDb(amp: number): number {\n  return Math.log10(amp) * 20.0;\n}\n\n/**\n * Map dB to an amplitude value that can be used as a multiplier.\n */\nexport function dbToAmp(db: number): number {\n  return Math.pow(10.0, db * 0.05);\n}\n\n/**\n * Returns a function that maps 0..1 input to the spec's minval..maxval with a linear curve.\n */\nexport function linear(spec: Object): Function {\n  let range = spec.maxval - spec.minval;\n  return function(value) {\n    return value * range + spec.minval;\n  };\n}\n\n/**\n * Returns a function that maps 0..1 input to the spec's minval..maxval with an exponential curve. minval/maxval must not have oppositive signs -- ie. the output range must not cross zero.\n */\nexport function exp(spec: Object): Function {\n  let ratio = spec.maxval / spec.minval;\n  return function(value) {\n    return Math.pow(ratio, value) * spec.minval;\n  };\n}\n\n/**\n * Returns dB mapping function (DbFaderWarp)\n */\nexport function dB(spec: Object): Function {\n  let minval = dbToAmp(spec.minval);\n  let range = dbToAmp(spec.maxval) - minval;\n  return function(value) {\n    return ampToDb(Math.pow(value, 2) * range - minval);\n  };\n}\n\n/**\n * Returns amp mapping function (FaderWarp)\n */\nexport function fader(spec: Object): Function {\n  let range = spec.maxval - spec.minval;\n  return function(value) {\n    return Math.pow(value, 2) * range - spec.minval;\n  };\n}\n\n/**\n * Returns inverse of linear mapping function\n */\nexport function unmapLinear(spec: Object): Function {\n  let range = spec.maxval - spec.minval;\n  return function(value) {\n    return (value - spec.minval) / range;\n  };\n}\n\n/**\n * Returns inverse of exponential mapping function\n */\nexport function unmapExp(spec: Object): Function {\n  let ratio = Math.log(spec.maxval / spec.minval);\n  return function(value) {\n    return Math.log(value / spec.minval) / ratio;\n  };\n}\n\n/**\n * Returns inverse of dB mapping function (DbFaderWarp)\n */\nexport function unmapDb(spec: Object): Function {\n  let minval = dbToAmp(spec.minval);\n  let range = dbToAmp(spec.maxval) - minval;\n  return function(value) {\n    return (dbToAmp(value) - minval) / Math.sqrt(range);\n  };\n}\n\n/**\n * Returns inverse of amp mapping function (FaderWarp)\n */\nexport function unmapFader(spec: Object): Function {\n  let range = spec.maxval - spec.minval;\n  return function(value) {\n    return Math.sqrt((value - spec.minval) / range);\n  };\n}\n\n/**\n * Returns the inverse mapping function for a spec, using the curve\n * as defined by spec.warp\n */\nexport function unmapWithSpec(value: number, spec: Object): number {\n  switch (spec.warp) {\n    case 'linear':\n    case 'lin':\n      return unmapLinear(spec)(value);\n    case 'exp':\n    case 'exponential':\n      return unmapExp(spec)(value);\n    case 'amp':\n      return unmapFader(spec)(value);\n    case 'db':\n      return unmapDb(spec)(value);\n    default:\n      throw new Error('Warp unknown or not yet implemented' + spec.warp);\n  }\n}\n\n/**\n * Returns the mapping function for a spec, using the curve\n * as defined by spec.warp\n */\nexport function mapWithSpec(value: number, spec: Object): number {\n  switch (spec.warp) {\n    case 'linear':\n    case 'lin':\n      return linear(spec)(value);\n    case 'exp':\n    case 'exponential':\n      return exp(spec)(value);\n    case 'amp':\n      return fader(spec)(value);\n    case 'db':\n      return dB(spec)(value);\n    default:\n      throw new Error('Warp unknown or not yet implemented' + spec.warp);\n  }\n}\n"]}